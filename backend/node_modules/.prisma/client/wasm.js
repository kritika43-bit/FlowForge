
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  position: 'position',
  department: 'department',
  location: 'location',
  avatar: 'avatar',
  bio: 'bio',
  skills: 'skills',
  role: 'role',
  isActive: 'isActive',
  joinDate: 'joinDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CertificationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  issuer: 'issuer',
  issueDate: 'issueDate',
  expiryDate: 'expiryDate',
  isVerified: 'isVerified',
  userId: 'userId'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  type: 'type',
  description: 'description',
  metadata: 'metadata',
  timestamp: 'timestamp',
  userId: 'userId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  unitCost: 'unitCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillOfMaterialsScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  version: 'version',
  status: 'status',
  description: 'description',
  totalCost: 'totalCost',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BomItemScalarFieldEnum = {
  id: 'id',
  bomId: 'bomId',
  componentId: 'componentId',
  quantity: 'quantity',
  unit: 'unit',
  unitCost: 'unitCost',
  totalCost: 'totalCost',
  leadTimeDays: 'leadTimeDays',
  supplier: 'supplier',
  specifications: 'specifications'
};

exports.Prisma.ManufacturingOrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  productId: 'productId',
  quantity: 'quantity',
  status: 'status',
  priority: 'priority',
  startDate: 'startDate',
  deadline: 'deadline',
  completedAt: 'completedAt',
  assignedToId: 'assignedToId',
  estimatedCost: 'estimatedCost',
  actualCost: 'actualCost',
  progress: 'progress',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkCenterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  location: 'location',
  status: 'status',
  capacity: 'capacity',
  hourlyCost: 'hourlyCost',
  utilization: 'utilization',
  efficiency: 'efficiency',
  downtime: 'downtime',
  totalHours: 'totalHours',
  productiveHours: 'productiveHours',
  specifications: 'specifications',
  maintenanceScheduled: 'maintenanceScheduled',
  lastMaintenance: 'lastMaintenance',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkOrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  title: 'title',
  description: 'description',
  manufacturingOrderId: 'manufacturingOrderId',
  workCenterId: 'workCenterId',
  assignedToId: 'assignedToId',
  status: 'status',
  priority: 'priority',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  progress: 'progress',
  startedAt: 'startedAt',
  pausedAt: 'pausedAt',
  completedAt: 'completedAt',
  dueDate: 'dueDate',
  pausedReason: 'pausedReason',
  comments: 'comments',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StockItemScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  currentStock: 'currentStock',
  minStock: 'minStock',
  maxStock: 'maxStock',
  unit: 'unit',
  location: 'location',
  unitCost: 'unitCost',
  totalValue: 'totalValue',
  lastMovement: 'lastMovement',
  supplier: 'supplier',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StockMovementScalarFieldEnum = {
  id: 'id',
  stockItemId: 'stockItemId',
  type: 'type',
  quantity: 'quantity',
  balanceBefore: 'balanceBefore',
  balanceAfter: 'balanceAfter',
  reference: 'reference',
  reason: 'reason',
  operatorId: 'operatorId',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  OPERATOR: 'OPERATOR',
  INVENTORY: 'INVENTORY'
};

exports.BomStatus = exports.$Enums.BomStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  OBSOLETE: 'OBSOLETE'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PLANNED: 'PLANNED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  DELAYED: 'DELAYED',
  CANCELLED: 'CANCELLED'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.WorkCenterStatus = exports.$Enums.WorkCenterStatus = {
  RUNNING: 'RUNNING',
  IDLE: 'IDLE',
  MAINTENANCE: 'MAINTENANCE',
  OFFLINE: 'OFFLINE'
};

exports.WorkOrderStatus = exports.$Enums.WorkOrderStatus = {
  PENDING: 'PENDING',
  STARTED: 'STARTED',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.StockMovementType = exports.$Enums.StockMovementType = {
  IN: 'IN',
  OUT: 'OUT',
  RETURN: 'RETURN',
  ADJUSTMENT: 'ADJUSTMENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Certification: 'Certification',
  UserActivity: 'UserActivity',
  Product: 'Product',
  BillOfMaterials: 'BillOfMaterials',
  BomItem: 'BomItem',
  ManufacturingOrder: 'ManufacturingOrder',
  WorkCenter: 'WorkCenter',
  WorkOrder: 'WorkOrder',
  StockItem: 'StockItem',
  StockMovement: 'StockMovement'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
