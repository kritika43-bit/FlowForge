// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management and authentication
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  firstName  String
  lastName   String
  phone      String?
  position   String
  department String
  location   String?
  avatar     String?
  bio        String?
  skills     String[] // Array of skill names
  role       UserRole @default(OPERATOR)
  isActive   Boolean  @default(true)
  joinDate   DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  manufacturingOrders ManufacturingOrder[]
  workOrders          WorkOrder[]
  stockMovements      StockMovement[]
  certifications      Certification[]
  activities          UserActivity[]

  @@map("users")
}

model Certification {
  id         String    @id @default(cuid())
  name       String
  issuer     String
  issueDate  DateTime
  expiryDate DateTime?
  isVerified Boolean   @default(false)
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

model UserActivity {
  id          String   @id @default(cuid())
  type        String // order_completed, work_order_assigned, etc.
  description String
  metadata    Json? // Additional data about the activity
  timestamp   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

// Product and BOM management
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  unitCost    Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  manufacturingOrders ManufacturingOrder[]
  billsOfMaterials    BillOfMaterials[]
  bomComponents       BomItem[]            @relation("ComponentBomItems")
  stockItems          StockItem[]

  @@map("products")
}

model BillOfMaterials {
  id          String    @id @default(cuid())
  productId   String
  version     String
  status      BomStatus @default(DRAFT)
  description String?
  totalCost   Float?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  product Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  items   BomItem[]

  @@unique([productId, version])
  @@map("bills_of_materials")
}

model BomItem {
  id             String  @id @default(cuid())
  bomId          String
  componentId    String
  quantity       Float
  unit           String
  unitCost       Float?
  totalCost      Float?
  leadTimeDays   Int?
  supplier       String?
  specifications String?

  // Relationships
  bom       BillOfMaterials @relation(fields: [bomId], references: [id], onDelete: Cascade)
  component Product         @relation("ComponentBomItems", fields: [componentId], references: [id])

  @@map("bom_items")
}

// Manufacturing Orders
model ManufacturingOrder {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  productId     String
  quantity      Int
  status        OrderStatus @default(PLANNED)
  priority      Priority    @default(MEDIUM)
  startDate     DateTime?
  deadline      DateTime
  completedAt   DateTime?
  assignedToId  String?
  estimatedCost Float?
  actualCost    Float?
  progress      Float       @default(0)
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relationships
  product    Product     @relation(fields: [productId], references: [id])
  assignedTo User?       @relation(fields: [assignedToId], references: [id])
  workOrders WorkOrder[]

  @@map("manufacturing_orders")
}

// Work Orders and Work Centers
model WorkCenter {
  id                   String           @id @default(cuid())
  name                 String           @unique
  type                 String
  location             String
  status               WorkCenterStatus @default(IDLE)
  capacity             Float            @default(100)
  hourlyCost           Float
  utilization          Float            @default(0)
  efficiency           Float            @default(0)
  downtime             Float            @default(0)
  totalHours           Float            @default(0)
  productiveHours      Float            @default(0)
  specifications       Json? // Store machine specs as JSON
  maintenanceScheduled DateTime?
  lastMaintenance      DateTime?
  isActive             Boolean          @default(true)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  // Relationships
  workOrders WorkOrder[]

  @@map("work_centers")
}

model WorkOrder {
  id                   String          @id @default(cuid())
  orderNumber          String          @unique
  title                String
  description          String?
  manufacturingOrderId String
  workCenterId         String
  assignedToId         String?
  status               WorkOrderStatus @default(PENDING)
  priority             Priority        @default(MEDIUM)
  estimatedHours       Float
  actualHours          Float?
  progress             Float           @default(0)
  startedAt            DateTime?
  pausedAt             DateTime?
  completedAt          DateTime?
  dueDate              DateTime
  pausedReason         String?
  comments             String?
  tags                 String[]
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  // Relationships
  manufacturingOrder ManufacturingOrder @relation(fields: [manufacturingOrderId], references: [id], onDelete: Cascade)
  workCenter         WorkCenter         @relation(fields: [workCenterId], references: [id])
  assignedTo         User?              @relation(fields: [assignedToId], references: [id])

  @@map("work_orders")
}

// Stock and Inventory Management
model StockItem {
  id           String    @id @default(cuid())
  productId    String
  currentStock Float
  minStock     Float
  maxStock     Float
  unit         String
  location     String
  unitCost     Float?
  totalValue   Float?
  lastMovement DateTime?
  supplier     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  product   Product         @relation(fields: [productId], references: [id])
  movements StockMovement[]

  @@unique([productId, location])
  @@map("stock_items")
}

model StockMovement {
  id            String            @id @default(cuid())
  stockItemId   String
  type          StockMovementType
  quantity      Float
  balanceBefore Float
  balanceAfter  Float
  reference     String? // PO, MO, WO reference
  reason        String
  operatorId    String
  timestamp     DateTime          @default(now())

  // Relationships
  stockItem StockItem @relation(fields: [stockItemId], references: [id], onDelete: Cascade)
  operator  User      @relation(fields: [operatorId], references: [id])

  @@map("stock_movements")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  INVENTORY
}

enum OrderStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  DELAYED
  CANCELLED
}

enum WorkOrderStatus {
  PENDING
  STARTED
  PAUSED
  COMPLETED
  CANCELLED
}

enum WorkCenterStatus {
  RUNNING
  IDLE
  MAINTENANCE
  OFFLINE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum BomStatus {
  DRAFT
  ACTIVE
  OBSOLETE
}

enum StockMovementType {
  IN
  OUT
  RETURN
  ADJUSTMENT
}
