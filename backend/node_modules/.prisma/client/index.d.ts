
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Certification
 * 
 */
export type Certification = $Result.DefaultSelection<Prisma.$CertificationPayload>
/**
 * Model UserActivity
 * 
 */
export type UserActivity = $Result.DefaultSelection<Prisma.$UserActivityPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model BillOfMaterials
 * 
 */
export type BillOfMaterials = $Result.DefaultSelection<Prisma.$BillOfMaterialsPayload>
/**
 * Model BomItem
 * 
 */
export type BomItem = $Result.DefaultSelection<Prisma.$BomItemPayload>
/**
 * Model ManufacturingOrder
 * 
 */
export type ManufacturingOrder = $Result.DefaultSelection<Prisma.$ManufacturingOrderPayload>
/**
 * Model WorkCenter
 * 
 */
export type WorkCenter = $Result.DefaultSelection<Prisma.$WorkCenterPayload>
/**
 * Model WorkOrder
 * 
 */
export type WorkOrder = $Result.DefaultSelection<Prisma.$WorkOrderPayload>
/**
 * Model StockItem
 * 
 */
export type StockItem = $Result.DefaultSelection<Prisma.$StockItemPayload>
/**
 * Model StockMovement
 * 
 */
export type StockMovement = $Result.DefaultSelection<Prisma.$StockMovementPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  OPERATOR: 'OPERATOR',
  INVENTORY: 'INVENTORY'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const BomStatus: {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  OBSOLETE: 'OBSOLETE'
};

export type BomStatus = (typeof BomStatus)[keyof typeof BomStatus]


export const OrderStatus: {
  PLANNED: 'PLANNED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  DELAYED: 'DELAYED',
  CANCELLED: 'CANCELLED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


export const Priority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type Priority = (typeof Priority)[keyof typeof Priority]


export const WorkCenterStatus: {
  RUNNING: 'RUNNING',
  IDLE: 'IDLE',
  MAINTENANCE: 'MAINTENANCE',
  OFFLINE: 'OFFLINE'
};

export type WorkCenterStatus = (typeof WorkCenterStatus)[keyof typeof WorkCenterStatus]


export const WorkOrderStatus: {
  PENDING: 'PENDING',
  STARTED: 'STARTED',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type WorkOrderStatus = (typeof WorkOrderStatus)[keyof typeof WorkOrderStatus]


export const StockMovementType: {
  IN: 'IN',
  OUT: 'OUT',
  RETURN: 'RETURN',
  ADJUSTMENT: 'ADJUSTMENT'
};

export type StockMovementType = (typeof StockMovementType)[keyof typeof StockMovementType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type BomStatus = $Enums.BomStatus

export const BomStatus: typeof $Enums.BomStatus

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

export type Priority = $Enums.Priority

export const Priority: typeof $Enums.Priority

export type WorkCenterStatus = $Enums.WorkCenterStatus

export const WorkCenterStatus: typeof $Enums.WorkCenterStatus

export type WorkOrderStatus = $Enums.WorkOrderStatus

export const WorkOrderStatus: typeof $Enums.WorkOrderStatus

export type StockMovementType = $Enums.StockMovementType

export const StockMovementType: typeof $Enums.StockMovementType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.certification`: Exposes CRUD operations for the **Certification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Certifications
    * const certifications = await prisma.certification.findMany()
    * ```
    */
  get certification(): Prisma.CertificationDelegate<ExtArgs>;

  /**
   * `prisma.userActivity`: Exposes CRUD operations for the **UserActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserActivities
    * const userActivities = await prisma.userActivity.findMany()
    * ```
    */
  get userActivity(): Prisma.UserActivityDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.billOfMaterials`: Exposes CRUD operations for the **BillOfMaterials** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BillOfMaterials
    * const billOfMaterials = await prisma.billOfMaterials.findMany()
    * ```
    */
  get billOfMaterials(): Prisma.BillOfMaterialsDelegate<ExtArgs>;

  /**
   * `prisma.bomItem`: Exposes CRUD operations for the **BomItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BomItems
    * const bomItems = await prisma.bomItem.findMany()
    * ```
    */
  get bomItem(): Prisma.BomItemDelegate<ExtArgs>;

  /**
   * `prisma.manufacturingOrder`: Exposes CRUD operations for the **ManufacturingOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ManufacturingOrders
    * const manufacturingOrders = await prisma.manufacturingOrder.findMany()
    * ```
    */
  get manufacturingOrder(): Prisma.ManufacturingOrderDelegate<ExtArgs>;

  /**
   * `prisma.workCenter`: Exposes CRUD operations for the **WorkCenter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkCenters
    * const workCenters = await prisma.workCenter.findMany()
    * ```
    */
  get workCenter(): Prisma.WorkCenterDelegate<ExtArgs>;

  /**
   * `prisma.workOrder`: Exposes CRUD operations for the **WorkOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkOrders
    * const workOrders = await prisma.workOrder.findMany()
    * ```
    */
  get workOrder(): Prisma.WorkOrderDelegate<ExtArgs>;

  /**
   * `prisma.stockItem`: Exposes CRUD operations for the **StockItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StockItems
    * const stockItems = await prisma.stockItem.findMany()
    * ```
    */
  get stockItem(): Prisma.StockItemDelegate<ExtArgs>;

  /**
   * `prisma.stockMovement`: Exposes CRUD operations for the **StockMovement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StockMovements
    * const stockMovements = await prisma.stockMovement.findMany()
    * ```
    */
  get stockMovement(): Prisma.StockMovementDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Certification: 'Certification',
    UserActivity: 'UserActivity',
    Product: 'Product',
    BillOfMaterials: 'BillOfMaterials',
    BomItem: 'BomItem',
    ManufacturingOrder: 'ManufacturingOrder',
    WorkCenter: 'WorkCenter',
    WorkOrder: 'WorkOrder',
    StockItem: 'StockItem',
    StockMovement: 'StockMovement'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "certification" | "userActivity" | "product" | "billOfMaterials" | "bomItem" | "manufacturingOrder" | "workCenter" | "workOrder" | "stockItem" | "stockMovement"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Certification: {
        payload: Prisma.$CertificationPayload<ExtArgs>
        fields: Prisma.CertificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CertificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CertificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificationPayload>
          }
          findFirst: {
            args: Prisma.CertificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CertificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificationPayload>
          }
          findMany: {
            args: Prisma.CertificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificationPayload>[]
          }
          create: {
            args: Prisma.CertificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificationPayload>
          }
          createMany: {
            args: Prisma.CertificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CertificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificationPayload>[]
          }
          delete: {
            args: Prisma.CertificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificationPayload>
          }
          update: {
            args: Prisma.CertificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificationPayload>
          }
          deleteMany: {
            args: Prisma.CertificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CertificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CertificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificationPayload>
          }
          aggregate: {
            args: Prisma.CertificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCertification>
          }
          groupBy: {
            args: Prisma.CertificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<CertificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.CertificationCountArgs<ExtArgs>
            result: $Utils.Optional<CertificationCountAggregateOutputType> | number
          }
        }
      }
      UserActivity: {
        payload: Prisma.$UserActivityPayload<ExtArgs>
        fields: Prisma.UserActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          findFirst: {
            args: Prisma.UserActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          findMany: {
            args: Prisma.UserActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>[]
          }
          create: {
            args: Prisma.UserActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          createMany: {
            args: Prisma.UserActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>[]
          }
          delete: {
            args: Prisma.UserActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          update: {
            args: Prisma.UserActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          deleteMany: {
            args: Prisma.UserActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          aggregate: {
            args: Prisma.UserActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserActivity>
          }
          groupBy: {
            args: Prisma.UserActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserActivityCountArgs<ExtArgs>
            result: $Utils.Optional<UserActivityCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      BillOfMaterials: {
        payload: Prisma.$BillOfMaterialsPayload<ExtArgs>
        fields: Prisma.BillOfMaterialsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BillOfMaterialsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillOfMaterialsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BillOfMaterialsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillOfMaterialsPayload>
          }
          findFirst: {
            args: Prisma.BillOfMaterialsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillOfMaterialsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BillOfMaterialsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillOfMaterialsPayload>
          }
          findMany: {
            args: Prisma.BillOfMaterialsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillOfMaterialsPayload>[]
          }
          create: {
            args: Prisma.BillOfMaterialsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillOfMaterialsPayload>
          }
          createMany: {
            args: Prisma.BillOfMaterialsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BillOfMaterialsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillOfMaterialsPayload>[]
          }
          delete: {
            args: Prisma.BillOfMaterialsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillOfMaterialsPayload>
          }
          update: {
            args: Prisma.BillOfMaterialsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillOfMaterialsPayload>
          }
          deleteMany: {
            args: Prisma.BillOfMaterialsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BillOfMaterialsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BillOfMaterialsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillOfMaterialsPayload>
          }
          aggregate: {
            args: Prisma.BillOfMaterialsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBillOfMaterials>
          }
          groupBy: {
            args: Prisma.BillOfMaterialsGroupByArgs<ExtArgs>
            result: $Utils.Optional<BillOfMaterialsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BillOfMaterialsCountArgs<ExtArgs>
            result: $Utils.Optional<BillOfMaterialsCountAggregateOutputType> | number
          }
        }
      }
      BomItem: {
        payload: Prisma.$BomItemPayload<ExtArgs>
        fields: Prisma.BomItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BomItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BomItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>
          }
          findFirst: {
            args: Prisma.BomItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BomItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>
          }
          findMany: {
            args: Prisma.BomItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>[]
          }
          create: {
            args: Prisma.BomItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>
          }
          createMany: {
            args: Prisma.BomItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BomItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>[]
          }
          delete: {
            args: Prisma.BomItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>
          }
          update: {
            args: Prisma.BomItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>
          }
          deleteMany: {
            args: Prisma.BomItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BomItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BomItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BomItemPayload>
          }
          aggregate: {
            args: Prisma.BomItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBomItem>
          }
          groupBy: {
            args: Prisma.BomItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<BomItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.BomItemCountArgs<ExtArgs>
            result: $Utils.Optional<BomItemCountAggregateOutputType> | number
          }
        }
      }
      ManufacturingOrder: {
        payload: Prisma.$ManufacturingOrderPayload<ExtArgs>
        fields: Prisma.ManufacturingOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ManufacturingOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturingOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ManufacturingOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturingOrderPayload>
          }
          findFirst: {
            args: Prisma.ManufacturingOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturingOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ManufacturingOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturingOrderPayload>
          }
          findMany: {
            args: Prisma.ManufacturingOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturingOrderPayload>[]
          }
          create: {
            args: Prisma.ManufacturingOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturingOrderPayload>
          }
          createMany: {
            args: Prisma.ManufacturingOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ManufacturingOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturingOrderPayload>[]
          }
          delete: {
            args: Prisma.ManufacturingOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturingOrderPayload>
          }
          update: {
            args: Prisma.ManufacturingOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturingOrderPayload>
          }
          deleteMany: {
            args: Prisma.ManufacturingOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ManufacturingOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ManufacturingOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturingOrderPayload>
          }
          aggregate: {
            args: Prisma.ManufacturingOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateManufacturingOrder>
          }
          groupBy: {
            args: Prisma.ManufacturingOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<ManufacturingOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.ManufacturingOrderCountArgs<ExtArgs>
            result: $Utils.Optional<ManufacturingOrderCountAggregateOutputType> | number
          }
        }
      }
      WorkCenter: {
        payload: Prisma.$WorkCenterPayload<ExtArgs>
        fields: Prisma.WorkCenterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkCenterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkCenterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>
          }
          findFirst: {
            args: Prisma.WorkCenterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkCenterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>
          }
          findMany: {
            args: Prisma.WorkCenterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>[]
          }
          create: {
            args: Prisma.WorkCenterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>
          }
          createMany: {
            args: Prisma.WorkCenterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkCenterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>[]
          }
          delete: {
            args: Prisma.WorkCenterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>
          }
          update: {
            args: Prisma.WorkCenterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>
          }
          deleteMany: {
            args: Prisma.WorkCenterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkCenterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkCenterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>
          }
          aggregate: {
            args: Prisma.WorkCenterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkCenter>
          }
          groupBy: {
            args: Prisma.WorkCenterGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkCenterGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkCenterCountArgs<ExtArgs>
            result: $Utils.Optional<WorkCenterCountAggregateOutputType> | number
          }
        }
      }
      WorkOrder: {
        payload: Prisma.$WorkOrderPayload<ExtArgs>
        fields: Prisma.WorkOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          findFirst: {
            args: Prisma.WorkOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          findMany: {
            args: Prisma.WorkOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>[]
          }
          create: {
            args: Prisma.WorkOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          createMany: {
            args: Prisma.WorkOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>[]
          }
          delete: {
            args: Prisma.WorkOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          update: {
            args: Prisma.WorkOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          deleteMany: {
            args: Prisma.WorkOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          aggregate: {
            args: Prisma.WorkOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkOrder>
          }
          groupBy: {
            args: Prisma.WorkOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkOrderCountArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderCountAggregateOutputType> | number
          }
        }
      }
      StockItem: {
        payload: Prisma.$StockItemPayload<ExtArgs>
        fields: Prisma.StockItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StockItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StockItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockItemPayload>
          }
          findFirst: {
            args: Prisma.StockItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StockItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockItemPayload>
          }
          findMany: {
            args: Prisma.StockItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockItemPayload>[]
          }
          create: {
            args: Prisma.StockItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockItemPayload>
          }
          createMany: {
            args: Prisma.StockItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StockItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockItemPayload>[]
          }
          delete: {
            args: Prisma.StockItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockItemPayload>
          }
          update: {
            args: Prisma.StockItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockItemPayload>
          }
          deleteMany: {
            args: Prisma.StockItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StockItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StockItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockItemPayload>
          }
          aggregate: {
            args: Prisma.StockItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStockItem>
          }
          groupBy: {
            args: Prisma.StockItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<StockItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.StockItemCountArgs<ExtArgs>
            result: $Utils.Optional<StockItemCountAggregateOutputType> | number
          }
        }
      }
      StockMovement: {
        payload: Prisma.$StockMovementPayload<ExtArgs>
        fields: Prisma.StockMovementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StockMovementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StockMovementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>
          }
          findFirst: {
            args: Prisma.StockMovementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StockMovementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>
          }
          findMany: {
            args: Prisma.StockMovementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>[]
          }
          create: {
            args: Prisma.StockMovementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>
          }
          createMany: {
            args: Prisma.StockMovementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StockMovementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>[]
          }
          delete: {
            args: Prisma.StockMovementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>
          }
          update: {
            args: Prisma.StockMovementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>
          }
          deleteMany: {
            args: Prisma.StockMovementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StockMovementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StockMovementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockMovementPayload>
          }
          aggregate: {
            args: Prisma.StockMovementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStockMovement>
          }
          groupBy: {
            args: Prisma.StockMovementGroupByArgs<ExtArgs>
            result: $Utils.Optional<StockMovementGroupByOutputType>[]
          }
          count: {
            args: Prisma.StockMovementCountArgs<ExtArgs>
            result: $Utils.Optional<StockMovementCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    manufacturingOrders: number
    workOrders: number
    stockMovements: number
    certifications: number
    activities: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manufacturingOrders?: boolean | UserCountOutputTypeCountManufacturingOrdersArgs
    workOrders?: boolean | UserCountOutputTypeCountWorkOrdersArgs
    stockMovements?: boolean | UserCountOutputTypeCountStockMovementsArgs
    certifications?: boolean | UserCountOutputTypeCountCertificationsArgs
    activities?: boolean | UserCountOutputTypeCountActivitiesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountManufacturingOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManufacturingOrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStockMovementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockMovementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCertificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserActivityWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    manufacturingOrders: number
    billsOfMaterials: number
    bomComponents: number
    stockItems: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manufacturingOrders?: boolean | ProductCountOutputTypeCountManufacturingOrdersArgs
    billsOfMaterials?: boolean | ProductCountOutputTypeCountBillsOfMaterialsArgs
    bomComponents?: boolean | ProductCountOutputTypeCountBomComponentsArgs
    stockItems?: boolean | ProductCountOutputTypeCountStockItemsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountManufacturingOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManufacturingOrderWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountBillsOfMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillOfMaterialsWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountBomComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BomItemWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountStockItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockItemWhereInput
  }


  /**
   * Count Type BillOfMaterialsCountOutputType
   */

  export type BillOfMaterialsCountOutputType = {
    items: number
  }

  export type BillOfMaterialsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | BillOfMaterialsCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * BillOfMaterialsCountOutputType without action
   */
  export type BillOfMaterialsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillOfMaterialsCountOutputType
     */
    select?: BillOfMaterialsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BillOfMaterialsCountOutputType without action
   */
  export type BillOfMaterialsCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BomItemWhereInput
  }


  /**
   * Count Type ManufacturingOrderCountOutputType
   */

  export type ManufacturingOrderCountOutputType = {
    workOrders: number
  }

  export type ManufacturingOrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrders?: boolean | ManufacturingOrderCountOutputTypeCountWorkOrdersArgs
  }

  // Custom InputTypes
  /**
   * ManufacturingOrderCountOutputType without action
   */
  export type ManufacturingOrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturingOrderCountOutputType
     */
    select?: ManufacturingOrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ManufacturingOrderCountOutputType without action
   */
  export type ManufacturingOrderCountOutputTypeCountWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
  }


  /**
   * Count Type WorkCenterCountOutputType
   */

  export type WorkCenterCountOutputType = {
    workOrders: number
  }

  export type WorkCenterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrders?: boolean | WorkCenterCountOutputTypeCountWorkOrdersArgs
  }

  // Custom InputTypes
  /**
   * WorkCenterCountOutputType without action
   */
  export type WorkCenterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenterCountOutputType
     */
    select?: WorkCenterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkCenterCountOutputType without action
   */
  export type WorkCenterCountOutputTypeCountWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
  }


  /**
   * Count Type StockItemCountOutputType
   */

  export type StockItemCountOutputType = {
    movements: number
  }

  export type StockItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movements?: boolean | StockItemCountOutputTypeCountMovementsArgs
  }

  // Custom InputTypes
  /**
   * StockItemCountOutputType without action
   */
  export type StockItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockItemCountOutputType
     */
    select?: StockItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StockItemCountOutputType without action
   */
  export type StockItemCountOutputTypeCountMovementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockMovementWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    position: string | null
    department: string | null
    location: string | null
    avatar: string | null
    bio: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    joinDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    position: string | null
    department: string | null
    location: string | null
    avatar: string | null
    bio: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    joinDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    phone: number
    position: number
    department: number
    location: number
    avatar: number
    bio: number
    skills: number
    role: number
    isActive: number
    joinDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    phone?: true
    position?: true
    department?: true
    location?: true
    avatar?: true
    bio?: true
    role?: true
    isActive?: true
    joinDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    phone?: true
    position?: true
    department?: true
    location?: true
    avatar?: true
    bio?: true
    role?: true
    isActive?: true
    joinDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    phone?: true
    position?: true
    department?: true
    location?: true
    avatar?: true
    bio?: true
    skills?: true
    role?: true
    isActive?: true
    joinDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone: string | null
    position: string
    department: string
    location: string | null
    avatar: string | null
    bio: string | null
    skills: string[]
    role: $Enums.UserRole
    isActive: boolean
    joinDate: Date
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    position?: boolean
    department?: boolean
    location?: boolean
    avatar?: boolean
    bio?: boolean
    skills?: boolean
    role?: boolean
    isActive?: boolean
    joinDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    manufacturingOrders?: boolean | User$manufacturingOrdersArgs<ExtArgs>
    workOrders?: boolean | User$workOrdersArgs<ExtArgs>
    stockMovements?: boolean | User$stockMovementsArgs<ExtArgs>
    certifications?: boolean | User$certificationsArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    position?: boolean
    department?: boolean
    location?: boolean
    avatar?: boolean
    bio?: boolean
    skills?: boolean
    role?: boolean
    isActive?: boolean
    joinDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    position?: boolean
    department?: boolean
    location?: boolean
    avatar?: boolean
    bio?: boolean
    skills?: boolean
    role?: boolean
    isActive?: boolean
    joinDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manufacturingOrders?: boolean | User$manufacturingOrdersArgs<ExtArgs>
    workOrders?: boolean | User$workOrdersArgs<ExtArgs>
    stockMovements?: boolean | User$stockMovementsArgs<ExtArgs>
    certifications?: boolean | User$certificationsArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      manufacturingOrders: Prisma.$ManufacturingOrderPayload<ExtArgs>[]
      workOrders: Prisma.$WorkOrderPayload<ExtArgs>[]
      stockMovements: Prisma.$StockMovementPayload<ExtArgs>[]
      certifications: Prisma.$CertificationPayload<ExtArgs>[]
      activities: Prisma.$UserActivityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      firstName: string
      lastName: string
      phone: string | null
      position: string
      department: string
      location: string | null
      avatar: string | null
      bio: string | null
      skills: string[]
      role: $Enums.UserRole
      isActive: boolean
      joinDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    manufacturingOrders<T extends User$manufacturingOrdersArgs<ExtArgs> = {}>(args?: Subset<T, User$manufacturingOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManufacturingOrderPayload<ExtArgs>, T, "findMany"> | Null>
    workOrders<T extends User$workOrdersArgs<ExtArgs> = {}>(args?: Subset<T, User$workOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany"> | Null>
    stockMovements<T extends User$stockMovementsArgs<ExtArgs> = {}>(args?: Subset<T, User$stockMovementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findMany"> | Null>
    certifications<T extends User$certificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$certificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "findMany"> | Null>
    activities<T extends User$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly position: FieldRef<"User", 'String'>
    readonly department: FieldRef<"User", 'String'>
    readonly location: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly skills: FieldRef<"User", 'String[]'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly joinDate: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.manufacturingOrders
   */
  export type User$manufacturingOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturingOrder
     */
    select?: ManufacturingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufacturingOrderInclude<ExtArgs> | null
    where?: ManufacturingOrderWhereInput
    orderBy?: ManufacturingOrderOrderByWithRelationInput | ManufacturingOrderOrderByWithRelationInput[]
    cursor?: ManufacturingOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ManufacturingOrderScalarFieldEnum | ManufacturingOrderScalarFieldEnum[]
  }

  /**
   * User.workOrders
   */
  export type User$workOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    cursor?: WorkOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * User.stockMovements
   */
  export type User$stockMovementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    where?: StockMovementWhereInput
    orderBy?: StockMovementOrderByWithRelationInput | StockMovementOrderByWithRelationInput[]
    cursor?: StockMovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockMovementScalarFieldEnum | StockMovementScalarFieldEnum[]
  }

  /**
   * User.certifications
   */
  export type User$certificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certification
     */
    select?: CertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificationInclude<ExtArgs> | null
    where?: CertificationWhereInput
    orderBy?: CertificationOrderByWithRelationInput | CertificationOrderByWithRelationInput[]
    cursor?: CertificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CertificationScalarFieldEnum | CertificationScalarFieldEnum[]
  }

  /**
   * User.activities
   */
  export type User$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    where?: UserActivityWhereInput
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    cursor?: UserActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Certification
   */

  export type AggregateCertification = {
    _count: CertificationCountAggregateOutputType | null
    _min: CertificationMinAggregateOutputType | null
    _max: CertificationMaxAggregateOutputType | null
  }

  export type CertificationMinAggregateOutputType = {
    id: string | null
    name: string | null
    issuer: string | null
    issueDate: Date | null
    expiryDate: Date | null
    isVerified: boolean | null
    userId: string | null
  }

  export type CertificationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    issuer: string | null
    issueDate: Date | null
    expiryDate: Date | null
    isVerified: boolean | null
    userId: string | null
  }

  export type CertificationCountAggregateOutputType = {
    id: number
    name: number
    issuer: number
    issueDate: number
    expiryDate: number
    isVerified: number
    userId: number
    _all: number
  }


  export type CertificationMinAggregateInputType = {
    id?: true
    name?: true
    issuer?: true
    issueDate?: true
    expiryDate?: true
    isVerified?: true
    userId?: true
  }

  export type CertificationMaxAggregateInputType = {
    id?: true
    name?: true
    issuer?: true
    issueDate?: true
    expiryDate?: true
    isVerified?: true
    userId?: true
  }

  export type CertificationCountAggregateInputType = {
    id?: true
    name?: true
    issuer?: true
    issueDate?: true
    expiryDate?: true
    isVerified?: true
    userId?: true
    _all?: true
  }

  export type CertificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Certification to aggregate.
     */
    where?: CertificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certifications to fetch.
     */
    orderBy?: CertificationOrderByWithRelationInput | CertificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CertificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Certifications
    **/
    _count?: true | CertificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CertificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CertificationMaxAggregateInputType
  }

  export type GetCertificationAggregateType<T extends CertificationAggregateArgs> = {
        [P in keyof T & keyof AggregateCertification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCertification[P]>
      : GetScalarType<T[P], AggregateCertification[P]>
  }




  export type CertificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificationWhereInput
    orderBy?: CertificationOrderByWithAggregationInput | CertificationOrderByWithAggregationInput[]
    by: CertificationScalarFieldEnum[] | CertificationScalarFieldEnum
    having?: CertificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CertificationCountAggregateInputType | true
    _min?: CertificationMinAggregateInputType
    _max?: CertificationMaxAggregateInputType
  }

  export type CertificationGroupByOutputType = {
    id: string
    name: string
    issuer: string
    issueDate: Date
    expiryDate: Date | null
    isVerified: boolean
    userId: string
    _count: CertificationCountAggregateOutputType | null
    _min: CertificationMinAggregateOutputType | null
    _max: CertificationMaxAggregateOutputType | null
  }

  type GetCertificationGroupByPayload<T extends CertificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CertificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CertificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CertificationGroupByOutputType[P]>
            : GetScalarType<T[P], CertificationGroupByOutputType[P]>
        }
      >
    >


  export type CertificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    issuer?: boolean
    issueDate?: boolean
    expiryDate?: boolean
    isVerified?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certification"]>

  export type CertificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    issuer?: boolean
    issueDate?: boolean
    expiryDate?: boolean
    isVerified?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certification"]>

  export type CertificationSelectScalar = {
    id?: boolean
    name?: boolean
    issuer?: boolean
    issueDate?: boolean
    expiryDate?: boolean
    isVerified?: boolean
    userId?: boolean
  }

  export type CertificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CertificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CertificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Certification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      issuer: string
      issueDate: Date
      expiryDate: Date | null
      isVerified: boolean
      userId: string
    }, ExtArgs["result"]["certification"]>
    composites: {}
  }

  type CertificationGetPayload<S extends boolean | null | undefined | CertificationDefaultArgs> = $Result.GetResult<Prisma.$CertificationPayload, S>

  type CertificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CertificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CertificationCountAggregateInputType | true
    }

  export interface CertificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Certification'], meta: { name: 'Certification' } }
    /**
     * Find zero or one Certification that matches the filter.
     * @param {CertificationFindUniqueArgs} args - Arguments to find a Certification
     * @example
     * // Get one Certification
     * const certification = await prisma.certification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CertificationFindUniqueArgs>(args: SelectSubset<T, CertificationFindUniqueArgs<ExtArgs>>): Prisma__CertificationClient<$Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Certification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CertificationFindUniqueOrThrowArgs} args - Arguments to find a Certification
     * @example
     * // Get one Certification
     * const certification = await prisma.certification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CertificationFindUniqueOrThrowArgs>(args: SelectSubset<T, CertificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CertificationClient<$Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Certification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificationFindFirstArgs} args - Arguments to find a Certification
     * @example
     * // Get one Certification
     * const certification = await prisma.certification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CertificationFindFirstArgs>(args?: SelectSubset<T, CertificationFindFirstArgs<ExtArgs>>): Prisma__CertificationClient<$Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Certification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificationFindFirstOrThrowArgs} args - Arguments to find a Certification
     * @example
     * // Get one Certification
     * const certification = await prisma.certification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CertificationFindFirstOrThrowArgs>(args?: SelectSubset<T, CertificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__CertificationClient<$Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Certifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Certifications
     * const certifications = await prisma.certification.findMany()
     * 
     * // Get first 10 Certifications
     * const certifications = await prisma.certification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const certificationWithIdOnly = await prisma.certification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CertificationFindManyArgs>(args?: SelectSubset<T, CertificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Certification.
     * @param {CertificationCreateArgs} args - Arguments to create a Certification.
     * @example
     * // Create one Certification
     * const Certification = await prisma.certification.create({
     *   data: {
     *     // ... data to create a Certification
     *   }
     * })
     * 
     */
    create<T extends CertificationCreateArgs>(args: SelectSubset<T, CertificationCreateArgs<ExtArgs>>): Prisma__CertificationClient<$Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Certifications.
     * @param {CertificationCreateManyArgs} args - Arguments to create many Certifications.
     * @example
     * // Create many Certifications
     * const certification = await prisma.certification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CertificationCreateManyArgs>(args?: SelectSubset<T, CertificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Certifications and returns the data saved in the database.
     * @param {CertificationCreateManyAndReturnArgs} args - Arguments to create many Certifications.
     * @example
     * // Create many Certifications
     * const certification = await prisma.certification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Certifications and only return the `id`
     * const certificationWithIdOnly = await prisma.certification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CertificationCreateManyAndReturnArgs>(args?: SelectSubset<T, CertificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Certification.
     * @param {CertificationDeleteArgs} args - Arguments to delete one Certification.
     * @example
     * // Delete one Certification
     * const Certification = await prisma.certification.delete({
     *   where: {
     *     // ... filter to delete one Certification
     *   }
     * })
     * 
     */
    delete<T extends CertificationDeleteArgs>(args: SelectSubset<T, CertificationDeleteArgs<ExtArgs>>): Prisma__CertificationClient<$Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Certification.
     * @param {CertificationUpdateArgs} args - Arguments to update one Certification.
     * @example
     * // Update one Certification
     * const certification = await prisma.certification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CertificationUpdateArgs>(args: SelectSubset<T, CertificationUpdateArgs<ExtArgs>>): Prisma__CertificationClient<$Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Certifications.
     * @param {CertificationDeleteManyArgs} args - Arguments to filter Certifications to delete.
     * @example
     * // Delete a few Certifications
     * const { count } = await prisma.certification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CertificationDeleteManyArgs>(args?: SelectSubset<T, CertificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Certifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Certifications
     * const certification = await prisma.certification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CertificationUpdateManyArgs>(args: SelectSubset<T, CertificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Certification.
     * @param {CertificationUpsertArgs} args - Arguments to update or create a Certification.
     * @example
     * // Update or create a Certification
     * const certification = await prisma.certification.upsert({
     *   create: {
     *     // ... data to create a Certification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Certification we want to update
     *   }
     * })
     */
    upsert<T extends CertificationUpsertArgs>(args: SelectSubset<T, CertificationUpsertArgs<ExtArgs>>): Prisma__CertificationClient<$Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Certifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificationCountArgs} args - Arguments to filter Certifications to count.
     * @example
     * // Count the number of Certifications
     * const count = await prisma.certification.count({
     *   where: {
     *     // ... the filter for the Certifications we want to count
     *   }
     * })
    **/
    count<T extends CertificationCountArgs>(
      args?: Subset<T, CertificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CertificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Certification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CertificationAggregateArgs>(args: Subset<T, CertificationAggregateArgs>): Prisma.PrismaPromise<GetCertificationAggregateType<T>>

    /**
     * Group by Certification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CertificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CertificationGroupByArgs['orderBy'] }
        : { orderBy?: CertificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CertificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Certification model
   */
  readonly fields: CertificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Certification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CertificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Certification model
   */ 
  interface CertificationFieldRefs {
    readonly id: FieldRef<"Certification", 'String'>
    readonly name: FieldRef<"Certification", 'String'>
    readonly issuer: FieldRef<"Certification", 'String'>
    readonly issueDate: FieldRef<"Certification", 'DateTime'>
    readonly expiryDate: FieldRef<"Certification", 'DateTime'>
    readonly isVerified: FieldRef<"Certification", 'Boolean'>
    readonly userId: FieldRef<"Certification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Certification findUnique
   */
  export type CertificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certification
     */
    select?: CertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificationInclude<ExtArgs> | null
    /**
     * Filter, which Certification to fetch.
     */
    where: CertificationWhereUniqueInput
  }

  /**
   * Certification findUniqueOrThrow
   */
  export type CertificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certification
     */
    select?: CertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificationInclude<ExtArgs> | null
    /**
     * Filter, which Certification to fetch.
     */
    where: CertificationWhereUniqueInput
  }

  /**
   * Certification findFirst
   */
  export type CertificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certification
     */
    select?: CertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificationInclude<ExtArgs> | null
    /**
     * Filter, which Certification to fetch.
     */
    where?: CertificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certifications to fetch.
     */
    orderBy?: CertificationOrderByWithRelationInput | CertificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certifications.
     */
    cursor?: CertificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certifications.
     */
    distinct?: CertificationScalarFieldEnum | CertificationScalarFieldEnum[]
  }

  /**
   * Certification findFirstOrThrow
   */
  export type CertificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certification
     */
    select?: CertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificationInclude<ExtArgs> | null
    /**
     * Filter, which Certification to fetch.
     */
    where?: CertificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certifications to fetch.
     */
    orderBy?: CertificationOrderByWithRelationInput | CertificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certifications.
     */
    cursor?: CertificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certifications.
     */
    distinct?: CertificationScalarFieldEnum | CertificationScalarFieldEnum[]
  }

  /**
   * Certification findMany
   */
  export type CertificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certification
     */
    select?: CertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificationInclude<ExtArgs> | null
    /**
     * Filter, which Certifications to fetch.
     */
    where?: CertificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certifications to fetch.
     */
    orderBy?: CertificationOrderByWithRelationInput | CertificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Certifications.
     */
    cursor?: CertificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certifications.
     */
    skip?: number
    distinct?: CertificationScalarFieldEnum | CertificationScalarFieldEnum[]
  }

  /**
   * Certification create
   */
  export type CertificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certification
     */
    select?: CertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Certification.
     */
    data: XOR<CertificationCreateInput, CertificationUncheckedCreateInput>
  }

  /**
   * Certification createMany
   */
  export type CertificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Certifications.
     */
    data: CertificationCreateManyInput | CertificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Certification createManyAndReturn
   */
  export type CertificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certification
     */
    select?: CertificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Certifications.
     */
    data: CertificationCreateManyInput | CertificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Certification update
   */
  export type CertificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certification
     */
    select?: CertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Certification.
     */
    data: XOR<CertificationUpdateInput, CertificationUncheckedUpdateInput>
    /**
     * Choose, which Certification to update.
     */
    where: CertificationWhereUniqueInput
  }

  /**
   * Certification updateMany
   */
  export type CertificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Certifications.
     */
    data: XOR<CertificationUpdateManyMutationInput, CertificationUncheckedUpdateManyInput>
    /**
     * Filter which Certifications to update
     */
    where?: CertificationWhereInput
  }

  /**
   * Certification upsert
   */
  export type CertificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certification
     */
    select?: CertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Certification to update in case it exists.
     */
    where: CertificationWhereUniqueInput
    /**
     * In case the Certification found by the `where` argument doesn't exist, create a new Certification with this data.
     */
    create: XOR<CertificationCreateInput, CertificationUncheckedCreateInput>
    /**
     * In case the Certification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CertificationUpdateInput, CertificationUncheckedUpdateInput>
  }

  /**
   * Certification delete
   */
  export type CertificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certification
     */
    select?: CertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificationInclude<ExtArgs> | null
    /**
     * Filter which Certification to delete.
     */
    where: CertificationWhereUniqueInput
  }

  /**
   * Certification deleteMany
   */
  export type CertificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Certifications to delete
     */
    where?: CertificationWhereInput
  }

  /**
   * Certification without action
   */
  export type CertificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certification
     */
    select?: CertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificationInclude<ExtArgs> | null
  }


  /**
   * Model UserActivity
   */

  export type AggregateUserActivity = {
    _count: UserActivityCountAggregateOutputType | null
    _min: UserActivityMinAggregateOutputType | null
    _max: UserActivityMaxAggregateOutputType | null
  }

  export type UserActivityMinAggregateOutputType = {
    id: string | null
    type: string | null
    description: string | null
    timestamp: Date | null
    userId: string | null
  }

  export type UserActivityMaxAggregateOutputType = {
    id: string | null
    type: string | null
    description: string | null
    timestamp: Date | null
    userId: string | null
  }

  export type UserActivityCountAggregateOutputType = {
    id: number
    type: number
    description: number
    metadata: number
    timestamp: number
    userId: number
    _all: number
  }


  export type UserActivityMinAggregateInputType = {
    id?: true
    type?: true
    description?: true
    timestamp?: true
    userId?: true
  }

  export type UserActivityMaxAggregateInputType = {
    id?: true
    type?: true
    description?: true
    timestamp?: true
    userId?: true
  }

  export type UserActivityCountAggregateInputType = {
    id?: true
    type?: true
    description?: true
    metadata?: true
    timestamp?: true
    userId?: true
    _all?: true
  }

  export type UserActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserActivity to aggregate.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserActivities
    **/
    _count?: true | UserActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserActivityMaxAggregateInputType
  }

  export type GetUserActivityAggregateType<T extends UserActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateUserActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserActivity[P]>
      : GetScalarType<T[P], AggregateUserActivity[P]>
  }




  export type UserActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserActivityWhereInput
    orderBy?: UserActivityOrderByWithAggregationInput | UserActivityOrderByWithAggregationInput[]
    by: UserActivityScalarFieldEnum[] | UserActivityScalarFieldEnum
    having?: UserActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserActivityCountAggregateInputType | true
    _min?: UserActivityMinAggregateInputType
    _max?: UserActivityMaxAggregateInputType
  }

  export type UserActivityGroupByOutputType = {
    id: string
    type: string
    description: string
    metadata: JsonValue | null
    timestamp: Date
    userId: string
    _count: UserActivityCountAggregateOutputType | null
    _min: UserActivityMinAggregateOutputType | null
    _max: UserActivityMaxAggregateOutputType | null
  }

  type GetUserActivityGroupByPayload<T extends UserActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserActivityGroupByOutputType[P]>
            : GetScalarType<T[P], UserActivityGroupByOutputType[P]>
        }
      >
    >


  export type UserActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    description?: boolean
    metadata?: boolean
    timestamp?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userActivity"]>

  export type UserActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    description?: boolean
    metadata?: boolean
    timestamp?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userActivity"]>

  export type UserActivitySelectScalar = {
    id?: boolean
    type?: boolean
    description?: boolean
    metadata?: boolean
    timestamp?: boolean
    userId?: boolean
  }

  export type UserActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserActivity"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      description: string
      metadata: Prisma.JsonValue | null
      timestamp: Date
      userId: string
    }, ExtArgs["result"]["userActivity"]>
    composites: {}
  }

  type UserActivityGetPayload<S extends boolean | null | undefined | UserActivityDefaultArgs> = $Result.GetResult<Prisma.$UserActivityPayload, S>

  type UserActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserActivityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserActivityCountAggregateInputType | true
    }

  export interface UserActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserActivity'], meta: { name: 'UserActivity' } }
    /**
     * Find zero or one UserActivity that matches the filter.
     * @param {UserActivityFindUniqueArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserActivityFindUniqueArgs>(args: SelectSubset<T, UserActivityFindUniqueArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserActivity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserActivityFindUniqueOrThrowArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, UserActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindFirstArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserActivityFindFirstArgs>(args?: SelectSubset<T, UserActivityFindFirstArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindFirstOrThrowArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, UserActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserActivities
     * const userActivities = await prisma.userActivity.findMany()
     * 
     * // Get first 10 UserActivities
     * const userActivities = await prisma.userActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userActivityWithIdOnly = await prisma.userActivity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserActivityFindManyArgs>(args?: SelectSubset<T, UserActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserActivity.
     * @param {UserActivityCreateArgs} args - Arguments to create a UserActivity.
     * @example
     * // Create one UserActivity
     * const UserActivity = await prisma.userActivity.create({
     *   data: {
     *     // ... data to create a UserActivity
     *   }
     * })
     * 
     */
    create<T extends UserActivityCreateArgs>(args: SelectSubset<T, UserActivityCreateArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserActivities.
     * @param {UserActivityCreateManyArgs} args - Arguments to create many UserActivities.
     * @example
     * // Create many UserActivities
     * const userActivity = await prisma.userActivity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserActivityCreateManyArgs>(args?: SelectSubset<T, UserActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserActivities and returns the data saved in the database.
     * @param {UserActivityCreateManyAndReturnArgs} args - Arguments to create many UserActivities.
     * @example
     * // Create many UserActivities
     * const userActivity = await prisma.userActivity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserActivities and only return the `id`
     * const userActivityWithIdOnly = await prisma.userActivity.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, UserActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserActivity.
     * @param {UserActivityDeleteArgs} args - Arguments to delete one UserActivity.
     * @example
     * // Delete one UserActivity
     * const UserActivity = await prisma.userActivity.delete({
     *   where: {
     *     // ... filter to delete one UserActivity
     *   }
     * })
     * 
     */
    delete<T extends UserActivityDeleteArgs>(args: SelectSubset<T, UserActivityDeleteArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserActivity.
     * @param {UserActivityUpdateArgs} args - Arguments to update one UserActivity.
     * @example
     * // Update one UserActivity
     * const userActivity = await prisma.userActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserActivityUpdateArgs>(args: SelectSubset<T, UserActivityUpdateArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserActivities.
     * @param {UserActivityDeleteManyArgs} args - Arguments to filter UserActivities to delete.
     * @example
     * // Delete a few UserActivities
     * const { count } = await prisma.userActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserActivityDeleteManyArgs>(args?: SelectSubset<T, UserActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserActivities
     * const userActivity = await prisma.userActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserActivityUpdateManyArgs>(args: SelectSubset<T, UserActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserActivity.
     * @param {UserActivityUpsertArgs} args - Arguments to update or create a UserActivity.
     * @example
     * // Update or create a UserActivity
     * const userActivity = await prisma.userActivity.upsert({
     *   create: {
     *     // ... data to create a UserActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserActivity we want to update
     *   }
     * })
     */
    upsert<T extends UserActivityUpsertArgs>(args: SelectSubset<T, UserActivityUpsertArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityCountArgs} args - Arguments to filter UserActivities to count.
     * @example
     * // Count the number of UserActivities
     * const count = await prisma.userActivity.count({
     *   where: {
     *     // ... the filter for the UserActivities we want to count
     *   }
     * })
    **/
    count<T extends UserActivityCountArgs>(
      args?: Subset<T, UserActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserActivityAggregateArgs>(args: Subset<T, UserActivityAggregateArgs>): Prisma.PrismaPromise<GetUserActivityAggregateType<T>>

    /**
     * Group by UserActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserActivityGroupByArgs['orderBy'] }
        : { orderBy?: UserActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserActivity model
   */
  readonly fields: UserActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserActivity model
   */ 
  interface UserActivityFieldRefs {
    readonly id: FieldRef<"UserActivity", 'String'>
    readonly type: FieldRef<"UserActivity", 'String'>
    readonly description: FieldRef<"UserActivity", 'String'>
    readonly metadata: FieldRef<"UserActivity", 'Json'>
    readonly timestamp: FieldRef<"UserActivity", 'DateTime'>
    readonly userId: FieldRef<"UserActivity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserActivity findUnique
   */
  export type UserActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity findUniqueOrThrow
   */
  export type UserActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity findFirst
   */
  export type UserActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserActivities.
     */
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity findFirstOrThrow
   */
  export type UserActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserActivities.
     */
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity findMany
   */
  export type UserActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivities to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity create
   */
  export type UserActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a UserActivity.
     */
    data: XOR<UserActivityCreateInput, UserActivityUncheckedCreateInput>
  }

  /**
   * UserActivity createMany
   */
  export type UserActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserActivities.
     */
    data: UserActivityCreateManyInput | UserActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserActivity createManyAndReturn
   */
  export type UserActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserActivities.
     */
    data: UserActivityCreateManyInput | UserActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserActivity update
   */
  export type UserActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a UserActivity.
     */
    data: XOR<UserActivityUpdateInput, UserActivityUncheckedUpdateInput>
    /**
     * Choose, which UserActivity to update.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity updateMany
   */
  export type UserActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserActivities.
     */
    data: XOR<UserActivityUpdateManyMutationInput, UserActivityUncheckedUpdateManyInput>
    /**
     * Filter which UserActivities to update
     */
    where?: UserActivityWhereInput
  }

  /**
   * UserActivity upsert
   */
  export type UserActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the UserActivity to update in case it exists.
     */
    where: UserActivityWhereUniqueInput
    /**
     * In case the UserActivity found by the `where` argument doesn't exist, create a new UserActivity with this data.
     */
    create: XOR<UserActivityCreateInput, UserActivityUncheckedCreateInput>
    /**
     * In case the UserActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserActivityUpdateInput, UserActivityUncheckedUpdateInput>
  }

  /**
   * UserActivity delete
   */
  export type UserActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter which UserActivity to delete.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity deleteMany
   */
  export type UserActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserActivities to delete
     */
    where?: UserActivityWhereInput
  }

  /**
   * UserActivity without action
   */
  export type UserActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    unitCost: number | null
  }

  export type ProductSumAggregateOutputType = {
    unitCost: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    unitCost: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    unitCost: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    unitCost: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    unitCost?: true
  }

  export type ProductSumAggregateInputType = {
    unitCost?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    unitCost?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    unitCost?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    unitCost?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    description: string | null
    category: string
    unitCost: number | null
    createdAt: Date
    updatedAt: Date
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    unitCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    manufacturingOrders?: boolean | Product$manufacturingOrdersArgs<ExtArgs>
    billsOfMaterials?: boolean | Product$billsOfMaterialsArgs<ExtArgs>
    bomComponents?: boolean | Product$bomComponentsArgs<ExtArgs>
    stockItems?: boolean | Product$stockItemsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    unitCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    unitCost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manufacturingOrders?: boolean | Product$manufacturingOrdersArgs<ExtArgs>
    billsOfMaterials?: boolean | Product$billsOfMaterialsArgs<ExtArgs>
    bomComponents?: boolean | Product$bomComponentsArgs<ExtArgs>
    stockItems?: boolean | Product$stockItemsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      manufacturingOrders: Prisma.$ManufacturingOrderPayload<ExtArgs>[]
      billsOfMaterials: Prisma.$BillOfMaterialsPayload<ExtArgs>[]
      bomComponents: Prisma.$BomItemPayload<ExtArgs>[]
      stockItems: Prisma.$StockItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      category: string
      unitCost: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    manufacturingOrders<T extends Product$manufacturingOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Product$manufacturingOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManufacturingOrderPayload<ExtArgs>, T, "findMany"> | Null>
    billsOfMaterials<T extends Product$billsOfMaterialsArgs<ExtArgs> = {}>(args?: Subset<T, Product$billsOfMaterialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillOfMaterialsPayload<ExtArgs>, T, "findMany"> | Null>
    bomComponents<T extends Product$bomComponentsArgs<ExtArgs> = {}>(args?: Subset<T, Product$bomComponentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "findMany"> | Null>
    stockItems<T extends Product$stockItemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$stockItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly category: FieldRef<"Product", 'String'>
    readonly unitCost: FieldRef<"Product", 'Float'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }

  /**
   * Product.manufacturingOrders
   */
  export type Product$manufacturingOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturingOrder
     */
    select?: ManufacturingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufacturingOrderInclude<ExtArgs> | null
    where?: ManufacturingOrderWhereInput
    orderBy?: ManufacturingOrderOrderByWithRelationInput | ManufacturingOrderOrderByWithRelationInput[]
    cursor?: ManufacturingOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ManufacturingOrderScalarFieldEnum | ManufacturingOrderScalarFieldEnum[]
  }

  /**
   * Product.billsOfMaterials
   */
  export type Product$billsOfMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillOfMaterials
     */
    select?: BillOfMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillOfMaterialsInclude<ExtArgs> | null
    where?: BillOfMaterialsWhereInput
    orderBy?: BillOfMaterialsOrderByWithRelationInput | BillOfMaterialsOrderByWithRelationInput[]
    cursor?: BillOfMaterialsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillOfMaterialsScalarFieldEnum | BillOfMaterialsScalarFieldEnum[]
  }

  /**
   * Product.bomComponents
   */
  export type Product$bomComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    where?: BomItemWhereInput
    orderBy?: BomItemOrderByWithRelationInput | BomItemOrderByWithRelationInput[]
    cursor?: BomItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BomItemScalarFieldEnum | BomItemScalarFieldEnum[]
  }

  /**
   * Product.stockItems
   */
  export type Product$stockItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockItem
     */
    select?: StockItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockItemInclude<ExtArgs> | null
    where?: StockItemWhereInput
    orderBy?: StockItemOrderByWithRelationInput | StockItemOrderByWithRelationInput[]
    cursor?: StockItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockItemScalarFieldEnum | StockItemScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model BillOfMaterials
   */

  export type AggregateBillOfMaterials = {
    _count: BillOfMaterialsCountAggregateOutputType | null
    _avg: BillOfMaterialsAvgAggregateOutputType | null
    _sum: BillOfMaterialsSumAggregateOutputType | null
    _min: BillOfMaterialsMinAggregateOutputType | null
    _max: BillOfMaterialsMaxAggregateOutputType | null
  }

  export type BillOfMaterialsAvgAggregateOutputType = {
    totalCost: number | null
  }

  export type BillOfMaterialsSumAggregateOutputType = {
    totalCost: number | null
  }

  export type BillOfMaterialsMinAggregateOutputType = {
    id: string | null
    productId: string | null
    version: string | null
    status: $Enums.BomStatus | null
    description: string | null
    totalCost: number | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BillOfMaterialsMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    version: string | null
    status: $Enums.BomStatus | null
    description: string | null
    totalCost: number | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BillOfMaterialsCountAggregateOutputType = {
    id: number
    productId: number
    version: number
    status: number
    description: number
    totalCost: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BillOfMaterialsAvgAggregateInputType = {
    totalCost?: true
  }

  export type BillOfMaterialsSumAggregateInputType = {
    totalCost?: true
  }

  export type BillOfMaterialsMinAggregateInputType = {
    id?: true
    productId?: true
    version?: true
    status?: true
    description?: true
    totalCost?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BillOfMaterialsMaxAggregateInputType = {
    id?: true
    productId?: true
    version?: true
    status?: true
    description?: true
    totalCost?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BillOfMaterialsCountAggregateInputType = {
    id?: true
    productId?: true
    version?: true
    status?: true
    description?: true
    totalCost?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BillOfMaterialsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillOfMaterials to aggregate.
     */
    where?: BillOfMaterialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillOfMaterials to fetch.
     */
    orderBy?: BillOfMaterialsOrderByWithRelationInput | BillOfMaterialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BillOfMaterialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillOfMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillOfMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BillOfMaterials
    **/
    _count?: true | BillOfMaterialsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BillOfMaterialsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BillOfMaterialsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillOfMaterialsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillOfMaterialsMaxAggregateInputType
  }

  export type GetBillOfMaterialsAggregateType<T extends BillOfMaterialsAggregateArgs> = {
        [P in keyof T & keyof AggregateBillOfMaterials]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBillOfMaterials[P]>
      : GetScalarType<T[P], AggregateBillOfMaterials[P]>
  }




  export type BillOfMaterialsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillOfMaterialsWhereInput
    orderBy?: BillOfMaterialsOrderByWithAggregationInput | BillOfMaterialsOrderByWithAggregationInput[]
    by: BillOfMaterialsScalarFieldEnum[] | BillOfMaterialsScalarFieldEnum
    having?: BillOfMaterialsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillOfMaterialsCountAggregateInputType | true
    _avg?: BillOfMaterialsAvgAggregateInputType
    _sum?: BillOfMaterialsSumAggregateInputType
    _min?: BillOfMaterialsMinAggregateInputType
    _max?: BillOfMaterialsMaxAggregateInputType
  }

  export type BillOfMaterialsGroupByOutputType = {
    id: string
    productId: string
    version: string
    status: $Enums.BomStatus
    description: string | null
    totalCost: number | null
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: BillOfMaterialsCountAggregateOutputType | null
    _avg: BillOfMaterialsAvgAggregateOutputType | null
    _sum: BillOfMaterialsSumAggregateOutputType | null
    _min: BillOfMaterialsMinAggregateOutputType | null
    _max: BillOfMaterialsMaxAggregateOutputType | null
  }

  type GetBillOfMaterialsGroupByPayload<T extends BillOfMaterialsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BillOfMaterialsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BillOfMaterialsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BillOfMaterialsGroupByOutputType[P]>
            : GetScalarType<T[P], BillOfMaterialsGroupByOutputType[P]>
        }
      >
    >


  export type BillOfMaterialsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    version?: boolean
    status?: boolean
    description?: boolean
    totalCost?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    items?: boolean | BillOfMaterials$itemsArgs<ExtArgs>
    _count?: boolean | BillOfMaterialsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billOfMaterials"]>

  export type BillOfMaterialsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    version?: boolean
    status?: boolean
    description?: boolean
    totalCost?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billOfMaterials"]>

  export type BillOfMaterialsSelectScalar = {
    id?: boolean
    productId?: boolean
    version?: boolean
    status?: boolean
    description?: boolean
    totalCost?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BillOfMaterialsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    items?: boolean | BillOfMaterials$itemsArgs<ExtArgs>
    _count?: boolean | BillOfMaterialsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BillOfMaterialsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $BillOfMaterialsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BillOfMaterials"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      items: Prisma.$BomItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      version: string
      status: $Enums.BomStatus
      description: string | null
      totalCost: number | null
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["billOfMaterials"]>
    composites: {}
  }

  type BillOfMaterialsGetPayload<S extends boolean | null | undefined | BillOfMaterialsDefaultArgs> = $Result.GetResult<Prisma.$BillOfMaterialsPayload, S>

  type BillOfMaterialsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BillOfMaterialsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BillOfMaterialsCountAggregateInputType | true
    }

  export interface BillOfMaterialsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BillOfMaterials'], meta: { name: 'BillOfMaterials' } }
    /**
     * Find zero or one BillOfMaterials that matches the filter.
     * @param {BillOfMaterialsFindUniqueArgs} args - Arguments to find a BillOfMaterials
     * @example
     * // Get one BillOfMaterials
     * const billOfMaterials = await prisma.billOfMaterials.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BillOfMaterialsFindUniqueArgs>(args: SelectSubset<T, BillOfMaterialsFindUniqueArgs<ExtArgs>>): Prisma__BillOfMaterialsClient<$Result.GetResult<Prisma.$BillOfMaterialsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BillOfMaterials that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BillOfMaterialsFindUniqueOrThrowArgs} args - Arguments to find a BillOfMaterials
     * @example
     * // Get one BillOfMaterials
     * const billOfMaterials = await prisma.billOfMaterials.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BillOfMaterialsFindUniqueOrThrowArgs>(args: SelectSubset<T, BillOfMaterialsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BillOfMaterialsClient<$Result.GetResult<Prisma.$BillOfMaterialsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BillOfMaterials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillOfMaterialsFindFirstArgs} args - Arguments to find a BillOfMaterials
     * @example
     * // Get one BillOfMaterials
     * const billOfMaterials = await prisma.billOfMaterials.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BillOfMaterialsFindFirstArgs>(args?: SelectSubset<T, BillOfMaterialsFindFirstArgs<ExtArgs>>): Prisma__BillOfMaterialsClient<$Result.GetResult<Prisma.$BillOfMaterialsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BillOfMaterials that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillOfMaterialsFindFirstOrThrowArgs} args - Arguments to find a BillOfMaterials
     * @example
     * // Get one BillOfMaterials
     * const billOfMaterials = await prisma.billOfMaterials.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BillOfMaterialsFindFirstOrThrowArgs>(args?: SelectSubset<T, BillOfMaterialsFindFirstOrThrowArgs<ExtArgs>>): Prisma__BillOfMaterialsClient<$Result.GetResult<Prisma.$BillOfMaterialsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BillOfMaterials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillOfMaterialsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BillOfMaterials
     * const billOfMaterials = await prisma.billOfMaterials.findMany()
     * 
     * // Get first 10 BillOfMaterials
     * const billOfMaterials = await prisma.billOfMaterials.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billOfMaterialsWithIdOnly = await prisma.billOfMaterials.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BillOfMaterialsFindManyArgs>(args?: SelectSubset<T, BillOfMaterialsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillOfMaterialsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BillOfMaterials.
     * @param {BillOfMaterialsCreateArgs} args - Arguments to create a BillOfMaterials.
     * @example
     * // Create one BillOfMaterials
     * const BillOfMaterials = await prisma.billOfMaterials.create({
     *   data: {
     *     // ... data to create a BillOfMaterials
     *   }
     * })
     * 
     */
    create<T extends BillOfMaterialsCreateArgs>(args: SelectSubset<T, BillOfMaterialsCreateArgs<ExtArgs>>): Prisma__BillOfMaterialsClient<$Result.GetResult<Prisma.$BillOfMaterialsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BillOfMaterials.
     * @param {BillOfMaterialsCreateManyArgs} args - Arguments to create many BillOfMaterials.
     * @example
     * // Create many BillOfMaterials
     * const billOfMaterials = await prisma.billOfMaterials.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BillOfMaterialsCreateManyArgs>(args?: SelectSubset<T, BillOfMaterialsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BillOfMaterials and returns the data saved in the database.
     * @param {BillOfMaterialsCreateManyAndReturnArgs} args - Arguments to create many BillOfMaterials.
     * @example
     * // Create many BillOfMaterials
     * const billOfMaterials = await prisma.billOfMaterials.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BillOfMaterials and only return the `id`
     * const billOfMaterialsWithIdOnly = await prisma.billOfMaterials.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BillOfMaterialsCreateManyAndReturnArgs>(args?: SelectSubset<T, BillOfMaterialsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillOfMaterialsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BillOfMaterials.
     * @param {BillOfMaterialsDeleteArgs} args - Arguments to delete one BillOfMaterials.
     * @example
     * // Delete one BillOfMaterials
     * const BillOfMaterials = await prisma.billOfMaterials.delete({
     *   where: {
     *     // ... filter to delete one BillOfMaterials
     *   }
     * })
     * 
     */
    delete<T extends BillOfMaterialsDeleteArgs>(args: SelectSubset<T, BillOfMaterialsDeleteArgs<ExtArgs>>): Prisma__BillOfMaterialsClient<$Result.GetResult<Prisma.$BillOfMaterialsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BillOfMaterials.
     * @param {BillOfMaterialsUpdateArgs} args - Arguments to update one BillOfMaterials.
     * @example
     * // Update one BillOfMaterials
     * const billOfMaterials = await prisma.billOfMaterials.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BillOfMaterialsUpdateArgs>(args: SelectSubset<T, BillOfMaterialsUpdateArgs<ExtArgs>>): Prisma__BillOfMaterialsClient<$Result.GetResult<Prisma.$BillOfMaterialsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BillOfMaterials.
     * @param {BillOfMaterialsDeleteManyArgs} args - Arguments to filter BillOfMaterials to delete.
     * @example
     * // Delete a few BillOfMaterials
     * const { count } = await prisma.billOfMaterials.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BillOfMaterialsDeleteManyArgs>(args?: SelectSubset<T, BillOfMaterialsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BillOfMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillOfMaterialsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BillOfMaterials
     * const billOfMaterials = await prisma.billOfMaterials.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BillOfMaterialsUpdateManyArgs>(args: SelectSubset<T, BillOfMaterialsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BillOfMaterials.
     * @param {BillOfMaterialsUpsertArgs} args - Arguments to update or create a BillOfMaterials.
     * @example
     * // Update or create a BillOfMaterials
     * const billOfMaterials = await prisma.billOfMaterials.upsert({
     *   create: {
     *     // ... data to create a BillOfMaterials
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BillOfMaterials we want to update
     *   }
     * })
     */
    upsert<T extends BillOfMaterialsUpsertArgs>(args: SelectSubset<T, BillOfMaterialsUpsertArgs<ExtArgs>>): Prisma__BillOfMaterialsClient<$Result.GetResult<Prisma.$BillOfMaterialsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BillOfMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillOfMaterialsCountArgs} args - Arguments to filter BillOfMaterials to count.
     * @example
     * // Count the number of BillOfMaterials
     * const count = await prisma.billOfMaterials.count({
     *   where: {
     *     // ... the filter for the BillOfMaterials we want to count
     *   }
     * })
    **/
    count<T extends BillOfMaterialsCountArgs>(
      args?: Subset<T, BillOfMaterialsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillOfMaterialsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BillOfMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillOfMaterialsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillOfMaterialsAggregateArgs>(args: Subset<T, BillOfMaterialsAggregateArgs>): Prisma.PrismaPromise<GetBillOfMaterialsAggregateType<T>>

    /**
     * Group by BillOfMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillOfMaterialsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BillOfMaterialsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BillOfMaterialsGroupByArgs['orderBy'] }
        : { orderBy?: BillOfMaterialsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BillOfMaterialsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillOfMaterialsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BillOfMaterials model
   */
  readonly fields: BillOfMaterialsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BillOfMaterials.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BillOfMaterialsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    items<T extends BillOfMaterials$itemsArgs<ExtArgs> = {}>(args?: Subset<T, BillOfMaterials$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BillOfMaterials model
   */ 
  interface BillOfMaterialsFieldRefs {
    readonly id: FieldRef<"BillOfMaterials", 'String'>
    readonly productId: FieldRef<"BillOfMaterials", 'String'>
    readonly version: FieldRef<"BillOfMaterials", 'String'>
    readonly status: FieldRef<"BillOfMaterials", 'BomStatus'>
    readonly description: FieldRef<"BillOfMaterials", 'String'>
    readonly totalCost: FieldRef<"BillOfMaterials", 'Float'>
    readonly createdBy: FieldRef<"BillOfMaterials", 'String'>
    readonly createdAt: FieldRef<"BillOfMaterials", 'DateTime'>
    readonly updatedAt: FieldRef<"BillOfMaterials", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BillOfMaterials findUnique
   */
  export type BillOfMaterialsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillOfMaterials
     */
    select?: BillOfMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillOfMaterialsInclude<ExtArgs> | null
    /**
     * Filter, which BillOfMaterials to fetch.
     */
    where: BillOfMaterialsWhereUniqueInput
  }

  /**
   * BillOfMaterials findUniqueOrThrow
   */
  export type BillOfMaterialsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillOfMaterials
     */
    select?: BillOfMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillOfMaterialsInclude<ExtArgs> | null
    /**
     * Filter, which BillOfMaterials to fetch.
     */
    where: BillOfMaterialsWhereUniqueInput
  }

  /**
   * BillOfMaterials findFirst
   */
  export type BillOfMaterialsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillOfMaterials
     */
    select?: BillOfMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillOfMaterialsInclude<ExtArgs> | null
    /**
     * Filter, which BillOfMaterials to fetch.
     */
    where?: BillOfMaterialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillOfMaterials to fetch.
     */
    orderBy?: BillOfMaterialsOrderByWithRelationInput | BillOfMaterialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillOfMaterials.
     */
    cursor?: BillOfMaterialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillOfMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillOfMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillOfMaterials.
     */
    distinct?: BillOfMaterialsScalarFieldEnum | BillOfMaterialsScalarFieldEnum[]
  }

  /**
   * BillOfMaterials findFirstOrThrow
   */
  export type BillOfMaterialsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillOfMaterials
     */
    select?: BillOfMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillOfMaterialsInclude<ExtArgs> | null
    /**
     * Filter, which BillOfMaterials to fetch.
     */
    where?: BillOfMaterialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillOfMaterials to fetch.
     */
    orderBy?: BillOfMaterialsOrderByWithRelationInput | BillOfMaterialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillOfMaterials.
     */
    cursor?: BillOfMaterialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillOfMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillOfMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillOfMaterials.
     */
    distinct?: BillOfMaterialsScalarFieldEnum | BillOfMaterialsScalarFieldEnum[]
  }

  /**
   * BillOfMaterials findMany
   */
  export type BillOfMaterialsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillOfMaterials
     */
    select?: BillOfMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillOfMaterialsInclude<ExtArgs> | null
    /**
     * Filter, which BillOfMaterials to fetch.
     */
    where?: BillOfMaterialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillOfMaterials to fetch.
     */
    orderBy?: BillOfMaterialsOrderByWithRelationInput | BillOfMaterialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BillOfMaterials.
     */
    cursor?: BillOfMaterialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillOfMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillOfMaterials.
     */
    skip?: number
    distinct?: BillOfMaterialsScalarFieldEnum | BillOfMaterialsScalarFieldEnum[]
  }

  /**
   * BillOfMaterials create
   */
  export type BillOfMaterialsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillOfMaterials
     */
    select?: BillOfMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillOfMaterialsInclude<ExtArgs> | null
    /**
     * The data needed to create a BillOfMaterials.
     */
    data: XOR<BillOfMaterialsCreateInput, BillOfMaterialsUncheckedCreateInput>
  }

  /**
   * BillOfMaterials createMany
   */
  export type BillOfMaterialsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BillOfMaterials.
     */
    data: BillOfMaterialsCreateManyInput | BillOfMaterialsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BillOfMaterials createManyAndReturn
   */
  export type BillOfMaterialsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillOfMaterials
     */
    select?: BillOfMaterialsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BillOfMaterials.
     */
    data: BillOfMaterialsCreateManyInput | BillOfMaterialsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillOfMaterialsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BillOfMaterials update
   */
  export type BillOfMaterialsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillOfMaterials
     */
    select?: BillOfMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillOfMaterialsInclude<ExtArgs> | null
    /**
     * The data needed to update a BillOfMaterials.
     */
    data: XOR<BillOfMaterialsUpdateInput, BillOfMaterialsUncheckedUpdateInput>
    /**
     * Choose, which BillOfMaterials to update.
     */
    where: BillOfMaterialsWhereUniqueInput
  }

  /**
   * BillOfMaterials updateMany
   */
  export type BillOfMaterialsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BillOfMaterials.
     */
    data: XOR<BillOfMaterialsUpdateManyMutationInput, BillOfMaterialsUncheckedUpdateManyInput>
    /**
     * Filter which BillOfMaterials to update
     */
    where?: BillOfMaterialsWhereInput
  }

  /**
   * BillOfMaterials upsert
   */
  export type BillOfMaterialsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillOfMaterials
     */
    select?: BillOfMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillOfMaterialsInclude<ExtArgs> | null
    /**
     * The filter to search for the BillOfMaterials to update in case it exists.
     */
    where: BillOfMaterialsWhereUniqueInput
    /**
     * In case the BillOfMaterials found by the `where` argument doesn't exist, create a new BillOfMaterials with this data.
     */
    create: XOR<BillOfMaterialsCreateInput, BillOfMaterialsUncheckedCreateInput>
    /**
     * In case the BillOfMaterials was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BillOfMaterialsUpdateInput, BillOfMaterialsUncheckedUpdateInput>
  }

  /**
   * BillOfMaterials delete
   */
  export type BillOfMaterialsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillOfMaterials
     */
    select?: BillOfMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillOfMaterialsInclude<ExtArgs> | null
    /**
     * Filter which BillOfMaterials to delete.
     */
    where: BillOfMaterialsWhereUniqueInput
  }

  /**
   * BillOfMaterials deleteMany
   */
  export type BillOfMaterialsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillOfMaterials to delete
     */
    where?: BillOfMaterialsWhereInput
  }

  /**
   * BillOfMaterials.items
   */
  export type BillOfMaterials$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    where?: BomItemWhereInput
    orderBy?: BomItemOrderByWithRelationInput | BomItemOrderByWithRelationInput[]
    cursor?: BomItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BomItemScalarFieldEnum | BomItemScalarFieldEnum[]
  }

  /**
   * BillOfMaterials without action
   */
  export type BillOfMaterialsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillOfMaterials
     */
    select?: BillOfMaterialsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillOfMaterialsInclude<ExtArgs> | null
  }


  /**
   * Model BomItem
   */

  export type AggregateBomItem = {
    _count: BomItemCountAggregateOutputType | null
    _avg: BomItemAvgAggregateOutputType | null
    _sum: BomItemSumAggregateOutputType | null
    _min: BomItemMinAggregateOutputType | null
    _max: BomItemMaxAggregateOutputType | null
  }

  export type BomItemAvgAggregateOutputType = {
    quantity: number | null
    unitCost: number | null
    totalCost: number | null
    leadTimeDays: number | null
  }

  export type BomItemSumAggregateOutputType = {
    quantity: number | null
    unitCost: number | null
    totalCost: number | null
    leadTimeDays: number | null
  }

  export type BomItemMinAggregateOutputType = {
    id: string | null
    bomId: string | null
    componentId: string | null
    quantity: number | null
    unit: string | null
    unitCost: number | null
    totalCost: number | null
    leadTimeDays: number | null
    supplier: string | null
    specifications: string | null
  }

  export type BomItemMaxAggregateOutputType = {
    id: string | null
    bomId: string | null
    componentId: string | null
    quantity: number | null
    unit: string | null
    unitCost: number | null
    totalCost: number | null
    leadTimeDays: number | null
    supplier: string | null
    specifications: string | null
  }

  export type BomItemCountAggregateOutputType = {
    id: number
    bomId: number
    componentId: number
    quantity: number
    unit: number
    unitCost: number
    totalCost: number
    leadTimeDays: number
    supplier: number
    specifications: number
    _all: number
  }


  export type BomItemAvgAggregateInputType = {
    quantity?: true
    unitCost?: true
    totalCost?: true
    leadTimeDays?: true
  }

  export type BomItemSumAggregateInputType = {
    quantity?: true
    unitCost?: true
    totalCost?: true
    leadTimeDays?: true
  }

  export type BomItemMinAggregateInputType = {
    id?: true
    bomId?: true
    componentId?: true
    quantity?: true
    unit?: true
    unitCost?: true
    totalCost?: true
    leadTimeDays?: true
    supplier?: true
    specifications?: true
  }

  export type BomItemMaxAggregateInputType = {
    id?: true
    bomId?: true
    componentId?: true
    quantity?: true
    unit?: true
    unitCost?: true
    totalCost?: true
    leadTimeDays?: true
    supplier?: true
    specifications?: true
  }

  export type BomItemCountAggregateInputType = {
    id?: true
    bomId?: true
    componentId?: true
    quantity?: true
    unit?: true
    unitCost?: true
    totalCost?: true
    leadTimeDays?: true
    supplier?: true
    specifications?: true
    _all?: true
  }

  export type BomItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BomItem to aggregate.
     */
    where?: BomItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BomItems to fetch.
     */
    orderBy?: BomItemOrderByWithRelationInput | BomItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BomItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BomItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BomItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BomItems
    **/
    _count?: true | BomItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BomItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BomItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BomItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BomItemMaxAggregateInputType
  }

  export type GetBomItemAggregateType<T extends BomItemAggregateArgs> = {
        [P in keyof T & keyof AggregateBomItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBomItem[P]>
      : GetScalarType<T[P], AggregateBomItem[P]>
  }




  export type BomItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BomItemWhereInput
    orderBy?: BomItemOrderByWithAggregationInput | BomItemOrderByWithAggregationInput[]
    by: BomItemScalarFieldEnum[] | BomItemScalarFieldEnum
    having?: BomItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BomItemCountAggregateInputType | true
    _avg?: BomItemAvgAggregateInputType
    _sum?: BomItemSumAggregateInputType
    _min?: BomItemMinAggregateInputType
    _max?: BomItemMaxAggregateInputType
  }

  export type BomItemGroupByOutputType = {
    id: string
    bomId: string
    componentId: string
    quantity: number
    unit: string
    unitCost: number | null
    totalCost: number | null
    leadTimeDays: number | null
    supplier: string | null
    specifications: string | null
    _count: BomItemCountAggregateOutputType | null
    _avg: BomItemAvgAggregateOutputType | null
    _sum: BomItemSumAggregateOutputType | null
    _min: BomItemMinAggregateOutputType | null
    _max: BomItemMaxAggregateOutputType | null
  }

  type GetBomItemGroupByPayload<T extends BomItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BomItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BomItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BomItemGroupByOutputType[P]>
            : GetScalarType<T[P], BomItemGroupByOutputType[P]>
        }
      >
    >


  export type BomItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bomId?: boolean
    componentId?: boolean
    quantity?: boolean
    unit?: boolean
    unitCost?: boolean
    totalCost?: boolean
    leadTimeDays?: boolean
    supplier?: boolean
    specifications?: boolean
    bom?: boolean | BillOfMaterialsDefaultArgs<ExtArgs>
    component?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bomItem"]>

  export type BomItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bomId?: boolean
    componentId?: boolean
    quantity?: boolean
    unit?: boolean
    unitCost?: boolean
    totalCost?: boolean
    leadTimeDays?: boolean
    supplier?: boolean
    specifications?: boolean
    bom?: boolean | BillOfMaterialsDefaultArgs<ExtArgs>
    component?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bomItem"]>

  export type BomItemSelectScalar = {
    id?: boolean
    bomId?: boolean
    componentId?: boolean
    quantity?: boolean
    unit?: boolean
    unitCost?: boolean
    totalCost?: boolean
    leadTimeDays?: boolean
    supplier?: boolean
    specifications?: boolean
  }

  export type BomItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bom?: boolean | BillOfMaterialsDefaultArgs<ExtArgs>
    component?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type BomItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bom?: boolean | BillOfMaterialsDefaultArgs<ExtArgs>
    component?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $BomItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BomItem"
    objects: {
      bom: Prisma.$BillOfMaterialsPayload<ExtArgs>
      component: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bomId: string
      componentId: string
      quantity: number
      unit: string
      unitCost: number | null
      totalCost: number | null
      leadTimeDays: number | null
      supplier: string | null
      specifications: string | null
    }, ExtArgs["result"]["bomItem"]>
    composites: {}
  }

  type BomItemGetPayload<S extends boolean | null | undefined | BomItemDefaultArgs> = $Result.GetResult<Prisma.$BomItemPayload, S>

  type BomItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BomItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BomItemCountAggregateInputType | true
    }

  export interface BomItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BomItem'], meta: { name: 'BomItem' } }
    /**
     * Find zero or one BomItem that matches the filter.
     * @param {BomItemFindUniqueArgs} args - Arguments to find a BomItem
     * @example
     * // Get one BomItem
     * const bomItem = await prisma.bomItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BomItemFindUniqueArgs>(args: SelectSubset<T, BomItemFindUniqueArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BomItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BomItemFindUniqueOrThrowArgs} args - Arguments to find a BomItem
     * @example
     * // Get one BomItem
     * const bomItem = await prisma.bomItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BomItemFindUniqueOrThrowArgs>(args: SelectSubset<T, BomItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BomItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BomItemFindFirstArgs} args - Arguments to find a BomItem
     * @example
     * // Get one BomItem
     * const bomItem = await prisma.bomItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BomItemFindFirstArgs>(args?: SelectSubset<T, BomItemFindFirstArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BomItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BomItemFindFirstOrThrowArgs} args - Arguments to find a BomItem
     * @example
     * // Get one BomItem
     * const bomItem = await prisma.bomItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BomItemFindFirstOrThrowArgs>(args?: SelectSubset<T, BomItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BomItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BomItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BomItems
     * const bomItems = await prisma.bomItem.findMany()
     * 
     * // Get first 10 BomItems
     * const bomItems = await prisma.bomItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bomItemWithIdOnly = await prisma.bomItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BomItemFindManyArgs>(args?: SelectSubset<T, BomItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BomItem.
     * @param {BomItemCreateArgs} args - Arguments to create a BomItem.
     * @example
     * // Create one BomItem
     * const BomItem = await prisma.bomItem.create({
     *   data: {
     *     // ... data to create a BomItem
     *   }
     * })
     * 
     */
    create<T extends BomItemCreateArgs>(args: SelectSubset<T, BomItemCreateArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BomItems.
     * @param {BomItemCreateManyArgs} args - Arguments to create many BomItems.
     * @example
     * // Create many BomItems
     * const bomItem = await prisma.bomItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BomItemCreateManyArgs>(args?: SelectSubset<T, BomItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BomItems and returns the data saved in the database.
     * @param {BomItemCreateManyAndReturnArgs} args - Arguments to create many BomItems.
     * @example
     * // Create many BomItems
     * const bomItem = await prisma.bomItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BomItems and only return the `id`
     * const bomItemWithIdOnly = await prisma.bomItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BomItemCreateManyAndReturnArgs>(args?: SelectSubset<T, BomItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BomItem.
     * @param {BomItemDeleteArgs} args - Arguments to delete one BomItem.
     * @example
     * // Delete one BomItem
     * const BomItem = await prisma.bomItem.delete({
     *   where: {
     *     // ... filter to delete one BomItem
     *   }
     * })
     * 
     */
    delete<T extends BomItemDeleteArgs>(args: SelectSubset<T, BomItemDeleteArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BomItem.
     * @param {BomItemUpdateArgs} args - Arguments to update one BomItem.
     * @example
     * // Update one BomItem
     * const bomItem = await prisma.bomItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BomItemUpdateArgs>(args: SelectSubset<T, BomItemUpdateArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BomItems.
     * @param {BomItemDeleteManyArgs} args - Arguments to filter BomItems to delete.
     * @example
     * // Delete a few BomItems
     * const { count } = await prisma.bomItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BomItemDeleteManyArgs>(args?: SelectSubset<T, BomItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BomItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BomItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BomItems
     * const bomItem = await prisma.bomItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BomItemUpdateManyArgs>(args: SelectSubset<T, BomItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BomItem.
     * @param {BomItemUpsertArgs} args - Arguments to update or create a BomItem.
     * @example
     * // Update or create a BomItem
     * const bomItem = await prisma.bomItem.upsert({
     *   create: {
     *     // ... data to create a BomItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BomItem we want to update
     *   }
     * })
     */
    upsert<T extends BomItemUpsertArgs>(args: SelectSubset<T, BomItemUpsertArgs<ExtArgs>>): Prisma__BomItemClient<$Result.GetResult<Prisma.$BomItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BomItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BomItemCountArgs} args - Arguments to filter BomItems to count.
     * @example
     * // Count the number of BomItems
     * const count = await prisma.bomItem.count({
     *   where: {
     *     // ... the filter for the BomItems we want to count
     *   }
     * })
    **/
    count<T extends BomItemCountArgs>(
      args?: Subset<T, BomItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BomItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BomItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BomItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BomItemAggregateArgs>(args: Subset<T, BomItemAggregateArgs>): Prisma.PrismaPromise<GetBomItemAggregateType<T>>

    /**
     * Group by BomItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BomItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BomItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BomItemGroupByArgs['orderBy'] }
        : { orderBy?: BomItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BomItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBomItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BomItem model
   */
  readonly fields: BomItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BomItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BomItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bom<T extends BillOfMaterialsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BillOfMaterialsDefaultArgs<ExtArgs>>): Prisma__BillOfMaterialsClient<$Result.GetResult<Prisma.$BillOfMaterialsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    component<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BomItem model
   */ 
  interface BomItemFieldRefs {
    readonly id: FieldRef<"BomItem", 'String'>
    readonly bomId: FieldRef<"BomItem", 'String'>
    readonly componentId: FieldRef<"BomItem", 'String'>
    readonly quantity: FieldRef<"BomItem", 'Float'>
    readonly unit: FieldRef<"BomItem", 'String'>
    readonly unitCost: FieldRef<"BomItem", 'Float'>
    readonly totalCost: FieldRef<"BomItem", 'Float'>
    readonly leadTimeDays: FieldRef<"BomItem", 'Int'>
    readonly supplier: FieldRef<"BomItem", 'String'>
    readonly specifications: FieldRef<"BomItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BomItem findUnique
   */
  export type BomItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * Filter, which BomItem to fetch.
     */
    where: BomItemWhereUniqueInput
  }

  /**
   * BomItem findUniqueOrThrow
   */
  export type BomItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * Filter, which BomItem to fetch.
     */
    where: BomItemWhereUniqueInput
  }

  /**
   * BomItem findFirst
   */
  export type BomItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * Filter, which BomItem to fetch.
     */
    where?: BomItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BomItems to fetch.
     */
    orderBy?: BomItemOrderByWithRelationInput | BomItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BomItems.
     */
    cursor?: BomItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BomItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BomItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BomItems.
     */
    distinct?: BomItemScalarFieldEnum | BomItemScalarFieldEnum[]
  }

  /**
   * BomItem findFirstOrThrow
   */
  export type BomItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * Filter, which BomItem to fetch.
     */
    where?: BomItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BomItems to fetch.
     */
    orderBy?: BomItemOrderByWithRelationInput | BomItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BomItems.
     */
    cursor?: BomItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BomItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BomItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BomItems.
     */
    distinct?: BomItemScalarFieldEnum | BomItemScalarFieldEnum[]
  }

  /**
   * BomItem findMany
   */
  export type BomItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * Filter, which BomItems to fetch.
     */
    where?: BomItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BomItems to fetch.
     */
    orderBy?: BomItemOrderByWithRelationInput | BomItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BomItems.
     */
    cursor?: BomItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BomItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BomItems.
     */
    skip?: number
    distinct?: BomItemScalarFieldEnum | BomItemScalarFieldEnum[]
  }

  /**
   * BomItem create
   */
  export type BomItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * The data needed to create a BomItem.
     */
    data: XOR<BomItemCreateInput, BomItemUncheckedCreateInput>
  }

  /**
   * BomItem createMany
   */
  export type BomItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BomItems.
     */
    data: BomItemCreateManyInput | BomItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BomItem createManyAndReturn
   */
  export type BomItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BomItems.
     */
    data: BomItemCreateManyInput | BomItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BomItem update
   */
  export type BomItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * The data needed to update a BomItem.
     */
    data: XOR<BomItemUpdateInput, BomItemUncheckedUpdateInput>
    /**
     * Choose, which BomItem to update.
     */
    where: BomItemWhereUniqueInput
  }

  /**
   * BomItem updateMany
   */
  export type BomItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BomItems.
     */
    data: XOR<BomItemUpdateManyMutationInput, BomItemUncheckedUpdateManyInput>
    /**
     * Filter which BomItems to update
     */
    where?: BomItemWhereInput
  }

  /**
   * BomItem upsert
   */
  export type BomItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * The filter to search for the BomItem to update in case it exists.
     */
    where: BomItemWhereUniqueInput
    /**
     * In case the BomItem found by the `where` argument doesn't exist, create a new BomItem with this data.
     */
    create: XOR<BomItemCreateInput, BomItemUncheckedCreateInput>
    /**
     * In case the BomItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BomItemUpdateInput, BomItemUncheckedUpdateInput>
  }

  /**
   * BomItem delete
   */
  export type BomItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
    /**
     * Filter which BomItem to delete.
     */
    where: BomItemWhereUniqueInput
  }

  /**
   * BomItem deleteMany
   */
  export type BomItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BomItems to delete
     */
    where?: BomItemWhereInput
  }

  /**
   * BomItem without action
   */
  export type BomItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BomItem
     */
    select?: BomItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BomItemInclude<ExtArgs> | null
  }


  /**
   * Model ManufacturingOrder
   */

  export type AggregateManufacturingOrder = {
    _count: ManufacturingOrderCountAggregateOutputType | null
    _avg: ManufacturingOrderAvgAggregateOutputType | null
    _sum: ManufacturingOrderSumAggregateOutputType | null
    _min: ManufacturingOrderMinAggregateOutputType | null
    _max: ManufacturingOrderMaxAggregateOutputType | null
  }

  export type ManufacturingOrderAvgAggregateOutputType = {
    quantity: number | null
    estimatedCost: number | null
    actualCost: number | null
    progress: number | null
  }

  export type ManufacturingOrderSumAggregateOutputType = {
    quantity: number | null
    estimatedCost: number | null
    actualCost: number | null
    progress: number | null
  }

  export type ManufacturingOrderMinAggregateOutputType = {
    id: string | null
    orderNumber: string | null
    productId: string | null
    quantity: number | null
    status: $Enums.OrderStatus | null
    priority: $Enums.Priority | null
    startDate: Date | null
    deadline: Date | null
    completedAt: Date | null
    assignedToId: string | null
    estimatedCost: number | null
    actualCost: number | null
    progress: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ManufacturingOrderMaxAggregateOutputType = {
    id: string | null
    orderNumber: string | null
    productId: string | null
    quantity: number | null
    status: $Enums.OrderStatus | null
    priority: $Enums.Priority | null
    startDate: Date | null
    deadline: Date | null
    completedAt: Date | null
    assignedToId: string | null
    estimatedCost: number | null
    actualCost: number | null
    progress: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ManufacturingOrderCountAggregateOutputType = {
    id: number
    orderNumber: number
    productId: number
    quantity: number
    status: number
    priority: number
    startDate: number
    deadline: number
    completedAt: number
    assignedToId: number
    estimatedCost: number
    actualCost: number
    progress: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ManufacturingOrderAvgAggregateInputType = {
    quantity?: true
    estimatedCost?: true
    actualCost?: true
    progress?: true
  }

  export type ManufacturingOrderSumAggregateInputType = {
    quantity?: true
    estimatedCost?: true
    actualCost?: true
    progress?: true
  }

  export type ManufacturingOrderMinAggregateInputType = {
    id?: true
    orderNumber?: true
    productId?: true
    quantity?: true
    status?: true
    priority?: true
    startDate?: true
    deadline?: true
    completedAt?: true
    assignedToId?: true
    estimatedCost?: true
    actualCost?: true
    progress?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ManufacturingOrderMaxAggregateInputType = {
    id?: true
    orderNumber?: true
    productId?: true
    quantity?: true
    status?: true
    priority?: true
    startDate?: true
    deadline?: true
    completedAt?: true
    assignedToId?: true
    estimatedCost?: true
    actualCost?: true
    progress?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ManufacturingOrderCountAggregateInputType = {
    id?: true
    orderNumber?: true
    productId?: true
    quantity?: true
    status?: true
    priority?: true
    startDate?: true
    deadline?: true
    completedAt?: true
    assignedToId?: true
    estimatedCost?: true
    actualCost?: true
    progress?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ManufacturingOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ManufacturingOrder to aggregate.
     */
    where?: ManufacturingOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManufacturingOrders to fetch.
     */
    orderBy?: ManufacturingOrderOrderByWithRelationInput | ManufacturingOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ManufacturingOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManufacturingOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManufacturingOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ManufacturingOrders
    **/
    _count?: true | ManufacturingOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ManufacturingOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ManufacturingOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ManufacturingOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ManufacturingOrderMaxAggregateInputType
  }

  export type GetManufacturingOrderAggregateType<T extends ManufacturingOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateManufacturingOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateManufacturingOrder[P]>
      : GetScalarType<T[P], AggregateManufacturingOrder[P]>
  }




  export type ManufacturingOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManufacturingOrderWhereInput
    orderBy?: ManufacturingOrderOrderByWithAggregationInput | ManufacturingOrderOrderByWithAggregationInput[]
    by: ManufacturingOrderScalarFieldEnum[] | ManufacturingOrderScalarFieldEnum
    having?: ManufacturingOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ManufacturingOrderCountAggregateInputType | true
    _avg?: ManufacturingOrderAvgAggregateInputType
    _sum?: ManufacturingOrderSumAggregateInputType
    _min?: ManufacturingOrderMinAggregateInputType
    _max?: ManufacturingOrderMaxAggregateInputType
  }

  export type ManufacturingOrderGroupByOutputType = {
    id: string
    orderNumber: string
    productId: string
    quantity: number
    status: $Enums.OrderStatus
    priority: $Enums.Priority
    startDate: Date | null
    deadline: Date
    completedAt: Date | null
    assignedToId: string | null
    estimatedCost: number | null
    actualCost: number | null
    progress: number
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: ManufacturingOrderCountAggregateOutputType | null
    _avg: ManufacturingOrderAvgAggregateOutputType | null
    _sum: ManufacturingOrderSumAggregateOutputType | null
    _min: ManufacturingOrderMinAggregateOutputType | null
    _max: ManufacturingOrderMaxAggregateOutputType | null
  }

  type GetManufacturingOrderGroupByPayload<T extends ManufacturingOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ManufacturingOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ManufacturingOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ManufacturingOrderGroupByOutputType[P]>
            : GetScalarType<T[P], ManufacturingOrderGroupByOutputType[P]>
        }
      >
    >


  export type ManufacturingOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    productId?: boolean
    quantity?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    deadline?: boolean
    completedAt?: boolean
    assignedToId?: boolean
    estimatedCost?: boolean
    actualCost?: boolean
    progress?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    assignedTo?: boolean | ManufacturingOrder$assignedToArgs<ExtArgs>
    workOrders?: boolean | ManufacturingOrder$workOrdersArgs<ExtArgs>
    _count?: boolean | ManufacturingOrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["manufacturingOrder"]>

  export type ManufacturingOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    productId?: boolean
    quantity?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    deadline?: boolean
    completedAt?: boolean
    assignedToId?: boolean
    estimatedCost?: boolean
    actualCost?: boolean
    progress?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    assignedTo?: boolean | ManufacturingOrder$assignedToArgs<ExtArgs>
  }, ExtArgs["result"]["manufacturingOrder"]>

  export type ManufacturingOrderSelectScalar = {
    id?: boolean
    orderNumber?: boolean
    productId?: boolean
    quantity?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    deadline?: boolean
    completedAt?: boolean
    assignedToId?: boolean
    estimatedCost?: boolean
    actualCost?: boolean
    progress?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ManufacturingOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    assignedTo?: boolean | ManufacturingOrder$assignedToArgs<ExtArgs>
    workOrders?: boolean | ManufacturingOrder$workOrdersArgs<ExtArgs>
    _count?: boolean | ManufacturingOrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ManufacturingOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    assignedTo?: boolean | ManufacturingOrder$assignedToArgs<ExtArgs>
  }

  export type $ManufacturingOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ManufacturingOrder"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
      workOrders: Prisma.$WorkOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderNumber: string
      productId: string
      quantity: number
      status: $Enums.OrderStatus
      priority: $Enums.Priority
      startDate: Date | null
      deadline: Date
      completedAt: Date | null
      assignedToId: string | null
      estimatedCost: number | null
      actualCost: number | null
      progress: number
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["manufacturingOrder"]>
    composites: {}
  }

  type ManufacturingOrderGetPayload<S extends boolean | null | undefined | ManufacturingOrderDefaultArgs> = $Result.GetResult<Prisma.$ManufacturingOrderPayload, S>

  type ManufacturingOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ManufacturingOrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ManufacturingOrderCountAggregateInputType | true
    }

  export interface ManufacturingOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ManufacturingOrder'], meta: { name: 'ManufacturingOrder' } }
    /**
     * Find zero or one ManufacturingOrder that matches the filter.
     * @param {ManufacturingOrderFindUniqueArgs} args - Arguments to find a ManufacturingOrder
     * @example
     * // Get one ManufacturingOrder
     * const manufacturingOrder = await prisma.manufacturingOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ManufacturingOrderFindUniqueArgs>(args: SelectSubset<T, ManufacturingOrderFindUniqueArgs<ExtArgs>>): Prisma__ManufacturingOrderClient<$Result.GetResult<Prisma.$ManufacturingOrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ManufacturingOrder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ManufacturingOrderFindUniqueOrThrowArgs} args - Arguments to find a ManufacturingOrder
     * @example
     * // Get one ManufacturingOrder
     * const manufacturingOrder = await prisma.manufacturingOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ManufacturingOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, ManufacturingOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ManufacturingOrderClient<$Result.GetResult<Prisma.$ManufacturingOrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ManufacturingOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufacturingOrderFindFirstArgs} args - Arguments to find a ManufacturingOrder
     * @example
     * // Get one ManufacturingOrder
     * const manufacturingOrder = await prisma.manufacturingOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ManufacturingOrderFindFirstArgs>(args?: SelectSubset<T, ManufacturingOrderFindFirstArgs<ExtArgs>>): Prisma__ManufacturingOrderClient<$Result.GetResult<Prisma.$ManufacturingOrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ManufacturingOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufacturingOrderFindFirstOrThrowArgs} args - Arguments to find a ManufacturingOrder
     * @example
     * // Get one ManufacturingOrder
     * const manufacturingOrder = await prisma.manufacturingOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ManufacturingOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, ManufacturingOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__ManufacturingOrderClient<$Result.GetResult<Prisma.$ManufacturingOrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ManufacturingOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufacturingOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ManufacturingOrders
     * const manufacturingOrders = await prisma.manufacturingOrder.findMany()
     * 
     * // Get first 10 ManufacturingOrders
     * const manufacturingOrders = await prisma.manufacturingOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const manufacturingOrderWithIdOnly = await prisma.manufacturingOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ManufacturingOrderFindManyArgs>(args?: SelectSubset<T, ManufacturingOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManufacturingOrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ManufacturingOrder.
     * @param {ManufacturingOrderCreateArgs} args - Arguments to create a ManufacturingOrder.
     * @example
     * // Create one ManufacturingOrder
     * const ManufacturingOrder = await prisma.manufacturingOrder.create({
     *   data: {
     *     // ... data to create a ManufacturingOrder
     *   }
     * })
     * 
     */
    create<T extends ManufacturingOrderCreateArgs>(args: SelectSubset<T, ManufacturingOrderCreateArgs<ExtArgs>>): Prisma__ManufacturingOrderClient<$Result.GetResult<Prisma.$ManufacturingOrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ManufacturingOrders.
     * @param {ManufacturingOrderCreateManyArgs} args - Arguments to create many ManufacturingOrders.
     * @example
     * // Create many ManufacturingOrders
     * const manufacturingOrder = await prisma.manufacturingOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ManufacturingOrderCreateManyArgs>(args?: SelectSubset<T, ManufacturingOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ManufacturingOrders and returns the data saved in the database.
     * @param {ManufacturingOrderCreateManyAndReturnArgs} args - Arguments to create many ManufacturingOrders.
     * @example
     * // Create many ManufacturingOrders
     * const manufacturingOrder = await prisma.manufacturingOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ManufacturingOrders and only return the `id`
     * const manufacturingOrderWithIdOnly = await prisma.manufacturingOrder.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ManufacturingOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, ManufacturingOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManufacturingOrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ManufacturingOrder.
     * @param {ManufacturingOrderDeleteArgs} args - Arguments to delete one ManufacturingOrder.
     * @example
     * // Delete one ManufacturingOrder
     * const ManufacturingOrder = await prisma.manufacturingOrder.delete({
     *   where: {
     *     // ... filter to delete one ManufacturingOrder
     *   }
     * })
     * 
     */
    delete<T extends ManufacturingOrderDeleteArgs>(args: SelectSubset<T, ManufacturingOrderDeleteArgs<ExtArgs>>): Prisma__ManufacturingOrderClient<$Result.GetResult<Prisma.$ManufacturingOrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ManufacturingOrder.
     * @param {ManufacturingOrderUpdateArgs} args - Arguments to update one ManufacturingOrder.
     * @example
     * // Update one ManufacturingOrder
     * const manufacturingOrder = await prisma.manufacturingOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ManufacturingOrderUpdateArgs>(args: SelectSubset<T, ManufacturingOrderUpdateArgs<ExtArgs>>): Prisma__ManufacturingOrderClient<$Result.GetResult<Prisma.$ManufacturingOrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ManufacturingOrders.
     * @param {ManufacturingOrderDeleteManyArgs} args - Arguments to filter ManufacturingOrders to delete.
     * @example
     * // Delete a few ManufacturingOrders
     * const { count } = await prisma.manufacturingOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ManufacturingOrderDeleteManyArgs>(args?: SelectSubset<T, ManufacturingOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ManufacturingOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufacturingOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ManufacturingOrders
     * const manufacturingOrder = await prisma.manufacturingOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ManufacturingOrderUpdateManyArgs>(args: SelectSubset<T, ManufacturingOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ManufacturingOrder.
     * @param {ManufacturingOrderUpsertArgs} args - Arguments to update or create a ManufacturingOrder.
     * @example
     * // Update or create a ManufacturingOrder
     * const manufacturingOrder = await prisma.manufacturingOrder.upsert({
     *   create: {
     *     // ... data to create a ManufacturingOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ManufacturingOrder we want to update
     *   }
     * })
     */
    upsert<T extends ManufacturingOrderUpsertArgs>(args: SelectSubset<T, ManufacturingOrderUpsertArgs<ExtArgs>>): Prisma__ManufacturingOrderClient<$Result.GetResult<Prisma.$ManufacturingOrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ManufacturingOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufacturingOrderCountArgs} args - Arguments to filter ManufacturingOrders to count.
     * @example
     * // Count the number of ManufacturingOrders
     * const count = await prisma.manufacturingOrder.count({
     *   where: {
     *     // ... the filter for the ManufacturingOrders we want to count
     *   }
     * })
    **/
    count<T extends ManufacturingOrderCountArgs>(
      args?: Subset<T, ManufacturingOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ManufacturingOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ManufacturingOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufacturingOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ManufacturingOrderAggregateArgs>(args: Subset<T, ManufacturingOrderAggregateArgs>): Prisma.PrismaPromise<GetManufacturingOrderAggregateType<T>>

    /**
     * Group by ManufacturingOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufacturingOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ManufacturingOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ManufacturingOrderGroupByArgs['orderBy'] }
        : { orderBy?: ManufacturingOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ManufacturingOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManufacturingOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ManufacturingOrder model
   */
  readonly fields: ManufacturingOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ManufacturingOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ManufacturingOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignedTo<T extends ManufacturingOrder$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, ManufacturingOrder$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    workOrders<T extends ManufacturingOrder$workOrdersArgs<ExtArgs> = {}>(args?: Subset<T, ManufacturingOrder$workOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ManufacturingOrder model
   */ 
  interface ManufacturingOrderFieldRefs {
    readonly id: FieldRef<"ManufacturingOrder", 'String'>
    readonly orderNumber: FieldRef<"ManufacturingOrder", 'String'>
    readonly productId: FieldRef<"ManufacturingOrder", 'String'>
    readonly quantity: FieldRef<"ManufacturingOrder", 'Int'>
    readonly status: FieldRef<"ManufacturingOrder", 'OrderStatus'>
    readonly priority: FieldRef<"ManufacturingOrder", 'Priority'>
    readonly startDate: FieldRef<"ManufacturingOrder", 'DateTime'>
    readonly deadline: FieldRef<"ManufacturingOrder", 'DateTime'>
    readonly completedAt: FieldRef<"ManufacturingOrder", 'DateTime'>
    readonly assignedToId: FieldRef<"ManufacturingOrder", 'String'>
    readonly estimatedCost: FieldRef<"ManufacturingOrder", 'Float'>
    readonly actualCost: FieldRef<"ManufacturingOrder", 'Float'>
    readonly progress: FieldRef<"ManufacturingOrder", 'Float'>
    readonly notes: FieldRef<"ManufacturingOrder", 'String'>
    readonly createdAt: FieldRef<"ManufacturingOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"ManufacturingOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ManufacturingOrder findUnique
   */
  export type ManufacturingOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturingOrder
     */
    select?: ManufacturingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufacturingOrderInclude<ExtArgs> | null
    /**
     * Filter, which ManufacturingOrder to fetch.
     */
    where: ManufacturingOrderWhereUniqueInput
  }

  /**
   * ManufacturingOrder findUniqueOrThrow
   */
  export type ManufacturingOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturingOrder
     */
    select?: ManufacturingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufacturingOrderInclude<ExtArgs> | null
    /**
     * Filter, which ManufacturingOrder to fetch.
     */
    where: ManufacturingOrderWhereUniqueInput
  }

  /**
   * ManufacturingOrder findFirst
   */
  export type ManufacturingOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturingOrder
     */
    select?: ManufacturingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufacturingOrderInclude<ExtArgs> | null
    /**
     * Filter, which ManufacturingOrder to fetch.
     */
    where?: ManufacturingOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManufacturingOrders to fetch.
     */
    orderBy?: ManufacturingOrderOrderByWithRelationInput | ManufacturingOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ManufacturingOrders.
     */
    cursor?: ManufacturingOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManufacturingOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManufacturingOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ManufacturingOrders.
     */
    distinct?: ManufacturingOrderScalarFieldEnum | ManufacturingOrderScalarFieldEnum[]
  }

  /**
   * ManufacturingOrder findFirstOrThrow
   */
  export type ManufacturingOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturingOrder
     */
    select?: ManufacturingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufacturingOrderInclude<ExtArgs> | null
    /**
     * Filter, which ManufacturingOrder to fetch.
     */
    where?: ManufacturingOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManufacturingOrders to fetch.
     */
    orderBy?: ManufacturingOrderOrderByWithRelationInput | ManufacturingOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ManufacturingOrders.
     */
    cursor?: ManufacturingOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManufacturingOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManufacturingOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ManufacturingOrders.
     */
    distinct?: ManufacturingOrderScalarFieldEnum | ManufacturingOrderScalarFieldEnum[]
  }

  /**
   * ManufacturingOrder findMany
   */
  export type ManufacturingOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturingOrder
     */
    select?: ManufacturingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufacturingOrderInclude<ExtArgs> | null
    /**
     * Filter, which ManufacturingOrders to fetch.
     */
    where?: ManufacturingOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManufacturingOrders to fetch.
     */
    orderBy?: ManufacturingOrderOrderByWithRelationInput | ManufacturingOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ManufacturingOrders.
     */
    cursor?: ManufacturingOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManufacturingOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManufacturingOrders.
     */
    skip?: number
    distinct?: ManufacturingOrderScalarFieldEnum | ManufacturingOrderScalarFieldEnum[]
  }

  /**
   * ManufacturingOrder create
   */
  export type ManufacturingOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturingOrder
     */
    select?: ManufacturingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufacturingOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a ManufacturingOrder.
     */
    data: XOR<ManufacturingOrderCreateInput, ManufacturingOrderUncheckedCreateInput>
  }

  /**
   * ManufacturingOrder createMany
   */
  export type ManufacturingOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ManufacturingOrders.
     */
    data: ManufacturingOrderCreateManyInput | ManufacturingOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ManufacturingOrder createManyAndReturn
   */
  export type ManufacturingOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturingOrder
     */
    select?: ManufacturingOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ManufacturingOrders.
     */
    data: ManufacturingOrderCreateManyInput | ManufacturingOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufacturingOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ManufacturingOrder update
   */
  export type ManufacturingOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturingOrder
     */
    select?: ManufacturingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufacturingOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a ManufacturingOrder.
     */
    data: XOR<ManufacturingOrderUpdateInput, ManufacturingOrderUncheckedUpdateInput>
    /**
     * Choose, which ManufacturingOrder to update.
     */
    where: ManufacturingOrderWhereUniqueInput
  }

  /**
   * ManufacturingOrder updateMany
   */
  export type ManufacturingOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ManufacturingOrders.
     */
    data: XOR<ManufacturingOrderUpdateManyMutationInput, ManufacturingOrderUncheckedUpdateManyInput>
    /**
     * Filter which ManufacturingOrders to update
     */
    where?: ManufacturingOrderWhereInput
  }

  /**
   * ManufacturingOrder upsert
   */
  export type ManufacturingOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturingOrder
     */
    select?: ManufacturingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufacturingOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the ManufacturingOrder to update in case it exists.
     */
    where: ManufacturingOrderWhereUniqueInput
    /**
     * In case the ManufacturingOrder found by the `where` argument doesn't exist, create a new ManufacturingOrder with this data.
     */
    create: XOR<ManufacturingOrderCreateInput, ManufacturingOrderUncheckedCreateInput>
    /**
     * In case the ManufacturingOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ManufacturingOrderUpdateInput, ManufacturingOrderUncheckedUpdateInput>
  }

  /**
   * ManufacturingOrder delete
   */
  export type ManufacturingOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturingOrder
     */
    select?: ManufacturingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufacturingOrderInclude<ExtArgs> | null
    /**
     * Filter which ManufacturingOrder to delete.
     */
    where: ManufacturingOrderWhereUniqueInput
  }

  /**
   * ManufacturingOrder deleteMany
   */
  export type ManufacturingOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ManufacturingOrders to delete
     */
    where?: ManufacturingOrderWhereInput
  }

  /**
   * ManufacturingOrder.assignedTo
   */
  export type ManufacturingOrder$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ManufacturingOrder.workOrders
   */
  export type ManufacturingOrder$workOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    cursor?: WorkOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * ManufacturingOrder without action
   */
  export type ManufacturingOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturingOrder
     */
    select?: ManufacturingOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufacturingOrderInclude<ExtArgs> | null
  }


  /**
   * Model WorkCenter
   */

  export type AggregateWorkCenter = {
    _count: WorkCenterCountAggregateOutputType | null
    _avg: WorkCenterAvgAggregateOutputType | null
    _sum: WorkCenterSumAggregateOutputType | null
    _min: WorkCenterMinAggregateOutputType | null
    _max: WorkCenterMaxAggregateOutputType | null
  }

  export type WorkCenterAvgAggregateOutputType = {
    capacity: number | null
    hourlyCost: number | null
    utilization: number | null
    efficiency: number | null
    downtime: number | null
    totalHours: number | null
    productiveHours: number | null
  }

  export type WorkCenterSumAggregateOutputType = {
    capacity: number | null
    hourlyCost: number | null
    utilization: number | null
    efficiency: number | null
    downtime: number | null
    totalHours: number | null
    productiveHours: number | null
  }

  export type WorkCenterMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    location: string | null
    status: $Enums.WorkCenterStatus | null
    capacity: number | null
    hourlyCost: number | null
    utilization: number | null
    efficiency: number | null
    downtime: number | null
    totalHours: number | null
    productiveHours: number | null
    maintenanceScheduled: Date | null
    lastMaintenance: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkCenterMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    location: string | null
    status: $Enums.WorkCenterStatus | null
    capacity: number | null
    hourlyCost: number | null
    utilization: number | null
    efficiency: number | null
    downtime: number | null
    totalHours: number | null
    productiveHours: number | null
    maintenanceScheduled: Date | null
    lastMaintenance: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkCenterCountAggregateOutputType = {
    id: number
    name: number
    type: number
    location: number
    status: number
    capacity: number
    hourlyCost: number
    utilization: number
    efficiency: number
    downtime: number
    totalHours: number
    productiveHours: number
    specifications: number
    maintenanceScheduled: number
    lastMaintenance: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkCenterAvgAggregateInputType = {
    capacity?: true
    hourlyCost?: true
    utilization?: true
    efficiency?: true
    downtime?: true
    totalHours?: true
    productiveHours?: true
  }

  export type WorkCenterSumAggregateInputType = {
    capacity?: true
    hourlyCost?: true
    utilization?: true
    efficiency?: true
    downtime?: true
    totalHours?: true
    productiveHours?: true
  }

  export type WorkCenterMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    location?: true
    status?: true
    capacity?: true
    hourlyCost?: true
    utilization?: true
    efficiency?: true
    downtime?: true
    totalHours?: true
    productiveHours?: true
    maintenanceScheduled?: true
    lastMaintenance?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkCenterMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    location?: true
    status?: true
    capacity?: true
    hourlyCost?: true
    utilization?: true
    efficiency?: true
    downtime?: true
    totalHours?: true
    productiveHours?: true
    maintenanceScheduled?: true
    lastMaintenance?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkCenterCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    location?: true
    status?: true
    capacity?: true
    hourlyCost?: true
    utilization?: true
    efficiency?: true
    downtime?: true
    totalHours?: true
    productiveHours?: true
    specifications?: true
    maintenanceScheduled?: true
    lastMaintenance?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkCenterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkCenter to aggregate.
     */
    where?: WorkCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkCenters to fetch.
     */
    orderBy?: WorkCenterOrderByWithRelationInput | WorkCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkCenters
    **/
    _count?: true | WorkCenterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkCenterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkCenterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkCenterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkCenterMaxAggregateInputType
  }

  export type GetWorkCenterAggregateType<T extends WorkCenterAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkCenter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkCenter[P]>
      : GetScalarType<T[P], AggregateWorkCenter[P]>
  }




  export type WorkCenterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkCenterWhereInput
    orderBy?: WorkCenterOrderByWithAggregationInput | WorkCenterOrderByWithAggregationInput[]
    by: WorkCenterScalarFieldEnum[] | WorkCenterScalarFieldEnum
    having?: WorkCenterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkCenterCountAggregateInputType | true
    _avg?: WorkCenterAvgAggregateInputType
    _sum?: WorkCenterSumAggregateInputType
    _min?: WorkCenterMinAggregateInputType
    _max?: WorkCenterMaxAggregateInputType
  }

  export type WorkCenterGroupByOutputType = {
    id: string
    name: string
    type: string
    location: string
    status: $Enums.WorkCenterStatus
    capacity: number
    hourlyCost: number
    utilization: number
    efficiency: number
    downtime: number
    totalHours: number
    productiveHours: number
    specifications: JsonValue | null
    maintenanceScheduled: Date | null
    lastMaintenance: Date | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: WorkCenterCountAggregateOutputType | null
    _avg: WorkCenterAvgAggregateOutputType | null
    _sum: WorkCenterSumAggregateOutputType | null
    _min: WorkCenterMinAggregateOutputType | null
    _max: WorkCenterMaxAggregateOutputType | null
  }

  type GetWorkCenterGroupByPayload<T extends WorkCenterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkCenterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkCenterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkCenterGroupByOutputType[P]>
            : GetScalarType<T[P], WorkCenterGroupByOutputType[P]>
        }
      >
    >


  export type WorkCenterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    location?: boolean
    status?: boolean
    capacity?: boolean
    hourlyCost?: boolean
    utilization?: boolean
    efficiency?: boolean
    downtime?: boolean
    totalHours?: boolean
    productiveHours?: boolean
    specifications?: boolean
    maintenanceScheduled?: boolean
    lastMaintenance?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workOrders?: boolean | WorkCenter$workOrdersArgs<ExtArgs>
    _count?: boolean | WorkCenterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workCenter"]>

  export type WorkCenterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    location?: boolean
    status?: boolean
    capacity?: boolean
    hourlyCost?: boolean
    utilization?: boolean
    efficiency?: boolean
    downtime?: boolean
    totalHours?: boolean
    productiveHours?: boolean
    specifications?: boolean
    maintenanceScheduled?: boolean
    lastMaintenance?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["workCenter"]>

  export type WorkCenterSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    location?: boolean
    status?: boolean
    capacity?: boolean
    hourlyCost?: boolean
    utilization?: boolean
    efficiency?: boolean
    downtime?: boolean
    totalHours?: boolean
    productiveHours?: boolean
    specifications?: boolean
    maintenanceScheduled?: boolean
    lastMaintenance?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkCenterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrders?: boolean | WorkCenter$workOrdersArgs<ExtArgs>
    _count?: boolean | WorkCenterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkCenterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WorkCenterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkCenter"
    objects: {
      workOrders: Prisma.$WorkOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      location: string
      status: $Enums.WorkCenterStatus
      capacity: number
      hourlyCost: number
      utilization: number
      efficiency: number
      downtime: number
      totalHours: number
      productiveHours: number
      specifications: Prisma.JsonValue | null
      maintenanceScheduled: Date | null
      lastMaintenance: Date | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workCenter"]>
    composites: {}
  }

  type WorkCenterGetPayload<S extends boolean | null | undefined | WorkCenterDefaultArgs> = $Result.GetResult<Prisma.$WorkCenterPayload, S>

  type WorkCenterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkCenterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkCenterCountAggregateInputType | true
    }

  export interface WorkCenterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkCenter'], meta: { name: 'WorkCenter' } }
    /**
     * Find zero or one WorkCenter that matches the filter.
     * @param {WorkCenterFindUniqueArgs} args - Arguments to find a WorkCenter
     * @example
     * // Get one WorkCenter
     * const workCenter = await prisma.workCenter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkCenterFindUniqueArgs>(args: SelectSubset<T, WorkCenterFindUniqueArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkCenter that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkCenterFindUniqueOrThrowArgs} args - Arguments to find a WorkCenter
     * @example
     * // Get one WorkCenter
     * const workCenter = await prisma.workCenter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkCenterFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkCenterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkCenter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCenterFindFirstArgs} args - Arguments to find a WorkCenter
     * @example
     * // Get one WorkCenter
     * const workCenter = await prisma.workCenter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkCenterFindFirstArgs>(args?: SelectSubset<T, WorkCenterFindFirstArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkCenter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCenterFindFirstOrThrowArgs} args - Arguments to find a WorkCenter
     * @example
     * // Get one WorkCenter
     * const workCenter = await prisma.workCenter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkCenterFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkCenterFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkCenters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCenterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkCenters
     * const workCenters = await prisma.workCenter.findMany()
     * 
     * // Get first 10 WorkCenters
     * const workCenters = await prisma.workCenter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workCenterWithIdOnly = await prisma.workCenter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkCenterFindManyArgs>(args?: SelectSubset<T, WorkCenterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkCenter.
     * @param {WorkCenterCreateArgs} args - Arguments to create a WorkCenter.
     * @example
     * // Create one WorkCenter
     * const WorkCenter = await prisma.workCenter.create({
     *   data: {
     *     // ... data to create a WorkCenter
     *   }
     * })
     * 
     */
    create<T extends WorkCenterCreateArgs>(args: SelectSubset<T, WorkCenterCreateArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkCenters.
     * @param {WorkCenterCreateManyArgs} args - Arguments to create many WorkCenters.
     * @example
     * // Create many WorkCenters
     * const workCenter = await prisma.workCenter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkCenterCreateManyArgs>(args?: SelectSubset<T, WorkCenterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkCenters and returns the data saved in the database.
     * @param {WorkCenterCreateManyAndReturnArgs} args - Arguments to create many WorkCenters.
     * @example
     * // Create many WorkCenters
     * const workCenter = await prisma.workCenter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkCenters and only return the `id`
     * const workCenterWithIdOnly = await prisma.workCenter.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkCenterCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkCenterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkCenter.
     * @param {WorkCenterDeleteArgs} args - Arguments to delete one WorkCenter.
     * @example
     * // Delete one WorkCenter
     * const WorkCenter = await prisma.workCenter.delete({
     *   where: {
     *     // ... filter to delete one WorkCenter
     *   }
     * })
     * 
     */
    delete<T extends WorkCenterDeleteArgs>(args: SelectSubset<T, WorkCenterDeleteArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkCenter.
     * @param {WorkCenterUpdateArgs} args - Arguments to update one WorkCenter.
     * @example
     * // Update one WorkCenter
     * const workCenter = await prisma.workCenter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkCenterUpdateArgs>(args: SelectSubset<T, WorkCenterUpdateArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkCenters.
     * @param {WorkCenterDeleteManyArgs} args - Arguments to filter WorkCenters to delete.
     * @example
     * // Delete a few WorkCenters
     * const { count } = await prisma.workCenter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkCenterDeleteManyArgs>(args?: SelectSubset<T, WorkCenterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkCenters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCenterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkCenters
     * const workCenter = await prisma.workCenter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkCenterUpdateManyArgs>(args: SelectSubset<T, WorkCenterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkCenter.
     * @param {WorkCenterUpsertArgs} args - Arguments to update or create a WorkCenter.
     * @example
     * // Update or create a WorkCenter
     * const workCenter = await prisma.workCenter.upsert({
     *   create: {
     *     // ... data to create a WorkCenter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkCenter we want to update
     *   }
     * })
     */
    upsert<T extends WorkCenterUpsertArgs>(args: SelectSubset<T, WorkCenterUpsertArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkCenters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCenterCountArgs} args - Arguments to filter WorkCenters to count.
     * @example
     * // Count the number of WorkCenters
     * const count = await prisma.workCenter.count({
     *   where: {
     *     // ... the filter for the WorkCenters we want to count
     *   }
     * })
    **/
    count<T extends WorkCenterCountArgs>(
      args?: Subset<T, WorkCenterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkCenterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkCenter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCenterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkCenterAggregateArgs>(args: Subset<T, WorkCenterAggregateArgs>): Prisma.PrismaPromise<GetWorkCenterAggregateType<T>>

    /**
     * Group by WorkCenter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCenterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkCenterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkCenterGroupByArgs['orderBy'] }
        : { orderBy?: WorkCenterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkCenterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkCenterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkCenter model
   */
  readonly fields: WorkCenterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkCenter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkCenterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workOrders<T extends WorkCenter$workOrdersArgs<ExtArgs> = {}>(args?: Subset<T, WorkCenter$workOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkCenter model
   */ 
  interface WorkCenterFieldRefs {
    readonly id: FieldRef<"WorkCenter", 'String'>
    readonly name: FieldRef<"WorkCenter", 'String'>
    readonly type: FieldRef<"WorkCenter", 'String'>
    readonly location: FieldRef<"WorkCenter", 'String'>
    readonly status: FieldRef<"WorkCenter", 'WorkCenterStatus'>
    readonly capacity: FieldRef<"WorkCenter", 'Float'>
    readonly hourlyCost: FieldRef<"WorkCenter", 'Float'>
    readonly utilization: FieldRef<"WorkCenter", 'Float'>
    readonly efficiency: FieldRef<"WorkCenter", 'Float'>
    readonly downtime: FieldRef<"WorkCenter", 'Float'>
    readonly totalHours: FieldRef<"WorkCenter", 'Float'>
    readonly productiveHours: FieldRef<"WorkCenter", 'Float'>
    readonly specifications: FieldRef<"WorkCenter", 'Json'>
    readonly maintenanceScheduled: FieldRef<"WorkCenter", 'DateTime'>
    readonly lastMaintenance: FieldRef<"WorkCenter", 'DateTime'>
    readonly isActive: FieldRef<"WorkCenter", 'Boolean'>
    readonly createdAt: FieldRef<"WorkCenter", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkCenter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkCenter findUnique
   */
  export type WorkCenterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * Filter, which WorkCenter to fetch.
     */
    where: WorkCenterWhereUniqueInput
  }

  /**
   * WorkCenter findUniqueOrThrow
   */
  export type WorkCenterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * Filter, which WorkCenter to fetch.
     */
    where: WorkCenterWhereUniqueInput
  }

  /**
   * WorkCenter findFirst
   */
  export type WorkCenterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * Filter, which WorkCenter to fetch.
     */
    where?: WorkCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkCenters to fetch.
     */
    orderBy?: WorkCenterOrderByWithRelationInput | WorkCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkCenters.
     */
    cursor?: WorkCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkCenters.
     */
    distinct?: WorkCenterScalarFieldEnum | WorkCenterScalarFieldEnum[]
  }

  /**
   * WorkCenter findFirstOrThrow
   */
  export type WorkCenterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * Filter, which WorkCenter to fetch.
     */
    where?: WorkCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkCenters to fetch.
     */
    orderBy?: WorkCenterOrderByWithRelationInput | WorkCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkCenters.
     */
    cursor?: WorkCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkCenters.
     */
    distinct?: WorkCenterScalarFieldEnum | WorkCenterScalarFieldEnum[]
  }

  /**
   * WorkCenter findMany
   */
  export type WorkCenterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * Filter, which WorkCenters to fetch.
     */
    where?: WorkCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkCenters to fetch.
     */
    orderBy?: WorkCenterOrderByWithRelationInput | WorkCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkCenters.
     */
    cursor?: WorkCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkCenters.
     */
    skip?: number
    distinct?: WorkCenterScalarFieldEnum | WorkCenterScalarFieldEnum[]
  }

  /**
   * WorkCenter create
   */
  export type WorkCenterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkCenter.
     */
    data: XOR<WorkCenterCreateInput, WorkCenterUncheckedCreateInput>
  }

  /**
   * WorkCenter createMany
   */
  export type WorkCenterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkCenters.
     */
    data: WorkCenterCreateManyInput | WorkCenterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkCenter createManyAndReturn
   */
  export type WorkCenterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkCenters.
     */
    data: WorkCenterCreateManyInput | WorkCenterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkCenter update
   */
  export type WorkCenterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkCenter.
     */
    data: XOR<WorkCenterUpdateInput, WorkCenterUncheckedUpdateInput>
    /**
     * Choose, which WorkCenter to update.
     */
    where: WorkCenterWhereUniqueInput
  }

  /**
   * WorkCenter updateMany
   */
  export type WorkCenterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkCenters.
     */
    data: XOR<WorkCenterUpdateManyMutationInput, WorkCenterUncheckedUpdateManyInput>
    /**
     * Filter which WorkCenters to update
     */
    where?: WorkCenterWhereInput
  }

  /**
   * WorkCenter upsert
   */
  export type WorkCenterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkCenter to update in case it exists.
     */
    where: WorkCenterWhereUniqueInput
    /**
     * In case the WorkCenter found by the `where` argument doesn't exist, create a new WorkCenter with this data.
     */
    create: XOR<WorkCenterCreateInput, WorkCenterUncheckedCreateInput>
    /**
     * In case the WorkCenter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkCenterUpdateInput, WorkCenterUncheckedUpdateInput>
  }

  /**
   * WorkCenter delete
   */
  export type WorkCenterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * Filter which WorkCenter to delete.
     */
    where: WorkCenterWhereUniqueInput
  }

  /**
   * WorkCenter deleteMany
   */
  export type WorkCenterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkCenters to delete
     */
    where?: WorkCenterWhereInput
  }

  /**
   * WorkCenter.workOrders
   */
  export type WorkCenter$workOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    cursor?: WorkOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * WorkCenter without action
   */
  export type WorkCenterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
  }


  /**
   * Model WorkOrder
   */

  export type AggregateWorkOrder = {
    _count: WorkOrderCountAggregateOutputType | null
    _avg: WorkOrderAvgAggregateOutputType | null
    _sum: WorkOrderSumAggregateOutputType | null
    _min: WorkOrderMinAggregateOutputType | null
    _max: WorkOrderMaxAggregateOutputType | null
  }

  export type WorkOrderAvgAggregateOutputType = {
    estimatedHours: number | null
    actualHours: number | null
    progress: number | null
  }

  export type WorkOrderSumAggregateOutputType = {
    estimatedHours: number | null
    actualHours: number | null
    progress: number | null
  }

  export type WorkOrderMinAggregateOutputType = {
    id: string | null
    orderNumber: string | null
    title: string | null
    description: string | null
    manufacturingOrderId: string | null
    workCenterId: string | null
    assignedToId: string | null
    status: $Enums.WorkOrderStatus | null
    priority: $Enums.Priority | null
    estimatedHours: number | null
    actualHours: number | null
    progress: number | null
    startedAt: Date | null
    pausedAt: Date | null
    completedAt: Date | null
    dueDate: Date | null
    pausedReason: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkOrderMaxAggregateOutputType = {
    id: string | null
    orderNumber: string | null
    title: string | null
    description: string | null
    manufacturingOrderId: string | null
    workCenterId: string | null
    assignedToId: string | null
    status: $Enums.WorkOrderStatus | null
    priority: $Enums.Priority | null
    estimatedHours: number | null
    actualHours: number | null
    progress: number | null
    startedAt: Date | null
    pausedAt: Date | null
    completedAt: Date | null
    dueDate: Date | null
    pausedReason: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkOrderCountAggregateOutputType = {
    id: number
    orderNumber: number
    title: number
    description: number
    manufacturingOrderId: number
    workCenterId: number
    assignedToId: number
    status: number
    priority: number
    estimatedHours: number
    actualHours: number
    progress: number
    startedAt: number
    pausedAt: number
    completedAt: number
    dueDate: number
    pausedReason: number
    comments: number
    tags: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkOrderAvgAggregateInputType = {
    estimatedHours?: true
    actualHours?: true
    progress?: true
  }

  export type WorkOrderSumAggregateInputType = {
    estimatedHours?: true
    actualHours?: true
    progress?: true
  }

  export type WorkOrderMinAggregateInputType = {
    id?: true
    orderNumber?: true
    title?: true
    description?: true
    manufacturingOrderId?: true
    workCenterId?: true
    assignedToId?: true
    status?: true
    priority?: true
    estimatedHours?: true
    actualHours?: true
    progress?: true
    startedAt?: true
    pausedAt?: true
    completedAt?: true
    dueDate?: true
    pausedReason?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkOrderMaxAggregateInputType = {
    id?: true
    orderNumber?: true
    title?: true
    description?: true
    manufacturingOrderId?: true
    workCenterId?: true
    assignedToId?: true
    status?: true
    priority?: true
    estimatedHours?: true
    actualHours?: true
    progress?: true
    startedAt?: true
    pausedAt?: true
    completedAt?: true
    dueDate?: true
    pausedReason?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkOrderCountAggregateInputType = {
    id?: true
    orderNumber?: true
    title?: true
    description?: true
    manufacturingOrderId?: true
    workCenterId?: true
    assignedToId?: true
    status?: true
    priority?: true
    estimatedHours?: true
    actualHours?: true
    progress?: true
    startedAt?: true
    pausedAt?: true
    completedAt?: true
    dueDate?: true
    pausedReason?: true
    comments?: true
    tags?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrder to aggregate.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkOrders
    **/
    _count?: true | WorkOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkOrderMaxAggregateInputType
  }

  export type GetWorkOrderAggregateType<T extends WorkOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkOrder[P]>
      : GetScalarType<T[P], AggregateWorkOrder[P]>
  }




  export type WorkOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithAggregationInput | WorkOrderOrderByWithAggregationInput[]
    by: WorkOrderScalarFieldEnum[] | WorkOrderScalarFieldEnum
    having?: WorkOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkOrderCountAggregateInputType | true
    _avg?: WorkOrderAvgAggregateInputType
    _sum?: WorkOrderSumAggregateInputType
    _min?: WorkOrderMinAggregateInputType
    _max?: WorkOrderMaxAggregateInputType
  }

  export type WorkOrderGroupByOutputType = {
    id: string
    orderNumber: string
    title: string
    description: string | null
    manufacturingOrderId: string
    workCenterId: string
    assignedToId: string | null
    status: $Enums.WorkOrderStatus
    priority: $Enums.Priority
    estimatedHours: number
    actualHours: number | null
    progress: number
    startedAt: Date | null
    pausedAt: Date | null
    completedAt: Date | null
    dueDate: Date
    pausedReason: string | null
    comments: string | null
    tags: string[]
    createdAt: Date
    updatedAt: Date
    _count: WorkOrderCountAggregateOutputType | null
    _avg: WorkOrderAvgAggregateOutputType | null
    _sum: WorkOrderSumAggregateOutputType | null
    _min: WorkOrderMinAggregateOutputType | null
    _max: WorkOrderMaxAggregateOutputType | null
  }

  type GetWorkOrderGroupByPayload<T extends WorkOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkOrderGroupByOutputType[P]>
            : GetScalarType<T[P], WorkOrderGroupByOutputType[P]>
        }
      >
    >


  export type WorkOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    title?: boolean
    description?: boolean
    manufacturingOrderId?: boolean
    workCenterId?: boolean
    assignedToId?: boolean
    status?: boolean
    priority?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    progress?: boolean
    startedAt?: boolean
    pausedAt?: boolean
    completedAt?: boolean
    dueDate?: boolean
    pausedReason?: boolean
    comments?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    manufacturingOrder?: boolean | ManufacturingOrderDefaultArgs<ExtArgs>
    workCenter?: boolean | WorkCenterDefaultArgs<ExtArgs>
    assignedTo?: boolean | WorkOrder$assignedToArgs<ExtArgs>
  }, ExtArgs["result"]["workOrder"]>

  export type WorkOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    title?: boolean
    description?: boolean
    manufacturingOrderId?: boolean
    workCenterId?: boolean
    assignedToId?: boolean
    status?: boolean
    priority?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    progress?: boolean
    startedAt?: boolean
    pausedAt?: boolean
    completedAt?: boolean
    dueDate?: boolean
    pausedReason?: boolean
    comments?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    manufacturingOrder?: boolean | ManufacturingOrderDefaultArgs<ExtArgs>
    workCenter?: boolean | WorkCenterDefaultArgs<ExtArgs>
    assignedTo?: boolean | WorkOrder$assignedToArgs<ExtArgs>
  }, ExtArgs["result"]["workOrder"]>

  export type WorkOrderSelectScalar = {
    id?: boolean
    orderNumber?: boolean
    title?: boolean
    description?: boolean
    manufacturingOrderId?: boolean
    workCenterId?: boolean
    assignedToId?: boolean
    status?: boolean
    priority?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    progress?: boolean
    startedAt?: boolean
    pausedAt?: boolean
    completedAt?: boolean
    dueDate?: boolean
    pausedReason?: boolean
    comments?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manufacturingOrder?: boolean | ManufacturingOrderDefaultArgs<ExtArgs>
    workCenter?: boolean | WorkCenterDefaultArgs<ExtArgs>
    assignedTo?: boolean | WorkOrder$assignedToArgs<ExtArgs>
  }
  export type WorkOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manufacturingOrder?: boolean | ManufacturingOrderDefaultArgs<ExtArgs>
    workCenter?: boolean | WorkCenterDefaultArgs<ExtArgs>
    assignedTo?: boolean | WorkOrder$assignedToArgs<ExtArgs>
  }

  export type $WorkOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkOrder"
    objects: {
      manufacturingOrder: Prisma.$ManufacturingOrderPayload<ExtArgs>
      workCenter: Prisma.$WorkCenterPayload<ExtArgs>
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderNumber: string
      title: string
      description: string | null
      manufacturingOrderId: string
      workCenterId: string
      assignedToId: string | null
      status: $Enums.WorkOrderStatus
      priority: $Enums.Priority
      estimatedHours: number
      actualHours: number | null
      progress: number
      startedAt: Date | null
      pausedAt: Date | null
      completedAt: Date | null
      dueDate: Date
      pausedReason: string | null
      comments: string | null
      tags: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workOrder"]>
    composites: {}
  }

  type WorkOrderGetPayload<S extends boolean | null | undefined | WorkOrderDefaultArgs> = $Result.GetResult<Prisma.$WorkOrderPayload, S>

  type WorkOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkOrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkOrderCountAggregateInputType | true
    }

  export interface WorkOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkOrder'], meta: { name: 'WorkOrder' } }
    /**
     * Find zero or one WorkOrder that matches the filter.
     * @param {WorkOrderFindUniqueArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkOrderFindUniqueArgs>(args: SelectSubset<T, WorkOrderFindUniqueArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkOrder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkOrderFindUniqueOrThrowArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderFindFirstArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkOrderFindFirstArgs>(args?: SelectSubset<T, WorkOrderFindFirstArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderFindFirstOrThrowArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkOrders
     * const workOrders = await prisma.workOrder.findMany()
     * 
     * // Get first 10 WorkOrders
     * const workOrders = await prisma.workOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workOrderWithIdOnly = await prisma.workOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkOrderFindManyArgs>(args?: SelectSubset<T, WorkOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkOrder.
     * @param {WorkOrderCreateArgs} args - Arguments to create a WorkOrder.
     * @example
     * // Create one WorkOrder
     * const WorkOrder = await prisma.workOrder.create({
     *   data: {
     *     // ... data to create a WorkOrder
     *   }
     * })
     * 
     */
    create<T extends WorkOrderCreateArgs>(args: SelectSubset<T, WorkOrderCreateArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkOrders.
     * @param {WorkOrderCreateManyArgs} args - Arguments to create many WorkOrders.
     * @example
     * // Create many WorkOrders
     * const workOrder = await prisma.workOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkOrderCreateManyArgs>(args?: SelectSubset<T, WorkOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkOrders and returns the data saved in the database.
     * @param {WorkOrderCreateManyAndReturnArgs} args - Arguments to create many WorkOrders.
     * @example
     * // Create many WorkOrders
     * const workOrder = await prisma.workOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkOrders and only return the `id`
     * const workOrderWithIdOnly = await prisma.workOrder.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkOrder.
     * @param {WorkOrderDeleteArgs} args - Arguments to delete one WorkOrder.
     * @example
     * // Delete one WorkOrder
     * const WorkOrder = await prisma.workOrder.delete({
     *   where: {
     *     // ... filter to delete one WorkOrder
     *   }
     * })
     * 
     */
    delete<T extends WorkOrderDeleteArgs>(args: SelectSubset<T, WorkOrderDeleteArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkOrder.
     * @param {WorkOrderUpdateArgs} args - Arguments to update one WorkOrder.
     * @example
     * // Update one WorkOrder
     * const workOrder = await prisma.workOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkOrderUpdateArgs>(args: SelectSubset<T, WorkOrderUpdateArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkOrders.
     * @param {WorkOrderDeleteManyArgs} args - Arguments to filter WorkOrders to delete.
     * @example
     * // Delete a few WorkOrders
     * const { count } = await prisma.workOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkOrderDeleteManyArgs>(args?: SelectSubset<T, WorkOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkOrders
     * const workOrder = await prisma.workOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkOrderUpdateManyArgs>(args: SelectSubset<T, WorkOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkOrder.
     * @param {WorkOrderUpsertArgs} args - Arguments to update or create a WorkOrder.
     * @example
     * // Update or create a WorkOrder
     * const workOrder = await prisma.workOrder.upsert({
     *   create: {
     *     // ... data to create a WorkOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkOrder we want to update
     *   }
     * })
     */
    upsert<T extends WorkOrderUpsertArgs>(args: SelectSubset<T, WorkOrderUpsertArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderCountArgs} args - Arguments to filter WorkOrders to count.
     * @example
     * // Count the number of WorkOrders
     * const count = await prisma.workOrder.count({
     *   where: {
     *     // ... the filter for the WorkOrders we want to count
     *   }
     * })
    **/
    count<T extends WorkOrderCountArgs>(
      args?: Subset<T, WorkOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkOrderAggregateArgs>(args: Subset<T, WorkOrderAggregateArgs>): Prisma.PrismaPromise<GetWorkOrderAggregateType<T>>

    /**
     * Group by WorkOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkOrderGroupByArgs['orderBy'] }
        : { orderBy?: WorkOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkOrder model
   */
  readonly fields: WorkOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    manufacturingOrder<T extends ManufacturingOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ManufacturingOrderDefaultArgs<ExtArgs>>): Prisma__ManufacturingOrderClient<$Result.GetResult<Prisma.$ManufacturingOrderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    workCenter<T extends WorkCenterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkCenterDefaultArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignedTo<T extends WorkOrder$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrder$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkOrder model
   */ 
  interface WorkOrderFieldRefs {
    readonly id: FieldRef<"WorkOrder", 'String'>
    readonly orderNumber: FieldRef<"WorkOrder", 'String'>
    readonly title: FieldRef<"WorkOrder", 'String'>
    readonly description: FieldRef<"WorkOrder", 'String'>
    readonly manufacturingOrderId: FieldRef<"WorkOrder", 'String'>
    readonly workCenterId: FieldRef<"WorkOrder", 'String'>
    readonly assignedToId: FieldRef<"WorkOrder", 'String'>
    readonly status: FieldRef<"WorkOrder", 'WorkOrderStatus'>
    readonly priority: FieldRef<"WorkOrder", 'Priority'>
    readonly estimatedHours: FieldRef<"WorkOrder", 'Float'>
    readonly actualHours: FieldRef<"WorkOrder", 'Float'>
    readonly progress: FieldRef<"WorkOrder", 'Float'>
    readonly startedAt: FieldRef<"WorkOrder", 'DateTime'>
    readonly pausedAt: FieldRef<"WorkOrder", 'DateTime'>
    readonly completedAt: FieldRef<"WorkOrder", 'DateTime'>
    readonly dueDate: FieldRef<"WorkOrder", 'DateTime'>
    readonly pausedReason: FieldRef<"WorkOrder", 'String'>
    readonly comments: FieldRef<"WorkOrder", 'String'>
    readonly tags: FieldRef<"WorkOrder", 'String[]'>
    readonly createdAt: FieldRef<"WorkOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkOrder findUnique
   */
  export type WorkOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder findUniqueOrThrow
   */
  export type WorkOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder findFirst
   */
  export type WorkOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrders.
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrders.
     */
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * WorkOrder findFirstOrThrow
   */
  export type WorkOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrders.
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrders.
     */
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * WorkOrder findMany
   */
  export type WorkOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrders to fetch.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkOrders.
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * WorkOrder create
   */
  export type WorkOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkOrder.
     */
    data: XOR<WorkOrderCreateInput, WorkOrderUncheckedCreateInput>
  }

  /**
   * WorkOrder createMany
   */
  export type WorkOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkOrders.
     */
    data: WorkOrderCreateManyInput | WorkOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkOrder createManyAndReturn
   */
  export type WorkOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkOrders.
     */
    data: WorkOrderCreateManyInput | WorkOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrder update
   */
  export type WorkOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkOrder.
     */
    data: XOR<WorkOrderUpdateInput, WorkOrderUncheckedUpdateInput>
    /**
     * Choose, which WorkOrder to update.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder updateMany
   */
  export type WorkOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkOrders.
     */
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrders to update
     */
    where?: WorkOrderWhereInput
  }

  /**
   * WorkOrder upsert
   */
  export type WorkOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkOrder to update in case it exists.
     */
    where: WorkOrderWhereUniqueInput
    /**
     * In case the WorkOrder found by the `where` argument doesn't exist, create a new WorkOrder with this data.
     */
    create: XOR<WorkOrderCreateInput, WorkOrderUncheckedCreateInput>
    /**
     * In case the WorkOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkOrderUpdateInput, WorkOrderUncheckedUpdateInput>
  }

  /**
   * WorkOrder delete
   */
  export type WorkOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter which WorkOrder to delete.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder deleteMany
   */
  export type WorkOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrders to delete
     */
    where?: WorkOrderWhereInput
  }

  /**
   * WorkOrder.assignedTo
   */
  export type WorkOrder$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * WorkOrder without action
   */
  export type WorkOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
  }


  /**
   * Model StockItem
   */

  export type AggregateStockItem = {
    _count: StockItemCountAggregateOutputType | null
    _avg: StockItemAvgAggregateOutputType | null
    _sum: StockItemSumAggregateOutputType | null
    _min: StockItemMinAggregateOutputType | null
    _max: StockItemMaxAggregateOutputType | null
  }

  export type StockItemAvgAggregateOutputType = {
    currentStock: number | null
    minStock: number | null
    maxStock: number | null
    unitCost: number | null
    totalValue: number | null
  }

  export type StockItemSumAggregateOutputType = {
    currentStock: number | null
    minStock: number | null
    maxStock: number | null
    unitCost: number | null
    totalValue: number | null
  }

  export type StockItemMinAggregateOutputType = {
    id: string | null
    productId: string | null
    currentStock: number | null
    minStock: number | null
    maxStock: number | null
    unit: string | null
    location: string | null
    unitCost: number | null
    totalValue: number | null
    lastMovement: Date | null
    supplier: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StockItemMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    currentStock: number | null
    minStock: number | null
    maxStock: number | null
    unit: string | null
    location: string | null
    unitCost: number | null
    totalValue: number | null
    lastMovement: Date | null
    supplier: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StockItemCountAggregateOutputType = {
    id: number
    productId: number
    currentStock: number
    minStock: number
    maxStock: number
    unit: number
    location: number
    unitCost: number
    totalValue: number
    lastMovement: number
    supplier: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StockItemAvgAggregateInputType = {
    currentStock?: true
    minStock?: true
    maxStock?: true
    unitCost?: true
    totalValue?: true
  }

  export type StockItemSumAggregateInputType = {
    currentStock?: true
    minStock?: true
    maxStock?: true
    unitCost?: true
    totalValue?: true
  }

  export type StockItemMinAggregateInputType = {
    id?: true
    productId?: true
    currentStock?: true
    minStock?: true
    maxStock?: true
    unit?: true
    location?: true
    unitCost?: true
    totalValue?: true
    lastMovement?: true
    supplier?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StockItemMaxAggregateInputType = {
    id?: true
    productId?: true
    currentStock?: true
    minStock?: true
    maxStock?: true
    unit?: true
    location?: true
    unitCost?: true
    totalValue?: true
    lastMovement?: true
    supplier?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StockItemCountAggregateInputType = {
    id?: true
    productId?: true
    currentStock?: true
    minStock?: true
    maxStock?: true
    unit?: true
    location?: true
    unitCost?: true
    totalValue?: true
    lastMovement?: true
    supplier?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StockItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StockItem to aggregate.
     */
    where?: StockItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockItems to fetch.
     */
    orderBy?: StockItemOrderByWithRelationInput | StockItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StockItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StockItems
    **/
    _count?: true | StockItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StockItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StockItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockItemMaxAggregateInputType
  }

  export type GetStockItemAggregateType<T extends StockItemAggregateArgs> = {
        [P in keyof T & keyof AggregateStockItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStockItem[P]>
      : GetScalarType<T[P], AggregateStockItem[P]>
  }




  export type StockItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockItemWhereInput
    orderBy?: StockItemOrderByWithAggregationInput | StockItemOrderByWithAggregationInput[]
    by: StockItemScalarFieldEnum[] | StockItemScalarFieldEnum
    having?: StockItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockItemCountAggregateInputType | true
    _avg?: StockItemAvgAggregateInputType
    _sum?: StockItemSumAggregateInputType
    _min?: StockItemMinAggregateInputType
    _max?: StockItemMaxAggregateInputType
  }

  export type StockItemGroupByOutputType = {
    id: string
    productId: string
    currentStock: number
    minStock: number
    maxStock: number
    unit: string
    location: string
    unitCost: number | null
    totalValue: number | null
    lastMovement: Date | null
    supplier: string | null
    createdAt: Date
    updatedAt: Date
    _count: StockItemCountAggregateOutputType | null
    _avg: StockItemAvgAggregateOutputType | null
    _sum: StockItemSumAggregateOutputType | null
    _min: StockItemMinAggregateOutputType | null
    _max: StockItemMaxAggregateOutputType | null
  }

  type GetStockItemGroupByPayload<T extends StockItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StockItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockItemGroupByOutputType[P]>
            : GetScalarType<T[P], StockItemGroupByOutputType[P]>
        }
      >
    >


  export type StockItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    currentStock?: boolean
    minStock?: boolean
    maxStock?: boolean
    unit?: boolean
    location?: boolean
    unitCost?: boolean
    totalValue?: boolean
    lastMovement?: boolean
    supplier?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    movements?: boolean | StockItem$movementsArgs<ExtArgs>
    _count?: boolean | StockItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stockItem"]>

  export type StockItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    currentStock?: boolean
    minStock?: boolean
    maxStock?: boolean
    unit?: boolean
    location?: boolean
    unitCost?: boolean
    totalValue?: boolean
    lastMovement?: boolean
    supplier?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stockItem"]>

  export type StockItemSelectScalar = {
    id?: boolean
    productId?: boolean
    currentStock?: boolean
    minStock?: boolean
    maxStock?: boolean
    unit?: boolean
    location?: boolean
    unitCost?: boolean
    totalValue?: boolean
    lastMovement?: boolean
    supplier?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StockItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    movements?: boolean | StockItem$movementsArgs<ExtArgs>
    _count?: boolean | StockItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StockItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $StockItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StockItem"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      movements: Prisma.$StockMovementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      currentStock: number
      minStock: number
      maxStock: number
      unit: string
      location: string
      unitCost: number | null
      totalValue: number | null
      lastMovement: Date | null
      supplier: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["stockItem"]>
    composites: {}
  }

  type StockItemGetPayload<S extends boolean | null | undefined | StockItemDefaultArgs> = $Result.GetResult<Prisma.$StockItemPayload, S>

  type StockItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StockItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StockItemCountAggregateInputType | true
    }

  export interface StockItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StockItem'], meta: { name: 'StockItem' } }
    /**
     * Find zero or one StockItem that matches the filter.
     * @param {StockItemFindUniqueArgs} args - Arguments to find a StockItem
     * @example
     * // Get one StockItem
     * const stockItem = await prisma.stockItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StockItemFindUniqueArgs>(args: SelectSubset<T, StockItemFindUniqueArgs<ExtArgs>>): Prisma__StockItemClient<$Result.GetResult<Prisma.$StockItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StockItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StockItemFindUniqueOrThrowArgs} args - Arguments to find a StockItem
     * @example
     * // Get one StockItem
     * const stockItem = await prisma.stockItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StockItemFindUniqueOrThrowArgs>(args: SelectSubset<T, StockItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StockItemClient<$Result.GetResult<Prisma.$StockItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StockItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockItemFindFirstArgs} args - Arguments to find a StockItem
     * @example
     * // Get one StockItem
     * const stockItem = await prisma.stockItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StockItemFindFirstArgs>(args?: SelectSubset<T, StockItemFindFirstArgs<ExtArgs>>): Prisma__StockItemClient<$Result.GetResult<Prisma.$StockItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StockItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockItemFindFirstOrThrowArgs} args - Arguments to find a StockItem
     * @example
     * // Get one StockItem
     * const stockItem = await prisma.stockItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StockItemFindFirstOrThrowArgs>(args?: SelectSubset<T, StockItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__StockItemClient<$Result.GetResult<Prisma.$StockItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StockItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StockItems
     * const stockItems = await prisma.stockItem.findMany()
     * 
     * // Get first 10 StockItems
     * const stockItems = await prisma.stockItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stockItemWithIdOnly = await prisma.stockItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StockItemFindManyArgs>(args?: SelectSubset<T, StockItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StockItem.
     * @param {StockItemCreateArgs} args - Arguments to create a StockItem.
     * @example
     * // Create one StockItem
     * const StockItem = await prisma.stockItem.create({
     *   data: {
     *     // ... data to create a StockItem
     *   }
     * })
     * 
     */
    create<T extends StockItemCreateArgs>(args: SelectSubset<T, StockItemCreateArgs<ExtArgs>>): Prisma__StockItemClient<$Result.GetResult<Prisma.$StockItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StockItems.
     * @param {StockItemCreateManyArgs} args - Arguments to create many StockItems.
     * @example
     * // Create many StockItems
     * const stockItem = await prisma.stockItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StockItemCreateManyArgs>(args?: SelectSubset<T, StockItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StockItems and returns the data saved in the database.
     * @param {StockItemCreateManyAndReturnArgs} args - Arguments to create many StockItems.
     * @example
     * // Create many StockItems
     * const stockItem = await prisma.stockItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StockItems and only return the `id`
     * const stockItemWithIdOnly = await prisma.stockItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StockItemCreateManyAndReturnArgs>(args?: SelectSubset<T, StockItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StockItem.
     * @param {StockItemDeleteArgs} args - Arguments to delete one StockItem.
     * @example
     * // Delete one StockItem
     * const StockItem = await prisma.stockItem.delete({
     *   where: {
     *     // ... filter to delete one StockItem
     *   }
     * })
     * 
     */
    delete<T extends StockItemDeleteArgs>(args: SelectSubset<T, StockItemDeleteArgs<ExtArgs>>): Prisma__StockItemClient<$Result.GetResult<Prisma.$StockItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StockItem.
     * @param {StockItemUpdateArgs} args - Arguments to update one StockItem.
     * @example
     * // Update one StockItem
     * const stockItem = await prisma.stockItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StockItemUpdateArgs>(args: SelectSubset<T, StockItemUpdateArgs<ExtArgs>>): Prisma__StockItemClient<$Result.GetResult<Prisma.$StockItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StockItems.
     * @param {StockItemDeleteManyArgs} args - Arguments to filter StockItems to delete.
     * @example
     * // Delete a few StockItems
     * const { count } = await prisma.stockItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StockItemDeleteManyArgs>(args?: SelectSubset<T, StockItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StockItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StockItems
     * const stockItem = await prisma.stockItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StockItemUpdateManyArgs>(args: SelectSubset<T, StockItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StockItem.
     * @param {StockItemUpsertArgs} args - Arguments to update or create a StockItem.
     * @example
     * // Update or create a StockItem
     * const stockItem = await prisma.stockItem.upsert({
     *   create: {
     *     // ... data to create a StockItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StockItem we want to update
     *   }
     * })
     */
    upsert<T extends StockItemUpsertArgs>(args: SelectSubset<T, StockItemUpsertArgs<ExtArgs>>): Prisma__StockItemClient<$Result.GetResult<Prisma.$StockItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StockItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockItemCountArgs} args - Arguments to filter StockItems to count.
     * @example
     * // Count the number of StockItems
     * const count = await prisma.stockItem.count({
     *   where: {
     *     // ... the filter for the StockItems we want to count
     *   }
     * })
    **/
    count<T extends StockItemCountArgs>(
      args?: Subset<T, StockItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StockItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockItemAggregateArgs>(args: Subset<T, StockItemAggregateArgs>): Prisma.PrismaPromise<GetStockItemAggregateType<T>>

    /**
     * Group by StockItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockItemGroupByArgs['orderBy'] }
        : { orderBy?: StockItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StockItem model
   */
  readonly fields: StockItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StockItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StockItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    movements<T extends StockItem$movementsArgs<ExtArgs> = {}>(args?: Subset<T, StockItem$movementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StockItem model
   */ 
  interface StockItemFieldRefs {
    readonly id: FieldRef<"StockItem", 'String'>
    readonly productId: FieldRef<"StockItem", 'String'>
    readonly currentStock: FieldRef<"StockItem", 'Float'>
    readonly minStock: FieldRef<"StockItem", 'Float'>
    readonly maxStock: FieldRef<"StockItem", 'Float'>
    readonly unit: FieldRef<"StockItem", 'String'>
    readonly location: FieldRef<"StockItem", 'String'>
    readonly unitCost: FieldRef<"StockItem", 'Float'>
    readonly totalValue: FieldRef<"StockItem", 'Float'>
    readonly lastMovement: FieldRef<"StockItem", 'DateTime'>
    readonly supplier: FieldRef<"StockItem", 'String'>
    readonly createdAt: FieldRef<"StockItem", 'DateTime'>
    readonly updatedAt: FieldRef<"StockItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StockItem findUnique
   */
  export type StockItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockItem
     */
    select?: StockItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockItemInclude<ExtArgs> | null
    /**
     * Filter, which StockItem to fetch.
     */
    where: StockItemWhereUniqueInput
  }

  /**
   * StockItem findUniqueOrThrow
   */
  export type StockItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockItem
     */
    select?: StockItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockItemInclude<ExtArgs> | null
    /**
     * Filter, which StockItem to fetch.
     */
    where: StockItemWhereUniqueInput
  }

  /**
   * StockItem findFirst
   */
  export type StockItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockItem
     */
    select?: StockItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockItemInclude<ExtArgs> | null
    /**
     * Filter, which StockItem to fetch.
     */
    where?: StockItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockItems to fetch.
     */
    orderBy?: StockItemOrderByWithRelationInput | StockItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StockItems.
     */
    cursor?: StockItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StockItems.
     */
    distinct?: StockItemScalarFieldEnum | StockItemScalarFieldEnum[]
  }

  /**
   * StockItem findFirstOrThrow
   */
  export type StockItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockItem
     */
    select?: StockItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockItemInclude<ExtArgs> | null
    /**
     * Filter, which StockItem to fetch.
     */
    where?: StockItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockItems to fetch.
     */
    orderBy?: StockItemOrderByWithRelationInput | StockItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StockItems.
     */
    cursor?: StockItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StockItems.
     */
    distinct?: StockItemScalarFieldEnum | StockItemScalarFieldEnum[]
  }

  /**
   * StockItem findMany
   */
  export type StockItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockItem
     */
    select?: StockItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockItemInclude<ExtArgs> | null
    /**
     * Filter, which StockItems to fetch.
     */
    where?: StockItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockItems to fetch.
     */
    orderBy?: StockItemOrderByWithRelationInput | StockItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StockItems.
     */
    cursor?: StockItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockItems.
     */
    skip?: number
    distinct?: StockItemScalarFieldEnum | StockItemScalarFieldEnum[]
  }

  /**
   * StockItem create
   */
  export type StockItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockItem
     */
    select?: StockItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockItemInclude<ExtArgs> | null
    /**
     * The data needed to create a StockItem.
     */
    data: XOR<StockItemCreateInput, StockItemUncheckedCreateInput>
  }

  /**
   * StockItem createMany
   */
  export type StockItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StockItems.
     */
    data: StockItemCreateManyInput | StockItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StockItem createManyAndReturn
   */
  export type StockItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockItem
     */
    select?: StockItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StockItems.
     */
    data: StockItemCreateManyInput | StockItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StockItem update
   */
  export type StockItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockItem
     */
    select?: StockItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockItemInclude<ExtArgs> | null
    /**
     * The data needed to update a StockItem.
     */
    data: XOR<StockItemUpdateInput, StockItemUncheckedUpdateInput>
    /**
     * Choose, which StockItem to update.
     */
    where: StockItemWhereUniqueInput
  }

  /**
   * StockItem updateMany
   */
  export type StockItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StockItems.
     */
    data: XOR<StockItemUpdateManyMutationInput, StockItemUncheckedUpdateManyInput>
    /**
     * Filter which StockItems to update
     */
    where?: StockItemWhereInput
  }

  /**
   * StockItem upsert
   */
  export type StockItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockItem
     */
    select?: StockItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockItemInclude<ExtArgs> | null
    /**
     * The filter to search for the StockItem to update in case it exists.
     */
    where: StockItemWhereUniqueInput
    /**
     * In case the StockItem found by the `where` argument doesn't exist, create a new StockItem with this data.
     */
    create: XOR<StockItemCreateInput, StockItemUncheckedCreateInput>
    /**
     * In case the StockItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StockItemUpdateInput, StockItemUncheckedUpdateInput>
  }

  /**
   * StockItem delete
   */
  export type StockItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockItem
     */
    select?: StockItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockItemInclude<ExtArgs> | null
    /**
     * Filter which StockItem to delete.
     */
    where: StockItemWhereUniqueInput
  }

  /**
   * StockItem deleteMany
   */
  export type StockItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StockItems to delete
     */
    where?: StockItemWhereInput
  }

  /**
   * StockItem.movements
   */
  export type StockItem$movementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    where?: StockMovementWhereInput
    orderBy?: StockMovementOrderByWithRelationInput | StockMovementOrderByWithRelationInput[]
    cursor?: StockMovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockMovementScalarFieldEnum | StockMovementScalarFieldEnum[]
  }

  /**
   * StockItem without action
   */
  export type StockItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockItem
     */
    select?: StockItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockItemInclude<ExtArgs> | null
  }


  /**
   * Model StockMovement
   */

  export type AggregateStockMovement = {
    _count: StockMovementCountAggregateOutputType | null
    _avg: StockMovementAvgAggregateOutputType | null
    _sum: StockMovementSumAggregateOutputType | null
    _min: StockMovementMinAggregateOutputType | null
    _max: StockMovementMaxAggregateOutputType | null
  }

  export type StockMovementAvgAggregateOutputType = {
    quantity: number | null
    balanceBefore: number | null
    balanceAfter: number | null
  }

  export type StockMovementSumAggregateOutputType = {
    quantity: number | null
    balanceBefore: number | null
    balanceAfter: number | null
  }

  export type StockMovementMinAggregateOutputType = {
    id: string | null
    stockItemId: string | null
    type: $Enums.StockMovementType | null
    quantity: number | null
    balanceBefore: number | null
    balanceAfter: number | null
    reference: string | null
    reason: string | null
    operatorId: string | null
    timestamp: Date | null
  }

  export type StockMovementMaxAggregateOutputType = {
    id: string | null
    stockItemId: string | null
    type: $Enums.StockMovementType | null
    quantity: number | null
    balanceBefore: number | null
    balanceAfter: number | null
    reference: string | null
    reason: string | null
    operatorId: string | null
    timestamp: Date | null
  }

  export type StockMovementCountAggregateOutputType = {
    id: number
    stockItemId: number
    type: number
    quantity: number
    balanceBefore: number
    balanceAfter: number
    reference: number
    reason: number
    operatorId: number
    timestamp: number
    _all: number
  }


  export type StockMovementAvgAggregateInputType = {
    quantity?: true
    balanceBefore?: true
    balanceAfter?: true
  }

  export type StockMovementSumAggregateInputType = {
    quantity?: true
    balanceBefore?: true
    balanceAfter?: true
  }

  export type StockMovementMinAggregateInputType = {
    id?: true
    stockItemId?: true
    type?: true
    quantity?: true
    balanceBefore?: true
    balanceAfter?: true
    reference?: true
    reason?: true
    operatorId?: true
    timestamp?: true
  }

  export type StockMovementMaxAggregateInputType = {
    id?: true
    stockItemId?: true
    type?: true
    quantity?: true
    balanceBefore?: true
    balanceAfter?: true
    reference?: true
    reason?: true
    operatorId?: true
    timestamp?: true
  }

  export type StockMovementCountAggregateInputType = {
    id?: true
    stockItemId?: true
    type?: true
    quantity?: true
    balanceBefore?: true
    balanceAfter?: true
    reference?: true
    reason?: true
    operatorId?: true
    timestamp?: true
    _all?: true
  }

  export type StockMovementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StockMovement to aggregate.
     */
    where?: StockMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockMovements to fetch.
     */
    orderBy?: StockMovementOrderByWithRelationInput | StockMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StockMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StockMovements
    **/
    _count?: true | StockMovementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StockMovementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StockMovementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockMovementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockMovementMaxAggregateInputType
  }

  export type GetStockMovementAggregateType<T extends StockMovementAggregateArgs> = {
        [P in keyof T & keyof AggregateStockMovement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStockMovement[P]>
      : GetScalarType<T[P], AggregateStockMovement[P]>
  }




  export type StockMovementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockMovementWhereInput
    orderBy?: StockMovementOrderByWithAggregationInput | StockMovementOrderByWithAggregationInput[]
    by: StockMovementScalarFieldEnum[] | StockMovementScalarFieldEnum
    having?: StockMovementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockMovementCountAggregateInputType | true
    _avg?: StockMovementAvgAggregateInputType
    _sum?: StockMovementSumAggregateInputType
    _min?: StockMovementMinAggregateInputType
    _max?: StockMovementMaxAggregateInputType
  }

  export type StockMovementGroupByOutputType = {
    id: string
    stockItemId: string
    type: $Enums.StockMovementType
    quantity: number
    balanceBefore: number
    balanceAfter: number
    reference: string | null
    reason: string
    operatorId: string
    timestamp: Date
    _count: StockMovementCountAggregateOutputType | null
    _avg: StockMovementAvgAggregateOutputType | null
    _sum: StockMovementSumAggregateOutputType | null
    _min: StockMovementMinAggregateOutputType | null
    _max: StockMovementMaxAggregateOutputType | null
  }

  type GetStockMovementGroupByPayload<T extends StockMovementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StockMovementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockMovementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockMovementGroupByOutputType[P]>
            : GetScalarType<T[P], StockMovementGroupByOutputType[P]>
        }
      >
    >


  export type StockMovementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stockItemId?: boolean
    type?: boolean
    quantity?: boolean
    balanceBefore?: boolean
    balanceAfter?: boolean
    reference?: boolean
    reason?: boolean
    operatorId?: boolean
    timestamp?: boolean
    stockItem?: boolean | StockItemDefaultArgs<ExtArgs>
    operator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stockMovement"]>

  export type StockMovementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stockItemId?: boolean
    type?: boolean
    quantity?: boolean
    balanceBefore?: boolean
    balanceAfter?: boolean
    reference?: boolean
    reason?: boolean
    operatorId?: boolean
    timestamp?: boolean
    stockItem?: boolean | StockItemDefaultArgs<ExtArgs>
    operator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stockMovement"]>

  export type StockMovementSelectScalar = {
    id?: boolean
    stockItemId?: boolean
    type?: boolean
    quantity?: boolean
    balanceBefore?: boolean
    balanceAfter?: boolean
    reference?: boolean
    reason?: boolean
    operatorId?: boolean
    timestamp?: boolean
  }

  export type StockMovementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stockItem?: boolean | StockItemDefaultArgs<ExtArgs>
    operator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StockMovementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stockItem?: boolean | StockItemDefaultArgs<ExtArgs>
    operator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StockMovementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StockMovement"
    objects: {
      stockItem: Prisma.$StockItemPayload<ExtArgs>
      operator: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stockItemId: string
      type: $Enums.StockMovementType
      quantity: number
      balanceBefore: number
      balanceAfter: number
      reference: string | null
      reason: string
      operatorId: string
      timestamp: Date
    }, ExtArgs["result"]["stockMovement"]>
    composites: {}
  }

  type StockMovementGetPayload<S extends boolean | null | undefined | StockMovementDefaultArgs> = $Result.GetResult<Prisma.$StockMovementPayload, S>

  type StockMovementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StockMovementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StockMovementCountAggregateInputType | true
    }

  export interface StockMovementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StockMovement'], meta: { name: 'StockMovement' } }
    /**
     * Find zero or one StockMovement that matches the filter.
     * @param {StockMovementFindUniqueArgs} args - Arguments to find a StockMovement
     * @example
     * // Get one StockMovement
     * const stockMovement = await prisma.stockMovement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StockMovementFindUniqueArgs>(args: SelectSubset<T, StockMovementFindUniqueArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StockMovement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StockMovementFindUniqueOrThrowArgs} args - Arguments to find a StockMovement
     * @example
     * // Get one StockMovement
     * const stockMovement = await prisma.stockMovement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StockMovementFindUniqueOrThrowArgs>(args: SelectSubset<T, StockMovementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StockMovement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockMovementFindFirstArgs} args - Arguments to find a StockMovement
     * @example
     * // Get one StockMovement
     * const stockMovement = await prisma.stockMovement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StockMovementFindFirstArgs>(args?: SelectSubset<T, StockMovementFindFirstArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StockMovement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockMovementFindFirstOrThrowArgs} args - Arguments to find a StockMovement
     * @example
     * // Get one StockMovement
     * const stockMovement = await prisma.stockMovement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StockMovementFindFirstOrThrowArgs>(args?: SelectSubset<T, StockMovementFindFirstOrThrowArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StockMovements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockMovementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StockMovements
     * const stockMovements = await prisma.stockMovement.findMany()
     * 
     * // Get first 10 StockMovements
     * const stockMovements = await prisma.stockMovement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stockMovementWithIdOnly = await prisma.stockMovement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StockMovementFindManyArgs>(args?: SelectSubset<T, StockMovementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StockMovement.
     * @param {StockMovementCreateArgs} args - Arguments to create a StockMovement.
     * @example
     * // Create one StockMovement
     * const StockMovement = await prisma.stockMovement.create({
     *   data: {
     *     // ... data to create a StockMovement
     *   }
     * })
     * 
     */
    create<T extends StockMovementCreateArgs>(args: SelectSubset<T, StockMovementCreateArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StockMovements.
     * @param {StockMovementCreateManyArgs} args - Arguments to create many StockMovements.
     * @example
     * // Create many StockMovements
     * const stockMovement = await prisma.stockMovement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StockMovementCreateManyArgs>(args?: SelectSubset<T, StockMovementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StockMovements and returns the data saved in the database.
     * @param {StockMovementCreateManyAndReturnArgs} args - Arguments to create many StockMovements.
     * @example
     * // Create many StockMovements
     * const stockMovement = await prisma.stockMovement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StockMovements and only return the `id`
     * const stockMovementWithIdOnly = await prisma.stockMovement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StockMovementCreateManyAndReturnArgs>(args?: SelectSubset<T, StockMovementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StockMovement.
     * @param {StockMovementDeleteArgs} args - Arguments to delete one StockMovement.
     * @example
     * // Delete one StockMovement
     * const StockMovement = await prisma.stockMovement.delete({
     *   where: {
     *     // ... filter to delete one StockMovement
     *   }
     * })
     * 
     */
    delete<T extends StockMovementDeleteArgs>(args: SelectSubset<T, StockMovementDeleteArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StockMovement.
     * @param {StockMovementUpdateArgs} args - Arguments to update one StockMovement.
     * @example
     * // Update one StockMovement
     * const stockMovement = await prisma.stockMovement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StockMovementUpdateArgs>(args: SelectSubset<T, StockMovementUpdateArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StockMovements.
     * @param {StockMovementDeleteManyArgs} args - Arguments to filter StockMovements to delete.
     * @example
     * // Delete a few StockMovements
     * const { count } = await prisma.stockMovement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StockMovementDeleteManyArgs>(args?: SelectSubset<T, StockMovementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StockMovements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockMovementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StockMovements
     * const stockMovement = await prisma.stockMovement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StockMovementUpdateManyArgs>(args: SelectSubset<T, StockMovementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StockMovement.
     * @param {StockMovementUpsertArgs} args - Arguments to update or create a StockMovement.
     * @example
     * // Update or create a StockMovement
     * const stockMovement = await prisma.stockMovement.upsert({
     *   create: {
     *     // ... data to create a StockMovement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StockMovement we want to update
     *   }
     * })
     */
    upsert<T extends StockMovementUpsertArgs>(args: SelectSubset<T, StockMovementUpsertArgs<ExtArgs>>): Prisma__StockMovementClient<$Result.GetResult<Prisma.$StockMovementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StockMovements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockMovementCountArgs} args - Arguments to filter StockMovements to count.
     * @example
     * // Count the number of StockMovements
     * const count = await prisma.stockMovement.count({
     *   where: {
     *     // ... the filter for the StockMovements we want to count
     *   }
     * })
    **/
    count<T extends StockMovementCountArgs>(
      args?: Subset<T, StockMovementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockMovementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StockMovement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockMovementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockMovementAggregateArgs>(args: Subset<T, StockMovementAggregateArgs>): Prisma.PrismaPromise<GetStockMovementAggregateType<T>>

    /**
     * Group by StockMovement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockMovementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockMovementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockMovementGroupByArgs['orderBy'] }
        : { orderBy?: StockMovementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockMovementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockMovementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StockMovement model
   */
  readonly fields: StockMovementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StockMovement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StockMovementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stockItem<T extends StockItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StockItemDefaultArgs<ExtArgs>>): Prisma__StockItemClient<$Result.GetResult<Prisma.$StockItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    operator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StockMovement model
   */ 
  interface StockMovementFieldRefs {
    readonly id: FieldRef<"StockMovement", 'String'>
    readonly stockItemId: FieldRef<"StockMovement", 'String'>
    readonly type: FieldRef<"StockMovement", 'StockMovementType'>
    readonly quantity: FieldRef<"StockMovement", 'Float'>
    readonly balanceBefore: FieldRef<"StockMovement", 'Float'>
    readonly balanceAfter: FieldRef<"StockMovement", 'Float'>
    readonly reference: FieldRef<"StockMovement", 'String'>
    readonly reason: FieldRef<"StockMovement", 'String'>
    readonly operatorId: FieldRef<"StockMovement", 'String'>
    readonly timestamp: FieldRef<"StockMovement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StockMovement findUnique
   */
  export type StockMovementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * Filter, which StockMovement to fetch.
     */
    where: StockMovementWhereUniqueInput
  }

  /**
   * StockMovement findUniqueOrThrow
   */
  export type StockMovementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * Filter, which StockMovement to fetch.
     */
    where: StockMovementWhereUniqueInput
  }

  /**
   * StockMovement findFirst
   */
  export type StockMovementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * Filter, which StockMovement to fetch.
     */
    where?: StockMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockMovements to fetch.
     */
    orderBy?: StockMovementOrderByWithRelationInput | StockMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StockMovements.
     */
    cursor?: StockMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StockMovements.
     */
    distinct?: StockMovementScalarFieldEnum | StockMovementScalarFieldEnum[]
  }

  /**
   * StockMovement findFirstOrThrow
   */
  export type StockMovementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * Filter, which StockMovement to fetch.
     */
    where?: StockMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockMovements to fetch.
     */
    orderBy?: StockMovementOrderByWithRelationInput | StockMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StockMovements.
     */
    cursor?: StockMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StockMovements.
     */
    distinct?: StockMovementScalarFieldEnum | StockMovementScalarFieldEnum[]
  }

  /**
   * StockMovement findMany
   */
  export type StockMovementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * Filter, which StockMovements to fetch.
     */
    where?: StockMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockMovements to fetch.
     */
    orderBy?: StockMovementOrderByWithRelationInput | StockMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StockMovements.
     */
    cursor?: StockMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockMovements.
     */
    skip?: number
    distinct?: StockMovementScalarFieldEnum | StockMovementScalarFieldEnum[]
  }

  /**
   * StockMovement create
   */
  export type StockMovementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * The data needed to create a StockMovement.
     */
    data: XOR<StockMovementCreateInput, StockMovementUncheckedCreateInput>
  }

  /**
   * StockMovement createMany
   */
  export type StockMovementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StockMovements.
     */
    data: StockMovementCreateManyInput | StockMovementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StockMovement createManyAndReturn
   */
  export type StockMovementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StockMovements.
     */
    data: StockMovementCreateManyInput | StockMovementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StockMovement update
   */
  export type StockMovementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * The data needed to update a StockMovement.
     */
    data: XOR<StockMovementUpdateInput, StockMovementUncheckedUpdateInput>
    /**
     * Choose, which StockMovement to update.
     */
    where: StockMovementWhereUniqueInput
  }

  /**
   * StockMovement updateMany
   */
  export type StockMovementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StockMovements.
     */
    data: XOR<StockMovementUpdateManyMutationInput, StockMovementUncheckedUpdateManyInput>
    /**
     * Filter which StockMovements to update
     */
    where?: StockMovementWhereInput
  }

  /**
   * StockMovement upsert
   */
  export type StockMovementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * The filter to search for the StockMovement to update in case it exists.
     */
    where: StockMovementWhereUniqueInput
    /**
     * In case the StockMovement found by the `where` argument doesn't exist, create a new StockMovement with this data.
     */
    create: XOR<StockMovementCreateInput, StockMovementUncheckedCreateInput>
    /**
     * In case the StockMovement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StockMovementUpdateInput, StockMovementUncheckedUpdateInput>
  }

  /**
   * StockMovement delete
   */
  export type StockMovementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
    /**
     * Filter which StockMovement to delete.
     */
    where: StockMovementWhereUniqueInput
  }

  /**
   * StockMovement deleteMany
   */
  export type StockMovementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StockMovements to delete
     */
    where?: StockMovementWhereInput
  }

  /**
   * StockMovement without action
   */
  export type StockMovementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockMovement
     */
    select?: StockMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockMovementInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    position: 'position',
    department: 'department',
    location: 'location',
    avatar: 'avatar',
    bio: 'bio',
    skills: 'skills',
    role: 'role',
    isActive: 'isActive',
    joinDate: 'joinDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CertificationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    issuer: 'issuer',
    issueDate: 'issueDate',
    expiryDate: 'expiryDate',
    isVerified: 'isVerified',
    userId: 'userId'
  };

  export type CertificationScalarFieldEnum = (typeof CertificationScalarFieldEnum)[keyof typeof CertificationScalarFieldEnum]


  export const UserActivityScalarFieldEnum: {
    id: 'id',
    type: 'type',
    description: 'description',
    metadata: 'metadata',
    timestamp: 'timestamp',
    userId: 'userId'
  };

  export type UserActivityScalarFieldEnum = (typeof UserActivityScalarFieldEnum)[keyof typeof UserActivityScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    unitCost: 'unitCost',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const BillOfMaterialsScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    version: 'version',
    status: 'status',
    description: 'description',
    totalCost: 'totalCost',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BillOfMaterialsScalarFieldEnum = (typeof BillOfMaterialsScalarFieldEnum)[keyof typeof BillOfMaterialsScalarFieldEnum]


  export const BomItemScalarFieldEnum: {
    id: 'id',
    bomId: 'bomId',
    componentId: 'componentId',
    quantity: 'quantity',
    unit: 'unit',
    unitCost: 'unitCost',
    totalCost: 'totalCost',
    leadTimeDays: 'leadTimeDays',
    supplier: 'supplier',
    specifications: 'specifications'
  };

  export type BomItemScalarFieldEnum = (typeof BomItemScalarFieldEnum)[keyof typeof BomItemScalarFieldEnum]


  export const ManufacturingOrderScalarFieldEnum: {
    id: 'id',
    orderNumber: 'orderNumber',
    productId: 'productId',
    quantity: 'quantity',
    status: 'status',
    priority: 'priority',
    startDate: 'startDate',
    deadline: 'deadline',
    completedAt: 'completedAt',
    assignedToId: 'assignedToId',
    estimatedCost: 'estimatedCost',
    actualCost: 'actualCost',
    progress: 'progress',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ManufacturingOrderScalarFieldEnum = (typeof ManufacturingOrderScalarFieldEnum)[keyof typeof ManufacturingOrderScalarFieldEnum]


  export const WorkCenterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    location: 'location',
    status: 'status',
    capacity: 'capacity',
    hourlyCost: 'hourlyCost',
    utilization: 'utilization',
    efficiency: 'efficiency',
    downtime: 'downtime',
    totalHours: 'totalHours',
    productiveHours: 'productiveHours',
    specifications: 'specifications',
    maintenanceScheduled: 'maintenanceScheduled',
    lastMaintenance: 'lastMaintenance',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkCenterScalarFieldEnum = (typeof WorkCenterScalarFieldEnum)[keyof typeof WorkCenterScalarFieldEnum]


  export const WorkOrderScalarFieldEnum: {
    id: 'id',
    orderNumber: 'orderNumber',
    title: 'title',
    description: 'description',
    manufacturingOrderId: 'manufacturingOrderId',
    workCenterId: 'workCenterId',
    assignedToId: 'assignedToId',
    status: 'status',
    priority: 'priority',
    estimatedHours: 'estimatedHours',
    actualHours: 'actualHours',
    progress: 'progress',
    startedAt: 'startedAt',
    pausedAt: 'pausedAt',
    completedAt: 'completedAt',
    dueDate: 'dueDate',
    pausedReason: 'pausedReason',
    comments: 'comments',
    tags: 'tags',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkOrderScalarFieldEnum = (typeof WorkOrderScalarFieldEnum)[keyof typeof WorkOrderScalarFieldEnum]


  export const StockItemScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    currentStock: 'currentStock',
    minStock: 'minStock',
    maxStock: 'maxStock',
    unit: 'unit',
    location: 'location',
    unitCost: 'unitCost',
    totalValue: 'totalValue',
    lastMovement: 'lastMovement',
    supplier: 'supplier',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StockItemScalarFieldEnum = (typeof StockItemScalarFieldEnum)[keyof typeof StockItemScalarFieldEnum]


  export const StockMovementScalarFieldEnum: {
    id: 'id',
    stockItemId: 'stockItemId',
    type: 'type',
    quantity: 'quantity',
    balanceBefore: 'balanceBefore',
    balanceAfter: 'balanceAfter',
    reference: 'reference',
    reason: 'reason',
    operatorId: 'operatorId',
    timestamp: 'timestamp'
  };

  export type StockMovementScalarFieldEnum = (typeof StockMovementScalarFieldEnum)[keyof typeof StockMovementScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'BomStatus'
   */
  export type EnumBomStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BomStatus'>
    


  /**
   * Reference to a field of type 'BomStatus[]'
   */
  export type ListEnumBomStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BomStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    


  /**
   * Reference to a field of type 'Priority'
   */
  export type EnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority'>
    


  /**
   * Reference to a field of type 'Priority[]'
   */
  export type ListEnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority[]'>
    


  /**
   * Reference to a field of type 'WorkCenterStatus'
   */
  export type EnumWorkCenterStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkCenterStatus'>
    


  /**
   * Reference to a field of type 'WorkCenterStatus[]'
   */
  export type ListEnumWorkCenterStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkCenterStatus[]'>
    


  /**
   * Reference to a field of type 'WorkOrderStatus'
   */
  export type EnumWorkOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkOrderStatus'>
    


  /**
   * Reference to a field of type 'WorkOrderStatus[]'
   */
  export type ListEnumWorkOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkOrderStatus[]'>
    


  /**
   * Reference to a field of type 'StockMovementType'
   */
  export type EnumStockMovementTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StockMovementType'>
    


  /**
   * Reference to a field of type 'StockMovementType[]'
   */
  export type ListEnumStockMovementTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StockMovementType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    position?: StringFilter<"User"> | string
    department?: StringFilter<"User"> | string
    location?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    skills?: StringNullableListFilter<"User">
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    joinDate?: DateTimeFilter<"User"> | Date | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    manufacturingOrders?: ManufacturingOrderListRelationFilter
    workOrders?: WorkOrderListRelationFilter
    stockMovements?: StockMovementListRelationFilter
    certifications?: CertificationListRelationFilter
    activities?: UserActivityListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    position?: SortOrder
    department?: SortOrder
    location?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    skills?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    joinDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    manufacturingOrders?: ManufacturingOrderOrderByRelationAggregateInput
    workOrders?: WorkOrderOrderByRelationAggregateInput
    stockMovements?: StockMovementOrderByRelationAggregateInput
    certifications?: CertificationOrderByRelationAggregateInput
    activities?: UserActivityOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    position?: StringFilter<"User"> | string
    department?: StringFilter<"User"> | string
    location?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    skills?: StringNullableListFilter<"User">
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    joinDate?: DateTimeFilter<"User"> | Date | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    manufacturingOrders?: ManufacturingOrderListRelationFilter
    workOrders?: WorkOrderListRelationFilter
    stockMovements?: StockMovementListRelationFilter
    certifications?: CertificationListRelationFilter
    activities?: UserActivityListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    position?: SortOrder
    department?: SortOrder
    location?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    skills?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    joinDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    position?: StringWithAggregatesFilter<"User"> | string
    department?: StringWithAggregatesFilter<"User"> | string
    location?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    skills?: StringNullableListFilter<"User">
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    joinDate?: DateTimeWithAggregatesFilter<"User"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CertificationWhereInput = {
    AND?: CertificationWhereInput | CertificationWhereInput[]
    OR?: CertificationWhereInput[]
    NOT?: CertificationWhereInput | CertificationWhereInput[]
    id?: StringFilter<"Certification"> | string
    name?: StringFilter<"Certification"> | string
    issuer?: StringFilter<"Certification"> | string
    issueDate?: DateTimeFilter<"Certification"> | Date | string
    expiryDate?: DateTimeNullableFilter<"Certification"> | Date | string | null
    isVerified?: BoolFilter<"Certification"> | boolean
    userId?: StringFilter<"Certification"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CertificationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    issuer?: SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CertificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CertificationWhereInput | CertificationWhereInput[]
    OR?: CertificationWhereInput[]
    NOT?: CertificationWhereInput | CertificationWhereInput[]
    name?: StringFilter<"Certification"> | string
    issuer?: StringFilter<"Certification"> | string
    issueDate?: DateTimeFilter<"Certification"> | Date | string
    expiryDate?: DateTimeNullableFilter<"Certification"> | Date | string | null
    isVerified?: BoolFilter<"Certification"> | boolean
    userId?: StringFilter<"Certification"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CertificationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    issuer?: SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    userId?: SortOrder
    _count?: CertificationCountOrderByAggregateInput
    _max?: CertificationMaxOrderByAggregateInput
    _min?: CertificationMinOrderByAggregateInput
  }

  export type CertificationScalarWhereWithAggregatesInput = {
    AND?: CertificationScalarWhereWithAggregatesInput | CertificationScalarWhereWithAggregatesInput[]
    OR?: CertificationScalarWhereWithAggregatesInput[]
    NOT?: CertificationScalarWhereWithAggregatesInput | CertificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Certification"> | string
    name?: StringWithAggregatesFilter<"Certification"> | string
    issuer?: StringWithAggregatesFilter<"Certification"> | string
    issueDate?: DateTimeWithAggregatesFilter<"Certification"> | Date | string
    expiryDate?: DateTimeNullableWithAggregatesFilter<"Certification"> | Date | string | null
    isVerified?: BoolWithAggregatesFilter<"Certification"> | boolean
    userId?: StringWithAggregatesFilter<"Certification"> | string
  }

  export type UserActivityWhereInput = {
    AND?: UserActivityWhereInput | UserActivityWhereInput[]
    OR?: UserActivityWhereInput[]
    NOT?: UserActivityWhereInput | UserActivityWhereInput[]
    id?: StringFilter<"UserActivity"> | string
    type?: StringFilter<"UserActivity"> | string
    description?: StringFilter<"UserActivity"> | string
    metadata?: JsonNullableFilter<"UserActivity">
    timestamp?: DateTimeFilter<"UserActivity"> | Date | string
    userId?: StringFilter<"UserActivity"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserActivityOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    metadata?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserActivityWhereInput | UserActivityWhereInput[]
    OR?: UserActivityWhereInput[]
    NOT?: UserActivityWhereInput | UserActivityWhereInput[]
    type?: StringFilter<"UserActivity"> | string
    description?: StringFilter<"UserActivity"> | string
    metadata?: JsonNullableFilter<"UserActivity">
    timestamp?: DateTimeFilter<"UserActivity"> | Date | string
    userId?: StringFilter<"UserActivity"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserActivityOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    metadata?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    _count?: UserActivityCountOrderByAggregateInput
    _max?: UserActivityMaxOrderByAggregateInput
    _min?: UserActivityMinOrderByAggregateInput
  }

  export type UserActivityScalarWhereWithAggregatesInput = {
    AND?: UserActivityScalarWhereWithAggregatesInput | UserActivityScalarWhereWithAggregatesInput[]
    OR?: UserActivityScalarWhereWithAggregatesInput[]
    NOT?: UserActivityScalarWhereWithAggregatesInput | UserActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserActivity"> | string
    type?: StringWithAggregatesFilter<"UserActivity"> | string
    description?: StringWithAggregatesFilter<"UserActivity"> | string
    metadata?: JsonNullableWithAggregatesFilter<"UserActivity">
    timestamp?: DateTimeWithAggregatesFilter<"UserActivity"> | Date | string
    userId?: StringWithAggregatesFilter<"UserActivity"> | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    category?: StringFilter<"Product"> | string
    unitCost?: FloatNullableFilter<"Product"> | number | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    manufacturingOrders?: ManufacturingOrderListRelationFilter
    billsOfMaterials?: BillOfMaterialsListRelationFilter
    bomComponents?: BomItemListRelationFilter
    stockItems?: StockItemListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    unitCost?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    manufacturingOrders?: ManufacturingOrderOrderByRelationAggregateInput
    billsOfMaterials?: BillOfMaterialsOrderByRelationAggregateInput
    bomComponents?: BomItemOrderByRelationAggregateInput
    stockItems?: StockItemOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    category?: StringFilter<"Product"> | string
    unitCost?: FloatNullableFilter<"Product"> | number | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    manufacturingOrders?: ManufacturingOrderListRelationFilter
    billsOfMaterials?: BillOfMaterialsListRelationFilter
    bomComponents?: BomItemListRelationFilter
    stockItems?: StockItemListRelationFilter
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    unitCost?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    category?: StringWithAggregatesFilter<"Product"> | string
    unitCost?: FloatNullableWithAggregatesFilter<"Product"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
  }

  export type BillOfMaterialsWhereInput = {
    AND?: BillOfMaterialsWhereInput | BillOfMaterialsWhereInput[]
    OR?: BillOfMaterialsWhereInput[]
    NOT?: BillOfMaterialsWhereInput | BillOfMaterialsWhereInput[]
    id?: StringFilter<"BillOfMaterials"> | string
    productId?: StringFilter<"BillOfMaterials"> | string
    version?: StringFilter<"BillOfMaterials"> | string
    status?: EnumBomStatusFilter<"BillOfMaterials"> | $Enums.BomStatus
    description?: StringNullableFilter<"BillOfMaterials"> | string | null
    totalCost?: FloatNullableFilter<"BillOfMaterials"> | number | null
    createdBy?: StringFilter<"BillOfMaterials"> | string
    createdAt?: DateTimeFilter<"BillOfMaterials"> | Date | string
    updatedAt?: DateTimeFilter<"BillOfMaterials"> | Date | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    items?: BomItemListRelationFilter
  }

  export type BillOfMaterialsOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    version?: SortOrder
    status?: SortOrder
    description?: SortOrderInput | SortOrder
    totalCost?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
    items?: BomItemOrderByRelationAggregateInput
  }

  export type BillOfMaterialsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    productId_version?: BillOfMaterialsProductIdVersionCompoundUniqueInput
    AND?: BillOfMaterialsWhereInput | BillOfMaterialsWhereInput[]
    OR?: BillOfMaterialsWhereInput[]
    NOT?: BillOfMaterialsWhereInput | BillOfMaterialsWhereInput[]
    productId?: StringFilter<"BillOfMaterials"> | string
    version?: StringFilter<"BillOfMaterials"> | string
    status?: EnumBomStatusFilter<"BillOfMaterials"> | $Enums.BomStatus
    description?: StringNullableFilter<"BillOfMaterials"> | string | null
    totalCost?: FloatNullableFilter<"BillOfMaterials"> | number | null
    createdBy?: StringFilter<"BillOfMaterials"> | string
    createdAt?: DateTimeFilter<"BillOfMaterials"> | Date | string
    updatedAt?: DateTimeFilter<"BillOfMaterials"> | Date | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    items?: BomItemListRelationFilter
  }, "id" | "productId_version">

  export type BillOfMaterialsOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    version?: SortOrder
    status?: SortOrder
    description?: SortOrderInput | SortOrder
    totalCost?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BillOfMaterialsCountOrderByAggregateInput
    _avg?: BillOfMaterialsAvgOrderByAggregateInput
    _max?: BillOfMaterialsMaxOrderByAggregateInput
    _min?: BillOfMaterialsMinOrderByAggregateInput
    _sum?: BillOfMaterialsSumOrderByAggregateInput
  }

  export type BillOfMaterialsScalarWhereWithAggregatesInput = {
    AND?: BillOfMaterialsScalarWhereWithAggregatesInput | BillOfMaterialsScalarWhereWithAggregatesInput[]
    OR?: BillOfMaterialsScalarWhereWithAggregatesInput[]
    NOT?: BillOfMaterialsScalarWhereWithAggregatesInput | BillOfMaterialsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BillOfMaterials"> | string
    productId?: StringWithAggregatesFilter<"BillOfMaterials"> | string
    version?: StringWithAggregatesFilter<"BillOfMaterials"> | string
    status?: EnumBomStatusWithAggregatesFilter<"BillOfMaterials"> | $Enums.BomStatus
    description?: StringNullableWithAggregatesFilter<"BillOfMaterials"> | string | null
    totalCost?: FloatNullableWithAggregatesFilter<"BillOfMaterials"> | number | null
    createdBy?: StringWithAggregatesFilter<"BillOfMaterials"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BillOfMaterials"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BillOfMaterials"> | Date | string
  }

  export type BomItemWhereInput = {
    AND?: BomItemWhereInput | BomItemWhereInput[]
    OR?: BomItemWhereInput[]
    NOT?: BomItemWhereInput | BomItemWhereInput[]
    id?: StringFilter<"BomItem"> | string
    bomId?: StringFilter<"BomItem"> | string
    componentId?: StringFilter<"BomItem"> | string
    quantity?: FloatFilter<"BomItem"> | number
    unit?: StringFilter<"BomItem"> | string
    unitCost?: FloatNullableFilter<"BomItem"> | number | null
    totalCost?: FloatNullableFilter<"BomItem"> | number | null
    leadTimeDays?: IntNullableFilter<"BomItem"> | number | null
    supplier?: StringNullableFilter<"BomItem"> | string | null
    specifications?: StringNullableFilter<"BomItem"> | string | null
    bom?: XOR<BillOfMaterialsRelationFilter, BillOfMaterialsWhereInput>
    component?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type BomItemOrderByWithRelationInput = {
    id?: SortOrder
    bomId?: SortOrder
    componentId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrderInput | SortOrder
    totalCost?: SortOrderInput | SortOrder
    leadTimeDays?: SortOrderInput | SortOrder
    supplier?: SortOrderInput | SortOrder
    specifications?: SortOrderInput | SortOrder
    bom?: BillOfMaterialsOrderByWithRelationInput
    component?: ProductOrderByWithRelationInput
  }

  export type BomItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BomItemWhereInput | BomItemWhereInput[]
    OR?: BomItemWhereInput[]
    NOT?: BomItemWhereInput | BomItemWhereInput[]
    bomId?: StringFilter<"BomItem"> | string
    componentId?: StringFilter<"BomItem"> | string
    quantity?: FloatFilter<"BomItem"> | number
    unit?: StringFilter<"BomItem"> | string
    unitCost?: FloatNullableFilter<"BomItem"> | number | null
    totalCost?: FloatNullableFilter<"BomItem"> | number | null
    leadTimeDays?: IntNullableFilter<"BomItem"> | number | null
    supplier?: StringNullableFilter<"BomItem"> | string | null
    specifications?: StringNullableFilter<"BomItem"> | string | null
    bom?: XOR<BillOfMaterialsRelationFilter, BillOfMaterialsWhereInput>
    component?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "id">

  export type BomItemOrderByWithAggregationInput = {
    id?: SortOrder
    bomId?: SortOrder
    componentId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrderInput | SortOrder
    totalCost?: SortOrderInput | SortOrder
    leadTimeDays?: SortOrderInput | SortOrder
    supplier?: SortOrderInput | SortOrder
    specifications?: SortOrderInput | SortOrder
    _count?: BomItemCountOrderByAggregateInput
    _avg?: BomItemAvgOrderByAggregateInput
    _max?: BomItemMaxOrderByAggregateInput
    _min?: BomItemMinOrderByAggregateInput
    _sum?: BomItemSumOrderByAggregateInput
  }

  export type BomItemScalarWhereWithAggregatesInput = {
    AND?: BomItemScalarWhereWithAggregatesInput | BomItemScalarWhereWithAggregatesInput[]
    OR?: BomItemScalarWhereWithAggregatesInput[]
    NOT?: BomItemScalarWhereWithAggregatesInput | BomItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BomItem"> | string
    bomId?: StringWithAggregatesFilter<"BomItem"> | string
    componentId?: StringWithAggregatesFilter<"BomItem"> | string
    quantity?: FloatWithAggregatesFilter<"BomItem"> | number
    unit?: StringWithAggregatesFilter<"BomItem"> | string
    unitCost?: FloatNullableWithAggregatesFilter<"BomItem"> | number | null
    totalCost?: FloatNullableWithAggregatesFilter<"BomItem"> | number | null
    leadTimeDays?: IntNullableWithAggregatesFilter<"BomItem"> | number | null
    supplier?: StringNullableWithAggregatesFilter<"BomItem"> | string | null
    specifications?: StringNullableWithAggregatesFilter<"BomItem"> | string | null
  }

  export type ManufacturingOrderWhereInput = {
    AND?: ManufacturingOrderWhereInput | ManufacturingOrderWhereInput[]
    OR?: ManufacturingOrderWhereInput[]
    NOT?: ManufacturingOrderWhereInput | ManufacturingOrderWhereInput[]
    id?: StringFilter<"ManufacturingOrder"> | string
    orderNumber?: StringFilter<"ManufacturingOrder"> | string
    productId?: StringFilter<"ManufacturingOrder"> | string
    quantity?: IntFilter<"ManufacturingOrder"> | number
    status?: EnumOrderStatusFilter<"ManufacturingOrder"> | $Enums.OrderStatus
    priority?: EnumPriorityFilter<"ManufacturingOrder"> | $Enums.Priority
    startDate?: DateTimeNullableFilter<"ManufacturingOrder"> | Date | string | null
    deadline?: DateTimeFilter<"ManufacturingOrder"> | Date | string
    completedAt?: DateTimeNullableFilter<"ManufacturingOrder"> | Date | string | null
    assignedToId?: StringNullableFilter<"ManufacturingOrder"> | string | null
    estimatedCost?: FloatNullableFilter<"ManufacturingOrder"> | number | null
    actualCost?: FloatNullableFilter<"ManufacturingOrder"> | number | null
    progress?: FloatFilter<"ManufacturingOrder"> | number
    notes?: StringNullableFilter<"ManufacturingOrder"> | string | null
    createdAt?: DateTimeFilter<"ManufacturingOrder"> | Date | string
    updatedAt?: DateTimeFilter<"ManufacturingOrder"> | Date | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    assignedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    workOrders?: WorkOrderListRelationFilter
  }

  export type ManufacturingOrderOrderByWithRelationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrderInput | SortOrder
    deadline?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    assignedToId?: SortOrderInput | SortOrder
    estimatedCost?: SortOrderInput | SortOrder
    actualCost?: SortOrderInput | SortOrder
    progress?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
    assignedTo?: UserOrderByWithRelationInput
    workOrders?: WorkOrderOrderByRelationAggregateInput
  }

  export type ManufacturingOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    orderNumber?: string
    AND?: ManufacturingOrderWhereInput | ManufacturingOrderWhereInput[]
    OR?: ManufacturingOrderWhereInput[]
    NOT?: ManufacturingOrderWhereInput | ManufacturingOrderWhereInput[]
    productId?: StringFilter<"ManufacturingOrder"> | string
    quantity?: IntFilter<"ManufacturingOrder"> | number
    status?: EnumOrderStatusFilter<"ManufacturingOrder"> | $Enums.OrderStatus
    priority?: EnumPriorityFilter<"ManufacturingOrder"> | $Enums.Priority
    startDate?: DateTimeNullableFilter<"ManufacturingOrder"> | Date | string | null
    deadline?: DateTimeFilter<"ManufacturingOrder"> | Date | string
    completedAt?: DateTimeNullableFilter<"ManufacturingOrder"> | Date | string | null
    assignedToId?: StringNullableFilter<"ManufacturingOrder"> | string | null
    estimatedCost?: FloatNullableFilter<"ManufacturingOrder"> | number | null
    actualCost?: FloatNullableFilter<"ManufacturingOrder"> | number | null
    progress?: FloatFilter<"ManufacturingOrder"> | number
    notes?: StringNullableFilter<"ManufacturingOrder"> | string | null
    createdAt?: DateTimeFilter<"ManufacturingOrder"> | Date | string
    updatedAt?: DateTimeFilter<"ManufacturingOrder"> | Date | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    assignedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    workOrders?: WorkOrderListRelationFilter
  }, "id" | "orderNumber">

  export type ManufacturingOrderOrderByWithAggregationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrderInput | SortOrder
    deadline?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    assignedToId?: SortOrderInput | SortOrder
    estimatedCost?: SortOrderInput | SortOrder
    actualCost?: SortOrderInput | SortOrder
    progress?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ManufacturingOrderCountOrderByAggregateInput
    _avg?: ManufacturingOrderAvgOrderByAggregateInput
    _max?: ManufacturingOrderMaxOrderByAggregateInput
    _min?: ManufacturingOrderMinOrderByAggregateInput
    _sum?: ManufacturingOrderSumOrderByAggregateInput
  }

  export type ManufacturingOrderScalarWhereWithAggregatesInput = {
    AND?: ManufacturingOrderScalarWhereWithAggregatesInput | ManufacturingOrderScalarWhereWithAggregatesInput[]
    OR?: ManufacturingOrderScalarWhereWithAggregatesInput[]
    NOT?: ManufacturingOrderScalarWhereWithAggregatesInput | ManufacturingOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ManufacturingOrder"> | string
    orderNumber?: StringWithAggregatesFilter<"ManufacturingOrder"> | string
    productId?: StringWithAggregatesFilter<"ManufacturingOrder"> | string
    quantity?: IntWithAggregatesFilter<"ManufacturingOrder"> | number
    status?: EnumOrderStatusWithAggregatesFilter<"ManufacturingOrder"> | $Enums.OrderStatus
    priority?: EnumPriorityWithAggregatesFilter<"ManufacturingOrder"> | $Enums.Priority
    startDate?: DateTimeNullableWithAggregatesFilter<"ManufacturingOrder"> | Date | string | null
    deadline?: DateTimeWithAggregatesFilter<"ManufacturingOrder"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"ManufacturingOrder"> | Date | string | null
    assignedToId?: StringNullableWithAggregatesFilter<"ManufacturingOrder"> | string | null
    estimatedCost?: FloatNullableWithAggregatesFilter<"ManufacturingOrder"> | number | null
    actualCost?: FloatNullableWithAggregatesFilter<"ManufacturingOrder"> | number | null
    progress?: FloatWithAggregatesFilter<"ManufacturingOrder"> | number
    notes?: StringNullableWithAggregatesFilter<"ManufacturingOrder"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ManufacturingOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ManufacturingOrder"> | Date | string
  }

  export type WorkCenterWhereInput = {
    AND?: WorkCenterWhereInput | WorkCenterWhereInput[]
    OR?: WorkCenterWhereInput[]
    NOT?: WorkCenterWhereInput | WorkCenterWhereInput[]
    id?: StringFilter<"WorkCenter"> | string
    name?: StringFilter<"WorkCenter"> | string
    type?: StringFilter<"WorkCenter"> | string
    location?: StringFilter<"WorkCenter"> | string
    status?: EnumWorkCenterStatusFilter<"WorkCenter"> | $Enums.WorkCenterStatus
    capacity?: FloatFilter<"WorkCenter"> | number
    hourlyCost?: FloatFilter<"WorkCenter"> | number
    utilization?: FloatFilter<"WorkCenter"> | number
    efficiency?: FloatFilter<"WorkCenter"> | number
    downtime?: FloatFilter<"WorkCenter"> | number
    totalHours?: FloatFilter<"WorkCenter"> | number
    productiveHours?: FloatFilter<"WorkCenter"> | number
    specifications?: JsonNullableFilter<"WorkCenter">
    maintenanceScheduled?: DateTimeNullableFilter<"WorkCenter"> | Date | string | null
    lastMaintenance?: DateTimeNullableFilter<"WorkCenter"> | Date | string | null
    isActive?: BoolFilter<"WorkCenter"> | boolean
    createdAt?: DateTimeFilter<"WorkCenter"> | Date | string
    updatedAt?: DateTimeFilter<"WorkCenter"> | Date | string
    workOrders?: WorkOrderListRelationFilter
  }

  export type WorkCenterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    location?: SortOrder
    status?: SortOrder
    capacity?: SortOrder
    hourlyCost?: SortOrder
    utilization?: SortOrder
    efficiency?: SortOrder
    downtime?: SortOrder
    totalHours?: SortOrder
    productiveHours?: SortOrder
    specifications?: SortOrderInput | SortOrder
    maintenanceScheduled?: SortOrderInput | SortOrder
    lastMaintenance?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workOrders?: WorkOrderOrderByRelationAggregateInput
  }

  export type WorkCenterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: WorkCenterWhereInput | WorkCenterWhereInput[]
    OR?: WorkCenterWhereInput[]
    NOT?: WorkCenterWhereInput | WorkCenterWhereInput[]
    type?: StringFilter<"WorkCenter"> | string
    location?: StringFilter<"WorkCenter"> | string
    status?: EnumWorkCenterStatusFilter<"WorkCenter"> | $Enums.WorkCenterStatus
    capacity?: FloatFilter<"WorkCenter"> | number
    hourlyCost?: FloatFilter<"WorkCenter"> | number
    utilization?: FloatFilter<"WorkCenter"> | number
    efficiency?: FloatFilter<"WorkCenter"> | number
    downtime?: FloatFilter<"WorkCenter"> | number
    totalHours?: FloatFilter<"WorkCenter"> | number
    productiveHours?: FloatFilter<"WorkCenter"> | number
    specifications?: JsonNullableFilter<"WorkCenter">
    maintenanceScheduled?: DateTimeNullableFilter<"WorkCenter"> | Date | string | null
    lastMaintenance?: DateTimeNullableFilter<"WorkCenter"> | Date | string | null
    isActive?: BoolFilter<"WorkCenter"> | boolean
    createdAt?: DateTimeFilter<"WorkCenter"> | Date | string
    updatedAt?: DateTimeFilter<"WorkCenter"> | Date | string
    workOrders?: WorkOrderListRelationFilter
  }, "id" | "name">

  export type WorkCenterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    location?: SortOrder
    status?: SortOrder
    capacity?: SortOrder
    hourlyCost?: SortOrder
    utilization?: SortOrder
    efficiency?: SortOrder
    downtime?: SortOrder
    totalHours?: SortOrder
    productiveHours?: SortOrder
    specifications?: SortOrderInput | SortOrder
    maintenanceScheduled?: SortOrderInput | SortOrder
    lastMaintenance?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkCenterCountOrderByAggregateInput
    _avg?: WorkCenterAvgOrderByAggregateInput
    _max?: WorkCenterMaxOrderByAggregateInput
    _min?: WorkCenterMinOrderByAggregateInput
    _sum?: WorkCenterSumOrderByAggregateInput
  }

  export type WorkCenterScalarWhereWithAggregatesInput = {
    AND?: WorkCenterScalarWhereWithAggregatesInput | WorkCenterScalarWhereWithAggregatesInput[]
    OR?: WorkCenterScalarWhereWithAggregatesInput[]
    NOT?: WorkCenterScalarWhereWithAggregatesInput | WorkCenterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkCenter"> | string
    name?: StringWithAggregatesFilter<"WorkCenter"> | string
    type?: StringWithAggregatesFilter<"WorkCenter"> | string
    location?: StringWithAggregatesFilter<"WorkCenter"> | string
    status?: EnumWorkCenterStatusWithAggregatesFilter<"WorkCenter"> | $Enums.WorkCenterStatus
    capacity?: FloatWithAggregatesFilter<"WorkCenter"> | number
    hourlyCost?: FloatWithAggregatesFilter<"WorkCenter"> | number
    utilization?: FloatWithAggregatesFilter<"WorkCenter"> | number
    efficiency?: FloatWithAggregatesFilter<"WorkCenter"> | number
    downtime?: FloatWithAggregatesFilter<"WorkCenter"> | number
    totalHours?: FloatWithAggregatesFilter<"WorkCenter"> | number
    productiveHours?: FloatWithAggregatesFilter<"WorkCenter"> | number
    specifications?: JsonNullableWithAggregatesFilter<"WorkCenter">
    maintenanceScheduled?: DateTimeNullableWithAggregatesFilter<"WorkCenter"> | Date | string | null
    lastMaintenance?: DateTimeNullableWithAggregatesFilter<"WorkCenter"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"WorkCenter"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"WorkCenter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkCenter"> | Date | string
  }

  export type WorkOrderWhereInput = {
    AND?: WorkOrderWhereInput | WorkOrderWhereInput[]
    OR?: WorkOrderWhereInput[]
    NOT?: WorkOrderWhereInput | WorkOrderWhereInput[]
    id?: StringFilter<"WorkOrder"> | string
    orderNumber?: StringFilter<"WorkOrder"> | string
    title?: StringFilter<"WorkOrder"> | string
    description?: StringNullableFilter<"WorkOrder"> | string | null
    manufacturingOrderId?: StringFilter<"WorkOrder"> | string
    workCenterId?: StringFilter<"WorkOrder"> | string
    assignedToId?: StringNullableFilter<"WorkOrder"> | string | null
    status?: EnumWorkOrderStatusFilter<"WorkOrder"> | $Enums.WorkOrderStatus
    priority?: EnumPriorityFilter<"WorkOrder"> | $Enums.Priority
    estimatedHours?: FloatFilter<"WorkOrder"> | number
    actualHours?: FloatNullableFilter<"WorkOrder"> | number | null
    progress?: FloatFilter<"WorkOrder"> | number
    startedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    pausedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    dueDate?: DateTimeFilter<"WorkOrder"> | Date | string
    pausedReason?: StringNullableFilter<"WorkOrder"> | string | null
    comments?: StringNullableFilter<"WorkOrder"> | string | null
    tags?: StringNullableListFilter<"WorkOrder">
    createdAt?: DateTimeFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeFilter<"WorkOrder"> | Date | string
    manufacturingOrder?: XOR<ManufacturingOrderRelationFilter, ManufacturingOrderWhereInput>
    workCenter?: XOR<WorkCenterRelationFilter, WorkCenterWhereInput>
    assignedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type WorkOrderOrderByWithRelationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    manufacturingOrderId?: SortOrder
    workCenterId?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrderInput | SortOrder
    progress?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    pausedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    dueDate?: SortOrder
    pausedReason?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    manufacturingOrder?: ManufacturingOrderOrderByWithRelationInput
    workCenter?: WorkCenterOrderByWithRelationInput
    assignedTo?: UserOrderByWithRelationInput
  }

  export type WorkOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    orderNumber?: string
    AND?: WorkOrderWhereInput | WorkOrderWhereInput[]
    OR?: WorkOrderWhereInput[]
    NOT?: WorkOrderWhereInput | WorkOrderWhereInput[]
    title?: StringFilter<"WorkOrder"> | string
    description?: StringNullableFilter<"WorkOrder"> | string | null
    manufacturingOrderId?: StringFilter<"WorkOrder"> | string
    workCenterId?: StringFilter<"WorkOrder"> | string
    assignedToId?: StringNullableFilter<"WorkOrder"> | string | null
    status?: EnumWorkOrderStatusFilter<"WorkOrder"> | $Enums.WorkOrderStatus
    priority?: EnumPriorityFilter<"WorkOrder"> | $Enums.Priority
    estimatedHours?: FloatFilter<"WorkOrder"> | number
    actualHours?: FloatNullableFilter<"WorkOrder"> | number | null
    progress?: FloatFilter<"WorkOrder"> | number
    startedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    pausedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    dueDate?: DateTimeFilter<"WorkOrder"> | Date | string
    pausedReason?: StringNullableFilter<"WorkOrder"> | string | null
    comments?: StringNullableFilter<"WorkOrder"> | string | null
    tags?: StringNullableListFilter<"WorkOrder">
    createdAt?: DateTimeFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeFilter<"WorkOrder"> | Date | string
    manufacturingOrder?: XOR<ManufacturingOrderRelationFilter, ManufacturingOrderWhereInput>
    workCenter?: XOR<WorkCenterRelationFilter, WorkCenterWhereInput>
    assignedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "orderNumber">

  export type WorkOrderOrderByWithAggregationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    manufacturingOrderId?: SortOrder
    workCenterId?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrderInput | SortOrder
    progress?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    pausedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    dueDate?: SortOrder
    pausedReason?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkOrderCountOrderByAggregateInput
    _avg?: WorkOrderAvgOrderByAggregateInput
    _max?: WorkOrderMaxOrderByAggregateInput
    _min?: WorkOrderMinOrderByAggregateInput
    _sum?: WorkOrderSumOrderByAggregateInput
  }

  export type WorkOrderScalarWhereWithAggregatesInput = {
    AND?: WorkOrderScalarWhereWithAggregatesInput | WorkOrderScalarWhereWithAggregatesInput[]
    OR?: WorkOrderScalarWhereWithAggregatesInput[]
    NOT?: WorkOrderScalarWhereWithAggregatesInput | WorkOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkOrder"> | string
    orderNumber?: StringWithAggregatesFilter<"WorkOrder"> | string
    title?: StringWithAggregatesFilter<"WorkOrder"> | string
    description?: StringNullableWithAggregatesFilter<"WorkOrder"> | string | null
    manufacturingOrderId?: StringWithAggregatesFilter<"WorkOrder"> | string
    workCenterId?: StringWithAggregatesFilter<"WorkOrder"> | string
    assignedToId?: StringNullableWithAggregatesFilter<"WorkOrder"> | string | null
    status?: EnumWorkOrderStatusWithAggregatesFilter<"WorkOrder"> | $Enums.WorkOrderStatus
    priority?: EnumPriorityWithAggregatesFilter<"WorkOrder"> | $Enums.Priority
    estimatedHours?: FloatWithAggregatesFilter<"WorkOrder"> | number
    actualHours?: FloatNullableWithAggregatesFilter<"WorkOrder"> | number | null
    progress?: FloatWithAggregatesFilter<"WorkOrder"> | number
    startedAt?: DateTimeNullableWithAggregatesFilter<"WorkOrder"> | Date | string | null
    pausedAt?: DateTimeNullableWithAggregatesFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"WorkOrder"> | Date | string | null
    dueDate?: DateTimeWithAggregatesFilter<"WorkOrder"> | Date | string
    pausedReason?: StringNullableWithAggregatesFilter<"WorkOrder"> | string | null
    comments?: StringNullableWithAggregatesFilter<"WorkOrder"> | string | null
    tags?: StringNullableListFilter<"WorkOrder">
    createdAt?: DateTimeWithAggregatesFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkOrder"> | Date | string
  }

  export type StockItemWhereInput = {
    AND?: StockItemWhereInput | StockItemWhereInput[]
    OR?: StockItemWhereInput[]
    NOT?: StockItemWhereInput | StockItemWhereInput[]
    id?: StringFilter<"StockItem"> | string
    productId?: StringFilter<"StockItem"> | string
    currentStock?: FloatFilter<"StockItem"> | number
    minStock?: FloatFilter<"StockItem"> | number
    maxStock?: FloatFilter<"StockItem"> | number
    unit?: StringFilter<"StockItem"> | string
    location?: StringFilter<"StockItem"> | string
    unitCost?: FloatNullableFilter<"StockItem"> | number | null
    totalValue?: FloatNullableFilter<"StockItem"> | number | null
    lastMovement?: DateTimeNullableFilter<"StockItem"> | Date | string | null
    supplier?: StringNullableFilter<"StockItem"> | string | null
    createdAt?: DateTimeFilter<"StockItem"> | Date | string
    updatedAt?: DateTimeFilter<"StockItem"> | Date | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    movements?: StockMovementListRelationFilter
  }

  export type StockItemOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    currentStock?: SortOrder
    minStock?: SortOrder
    maxStock?: SortOrder
    unit?: SortOrder
    location?: SortOrder
    unitCost?: SortOrderInput | SortOrder
    totalValue?: SortOrderInput | SortOrder
    lastMovement?: SortOrderInput | SortOrder
    supplier?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
    movements?: StockMovementOrderByRelationAggregateInput
  }

  export type StockItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    productId_location?: StockItemProductIdLocationCompoundUniqueInput
    AND?: StockItemWhereInput | StockItemWhereInput[]
    OR?: StockItemWhereInput[]
    NOT?: StockItemWhereInput | StockItemWhereInput[]
    productId?: StringFilter<"StockItem"> | string
    currentStock?: FloatFilter<"StockItem"> | number
    minStock?: FloatFilter<"StockItem"> | number
    maxStock?: FloatFilter<"StockItem"> | number
    unit?: StringFilter<"StockItem"> | string
    location?: StringFilter<"StockItem"> | string
    unitCost?: FloatNullableFilter<"StockItem"> | number | null
    totalValue?: FloatNullableFilter<"StockItem"> | number | null
    lastMovement?: DateTimeNullableFilter<"StockItem"> | Date | string | null
    supplier?: StringNullableFilter<"StockItem"> | string | null
    createdAt?: DateTimeFilter<"StockItem"> | Date | string
    updatedAt?: DateTimeFilter<"StockItem"> | Date | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    movements?: StockMovementListRelationFilter
  }, "id" | "productId_location">

  export type StockItemOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    currentStock?: SortOrder
    minStock?: SortOrder
    maxStock?: SortOrder
    unit?: SortOrder
    location?: SortOrder
    unitCost?: SortOrderInput | SortOrder
    totalValue?: SortOrderInput | SortOrder
    lastMovement?: SortOrderInput | SortOrder
    supplier?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StockItemCountOrderByAggregateInput
    _avg?: StockItemAvgOrderByAggregateInput
    _max?: StockItemMaxOrderByAggregateInput
    _min?: StockItemMinOrderByAggregateInput
    _sum?: StockItemSumOrderByAggregateInput
  }

  export type StockItemScalarWhereWithAggregatesInput = {
    AND?: StockItemScalarWhereWithAggregatesInput | StockItemScalarWhereWithAggregatesInput[]
    OR?: StockItemScalarWhereWithAggregatesInput[]
    NOT?: StockItemScalarWhereWithAggregatesInput | StockItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StockItem"> | string
    productId?: StringWithAggregatesFilter<"StockItem"> | string
    currentStock?: FloatWithAggregatesFilter<"StockItem"> | number
    minStock?: FloatWithAggregatesFilter<"StockItem"> | number
    maxStock?: FloatWithAggregatesFilter<"StockItem"> | number
    unit?: StringWithAggregatesFilter<"StockItem"> | string
    location?: StringWithAggregatesFilter<"StockItem"> | string
    unitCost?: FloatNullableWithAggregatesFilter<"StockItem"> | number | null
    totalValue?: FloatNullableWithAggregatesFilter<"StockItem"> | number | null
    lastMovement?: DateTimeNullableWithAggregatesFilter<"StockItem"> | Date | string | null
    supplier?: StringNullableWithAggregatesFilter<"StockItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StockItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StockItem"> | Date | string
  }

  export type StockMovementWhereInput = {
    AND?: StockMovementWhereInput | StockMovementWhereInput[]
    OR?: StockMovementWhereInput[]
    NOT?: StockMovementWhereInput | StockMovementWhereInput[]
    id?: StringFilter<"StockMovement"> | string
    stockItemId?: StringFilter<"StockMovement"> | string
    type?: EnumStockMovementTypeFilter<"StockMovement"> | $Enums.StockMovementType
    quantity?: FloatFilter<"StockMovement"> | number
    balanceBefore?: FloatFilter<"StockMovement"> | number
    balanceAfter?: FloatFilter<"StockMovement"> | number
    reference?: StringNullableFilter<"StockMovement"> | string | null
    reason?: StringFilter<"StockMovement"> | string
    operatorId?: StringFilter<"StockMovement"> | string
    timestamp?: DateTimeFilter<"StockMovement"> | Date | string
    stockItem?: XOR<StockItemRelationFilter, StockItemWhereInput>
    operator?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type StockMovementOrderByWithRelationInput = {
    id?: SortOrder
    stockItemId?: SortOrder
    type?: SortOrder
    quantity?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
    reference?: SortOrderInput | SortOrder
    reason?: SortOrder
    operatorId?: SortOrder
    timestamp?: SortOrder
    stockItem?: StockItemOrderByWithRelationInput
    operator?: UserOrderByWithRelationInput
  }

  export type StockMovementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StockMovementWhereInput | StockMovementWhereInput[]
    OR?: StockMovementWhereInput[]
    NOT?: StockMovementWhereInput | StockMovementWhereInput[]
    stockItemId?: StringFilter<"StockMovement"> | string
    type?: EnumStockMovementTypeFilter<"StockMovement"> | $Enums.StockMovementType
    quantity?: FloatFilter<"StockMovement"> | number
    balanceBefore?: FloatFilter<"StockMovement"> | number
    balanceAfter?: FloatFilter<"StockMovement"> | number
    reference?: StringNullableFilter<"StockMovement"> | string | null
    reason?: StringFilter<"StockMovement"> | string
    operatorId?: StringFilter<"StockMovement"> | string
    timestamp?: DateTimeFilter<"StockMovement"> | Date | string
    stockItem?: XOR<StockItemRelationFilter, StockItemWhereInput>
    operator?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type StockMovementOrderByWithAggregationInput = {
    id?: SortOrder
    stockItemId?: SortOrder
    type?: SortOrder
    quantity?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
    reference?: SortOrderInput | SortOrder
    reason?: SortOrder
    operatorId?: SortOrder
    timestamp?: SortOrder
    _count?: StockMovementCountOrderByAggregateInput
    _avg?: StockMovementAvgOrderByAggregateInput
    _max?: StockMovementMaxOrderByAggregateInput
    _min?: StockMovementMinOrderByAggregateInput
    _sum?: StockMovementSumOrderByAggregateInput
  }

  export type StockMovementScalarWhereWithAggregatesInput = {
    AND?: StockMovementScalarWhereWithAggregatesInput | StockMovementScalarWhereWithAggregatesInput[]
    OR?: StockMovementScalarWhereWithAggregatesInput[]
    NOT?: StockMovementScalarWhereWithAggregatesInput | StockMovementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StockMovement"> | string
    stockItemId?: StringWithAggregatesFilter<"StockMovement"> | string
    type?: EnumStockMovementTypeWithAggregatesFilter<"StockMovement"> | $Enums.StockMovementType
    quantity?: FloatWithAggregatesFilter<"StockMovement"> | number
    balanceBefore?: FloatWithAggregatesFilter<"StockMovement"> | number
    balanceAfter?: FloatWithAggregatesFilter<"StockMovement"> | number
    reference?: StringNullableWithAggregatesFilter<"StockMovement"> | string | null
    reason?: StringWithAggregatesFilter<"StockMovement"> | string
    operatorId?: StringWithAggregatesFilter<"StockMovement"> | string
    timestamp?: DateTimeWithAggregatesFilter<"StockMovement"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    position: string
    department: string
    location?: string | null
    avatar?: string | null
    bio?: string | null
    skills?: UserCreateskillsInput | string[]
    role?: $Enums.UserRole
    isActive?: boolean
    joinDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderCreateNestedManyWithoutAssignedToInput
    workOrders?: WorkOrderCreateNestedManyWithoutAssignedToInput
    stockMovements?: StockMovementCreateNestedManyWithoutOperatorInput
    certifications?: CertificationCreateNestedManyWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    position: string
    department: string
    location?: string | null
    avatar?: string | null
    bio?: string | null
    skills?: UserCreateskillsInput | string[]
    role?: $Enums.UserRole
    isActive?: boolean
    joinDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedCreateNestedManyWithoutAssignedToInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutAssignedToInput
    stockMovements?: StockMovementUncheckedCreateNestedManyWithoutOperatorInput
    certifications?: CertificationUncheckedCreateNestedManyWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: UserUpdateskillsInput | string[]
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUpdateManyWithoutAssignedToNestedInput
    workOrders?: WorkOrderUpdateManyWithoutAssignedToNestedInput
    stockMovements?: StockMovementUpdateManyWithoutOperatorNestedInput
    certifications?: CertificationUpdateManyWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: UserUpdateskillsInput | string[]
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    stockMovements?: StockMovementUncheckedUpdateManyWithoutOperatorNestedInput
    certifications?: CertificationUncheckedUpdateManyWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    position: string
    department: string
    location?: string | null
    avatar?: string | null
    bio?: string | null
    skills?: UserCreateskillsInput | string[]
    role?: $Enums.UserRole
    isActive?: boolean
    joinDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: UserUpdateskillsInput | string[]
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: UserUpdateskillsInput | string[]
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificationCreateInput = {
    id?: string
    name: string
    issuer: string
    issueDate: Date | string
    expiryDate?: Date | string | null
    isVerified?: boolean
    user: UserCreateNestedOneWithoutCertificationsInput
  }

  export type CertificationUncheckedCreateInput = {
    id?: string
    name: string
    issuer: string
    issueDate: Date | string
    expiryDate?: Date | string | null
    isVerified?: boolean
    userId: string
  }

  export type CertificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    issuer?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutCertificationsNestedInput
  }

  export type CertificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    issuer?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CertificationCreateManyInput = {
    id?: string
    name: string
    issuer: string
    issueDate: Date | string
    expiryDate?: Date | string | null
    isVerified?: boolean
    userId: string
  }

  export type CertificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    issuer?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CertificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    issuer?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserActivityCreateInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutActivitiesInput
  }

  export type UserActivityUncheckedCreateInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    userId: string
  }

  export type UserActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutActivitiesNestedInput
  }

  export type UserActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserActivityCreateManyInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    userId: string
  }

  export type UserActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    unitCost?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderCreateNestedManyWithoutProductInput
    billsOfMaterials?: BillOfMaterialsCreateNestedManyWithoutProductInput
    bomComponents?: BomItemCreateNestedManyWithoutComponentInput
    stockItems?: StockItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    unitCost?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedCreateNestedManyWithoutProductInput
    billsOfMaterials?: BillOfMaterialsUncheckedCreateNestedManyWithoutProductInput
    bomComponents?: BomItemUncheckedCreateNestedManyWithoutComponentInput
    stockItems?: StockItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUpdateManyWithoutProductNestedInput
    billsOfMaterials?: BillOfMaterialsUpdateManyWithoutProductNestedInput
    bomComponents?: BomItemUpdateManyWithoutComponentNestedInput
    stockItems?: StockItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedUpdateManyWithoutProductNestedInput
    billsOfMaterials?: BillOfMaterialsUncheckedUpdateManyWithoutProductNestedInput
    bomComponents?: BomItemUncheckedUpdateManyWithoutComponentNestedInput
    stockItems?: StockItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    unitCost?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillOfMaterialsCreateInput = {
    id?: string
    version: string
    status?: $Enums.BomStatus
    description?: string | null
    totalCost?: number | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutBillsOfMaterialsInput
    items?: BomItemCreateNestedManyWithoutBomInput
  }

  export type BillOfMaterialsUncheckedCreateInput = {
    id?: string
    productId: string
    version: string
    status?: $Enums.BomStatus
    description?: string | null
    totalCost?: number | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: BomItemUncheckedCreateNestedManyWithoutBomInput
  }

  export type BillOfMaterialsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: EnumBomStatusFieldUpdateOperationsInput | $Enums.BomStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutBillsOfMaterialsNestedInput
    items?: BomItemUpdateManyWithoutBomNestedInput
  }

  export type BillOfMaterialsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: EnumBomStatusFieldUpdateOperationsInput | $Enums.BomStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: BomItemUncheckedUpdateManyWithoutBomNestedInput
  }

  export type BillOfMaterialsCreateManyInput = {
    id?: string
    productId: string
    version: string
    status?: $Enums.BomStatus
    description?: string | null
    totalCost?: number | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillOfMaterialsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: EnumBomStatusFieldUpdateOperationsInput | $Enums.BomStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillOfMaterialsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: EnumBomStatusFieldUpdateOperationsInput | $Enums.BomStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BomItemCreateInput = {
    id?: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    leadTimeDays?: number | null
    supplier?: string | null
    specifications?: string | null
    bom: BillOfMaterialsCreateNestedOneWithoutItemsInput
    component: ProductCreateNestedOneWithoutBomComponentsInput
  }

  export type BomItemUncheckedCreateInput = {
    id?: string
    bomId: string
    componentId: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    leadTimeDays?: number | null
    supplier?: string | null
    specifications?: string | null
  }

  export type BomItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableStringFieldUpdateOperationsInput | string | null
    bom?: BillOfMaterialsUpdateOneRequiredWithoutItemsNestedInput
    component?: ProductUpdateOneRequiredWithoutBomComponentsNestedInput
  }

  export type BomItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bomId?: StringFieldUpdateOperationsInput | string
    componentId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BomItemCreateManyInput = {
    id?: string
    bomId: string
    componentId: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    leadTimeDays?: number | null
    supplier?: string | null
    specifications?: string | null
  }

  export type BomItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BomItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    bomId?: StringFieldUpdateOperationsInput | string
    componentId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ManufacturingOrderCreateInput = {
    id?: string
    orderNumber: string
    quantity: number
    status?: $Enums.OrderStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    deadline: Date | string
    completedAt?: Date | string | null
    estimatedCost?: number | null
    actualCost?: number | null
    progress?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutManufacturingOrdersInput
    assignedTo?: UserCreateNestedOneWithoutManufacturingOrdersInput
    workOrders?: WorkOrderCreateNestedManyWithoutManufacturingOrderInput
  }

  export type ManufacturingOrderUncheckedCreateInput = {
    id?: string
    orderNumber: string
    productId: string
    quantity: number
    status?: $Enums.OrderStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    deadline: Date | string
    completedAt?: Date | string | null
    assignedToId?: string | null
    estimatedCost?: number | null
    actualCost?: number | null
    progress?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutManufacturingOrderInput
  }

  export type ManufacturingOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableFloatFieldUpdateOperationsInput | number | null
    actualCost?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutManufacturingOrdersNestedInput
    assignedTo?: UserUpdateOneWithoutManufacturingOrdersNestedInput
    workOrders?: WorkOrderUpdateManyWithoutManufacturingOrderNestedInput
  }

  export type ManufacturingOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedCost?: NullableFloatFieldUpdateOperationsInput | number | null
    actualCost?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderUncheckedUpdateManyWithoutManufacturingOrderNestedInput
  }

  export type ManufacturingOrderCreateManyInput = {
    id?: string
    orderNumber: string
    productId: string
    quantity: number
    status?: $Enums.OrderStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    deadline: Date | string
    completedAt?: Date | string | null
    assignedToId?: string | null
    estimatedCost?: number | null
    actualCost?: number | null
    progress?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ManufacturingOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableFloatFieldUpdateOperationsInput | number | null
    actualCost?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManufacturingOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedCost?: NullableFloatFieldUpdateOperationsInput | number | null
    actualCost?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkCenterCreateInput = {
    id?: string
    name: string
    type: string
    location: string
    status?: $Enums.WorkCenterStatus
    capacity?: number
    hourlyCost: number
    utilization?: number
    efficiency?: number
    downtime?: number
    totalHours?: number
    productiveHours?: number
    specifications?: NullableJsonNullValueInput | InputJsonValue
    maintenanceScheduled?: Date | string | null
    lastMaintenance?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderCreateNestedManyWithoutWorkCenterInput
  }

  export type WorkCenterUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    location: string
    status?: $Enums.WorkCenterStatus
    capacity?: number
    hourlyCost: number
    utilization?: number
    efficiency?: number
    downtime?: number
    totalHours?: number
    productiveHours?: number
    specifications?: NullableJsonNullValueInput | InputJsonValue
    maintenanceScheduled?: Date | string | null
    lastMaintenance?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutWorkCenterInput
  }

  export type WorkCenterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkCenterStatusFieldUpdateOperationsInput | $Enums.WorkCenterStatus
    capacity?: FloatFieldUpdateOperationsInput | number
    hourlyCost?: FloatFieldUpdateOperationsInput | number
    utilization?: FloatFieldUpdateOperationsInput | number
    efficiency?: FloatFieldUpdateOperationsInput | number
    downtime?: FloatFieldUpdateOperationsInput | number
    totalHours?: FloatFieldUpdateOperationsInput | number
    productiveHours?: FloatFieldUpdateOperationsInput | number
    specifications?: NullableJsonNullValueInput | InputJsonValue
    maintenanceScheduled?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderUpdateManyWithoutWorkCenterNestedInput
  }

  export type WorkCenterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkCenterStatusFieldUpdateOperationsInput | $Enums.WorkCenterStatus
    capacity?: FloatFieldUpdateOperationsInput | number
    hourlyCost?: FloatFieldUpdateOperationsInput | number
    utilization?: FloatFieldUpdateOperationsInput | number
    efficiency?: FloatFieldUpdateOperationsInput | number
    downtime?: FloatFieldUpdateOperationsInput | number
    totalHours?: FloatFieldUpdateOperationsInput | number
    productiveHours?: FloatFieldUpdateOperationsInput | number
    specifications?: NullableJsonNullValueInput | InputJsonValue
    maintenanceScheduled?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderUncheckedUpdateManyWithoutWorkCenterNestedInput
  }

  export type WorkCenterCreateManyInput = {
    id?: string
    name: string
    type: string
    location: string
    status?: $Enums.WorkCenterStatus
    capacity?: number
    hourlyCost: number
    utilization?: number
    efficiency?: number
    downtime?: number
    totalHours?: number
    productiveHours?: number
    specifications?: NullableJsonNullValueInput | InputJsonValue
    maintenanceScheduled?: Date | string | null
    lastMaintenance?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkCenterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkCenterStatusFieldUpdateOperationsInput | $Enums.WorkCenterStatus
    capacity?: FloatFieldUpdateOperationsInput | number
    hourlyCost?: FloatFieldUpdateOperationsInput | number
    utilization?: FloatFieldUpdateOperationsInput | number
    efficiency?: FloatFieldUpdateOperationsInput | number
    downtime?: FloatFieldUpdateOperationsInput | number
    totalHours?: FloatFieldUpdateOperationsInput | number
    productiveHours?: FloatFieldUpdateOperationsInput | number
    specifications?: NullableJsonNullValueInput | InputJsonValue
    maintenanceScheduled?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkCenterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkCenterStatusFieldUpdateOperationsInput | $Enums.WorkCenterStatus
    capacity?: FloatFieldUpdateOperationsInput | number
    hourlyCost?: FloatFieldUpdateOperationsInput | number
    utilization?: FloatFieldUpdateOperationsInput | number
    efficiency?: FloatFieldUpdateOperationsInput | number
    downtime?: FloatFieldUpdateOperationsInput | number
    totalHours?: FloatFieldUpdateOperationsInput | number
    productiveHours?: FloatFieldUpdateOperationsInput | number
    specifications?: NullableJsonNullValueInput | InputJsonValue
    maintenanceScheduled?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderCreateInput = {
    id?: string
    orderNumber: string
    title: string
    description?: string | null
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.Priority
    estimatedHours: number
    actualHours?: number | null
    progress?: number
    startedAt?: Date | string | null
    pausedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate: Date | string
    pausedReason?: string | null
    comments?: string | null
    tags?: WorkOrderCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrder: ManufacturingOrderCreateNestedOneWithoutWorkOrdersInput
    workCenter: WorkCenterCreateNestedOneWithoutWorkOrdersInput
    assignedTo?: UserCreateNestedOneWithoutWorkOrdersInput
  }

  export type WorkOrderUncheckedCreateInput = {
    id?: string
    orderNumber: string
    title: string
    description?: string | null
    manufacturingOrderId: string
    workCenterId: string
    assignedToId?: string | null
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.Priority
    estimatedHours: number
    actualHours?: number | null
    progress?: number
    startedAt?: Date | string | null
    pausedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate: Date | string
    pausedReason?: string | null
    comments?: string | null
    tags?: WorkOrderCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    estimatedHours?: FloatFieldUpdateOperationsInput | number
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedReason?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: WorkOrderUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrder?: ManufacturingOrderUpdateOneRequiredWithoutWorkOrdersNestedInput
    workCenter?: WorkCenterUpdateOneRequiredWithoutWorkOrdersNestedInput
    assignedTo?: UserUpdateOneWithoutWorkOrdersNestedInput
  }

  export type WorkOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturingOrderId?: StringFieldUpdateOperationsInput | string
    workCenterId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    estimatedHours?: FloatFieldUpdateOperationsInput | number
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedReason?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: WorkOrderUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderCreateManyInput = {
    id?: string
    orderNumber: string
    title: string
    description?: string | null
    manufacturingOrderId: string
    workCenterId: string
    assignedToId?: string | null
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.Priority
    estimatedHours: number
    actualHours?: number | null
    progress?: number
    startedAt?: Date | string | null
    pausedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate: Date | string
    pausedReason?: string | null
    comments?: string | null
    tags?: WorkOrderCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    estimatedHours?: FloatFieldUpdateOperationsInput | number
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedReason?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: WorkOrderUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturingOrderId?: StringFieldUpdateOperationsInput | string
    workCenterId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    estimatedHours?: FloatFieldUpdateOperationsInput | number
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedReason?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: WorkOrderUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockItemCreateInput = {
    id?: string
    currentStock: number
    minStock: number
    maxStock: number
    unit: string
    location: string
    unitCost?: number | null
    totalValue?: number | null
    lastMovement?: Date | string | null
    supplier?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutStockItemsInput
    movements?: StockMovementCreateNestedManyWithoutStockItemInput
  }

  export type StockItemUncheckedCreateInput = {
    id?: string
    productId: string
    currentStock: number
    minStock: number
    maxStock: number
    unit: string
    location: string
    unitCost?: number | null
    totalValue?: number | null
    lastMovement?: Date | string | null
    supplier?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    movements?: StockMovementUncheckedCreateNestedManyWithoutStockItemInput
  }

  export type StockItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentStock?: FloatFieldUpdateOperationsInput | number
    minStock?: FloatFieldUpdateOperationsInput | number
    maxStock?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalValue?: NullableFloatFieldUpdateOperationsInput | number | null
    lastMovement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutStockItemsNestedInput
    movements?: StockMovementUpdateManyWithoutStockItemNestedInput
  }

  export type StockItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    currentStock?: FloatFieldUpdateOperationsInput | number
    minStock?: FloatFieldUpdateOperationsInput | number
    maxStock?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalValue?: NullableFloatFieldUpdateOperationsInput | number | null
    lastMovement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    movements?: StockMovementUncheckedUpdateManyWithoutStockItemNestedInput
  }

  export type StockItemCreateManyInput = {
    id?: string
    productId: string
    currentStock: number
    minStock: number
    maxStock: number
    unit: string
    location: string
    unitCost?: number | null
    totalValue?: number | null
    lastMovement?: Date | string | null
    supplier?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentStock?: FloatFieldUpdateOperationsInput | number
    minStock?: FloatFieldUpdateOperationsInput | number
    maxStock?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalValue?: NullableFloatFieldUpdateOperationsInput | number | null
    lastMovement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    currentStock?: FloatFieldUpdateOperationsInput | number
    minStock?: FloatFieldUpdateOperationsInput | number
    maxStock?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalValue?: NullableFloatFieldUpdateOperationsInput | number | null
    lastMovement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementCreateInput = {
    id?: string
    type: $Enums.StockMovementType
    quantity: number
    balanceBefore: number
    balanceAfter: number
    reference?: string | null
    reason: string
    timestamp?: Date | string
    stockItem: StockItemCreateNestedOneWithoutMovementsInput
    operator: UserCreateNestedOneWithoutStockMovementsInput
  }

  export type StockMovementUncheckedCreateInput = {
    id?: string
    stockItemId: string
    type: $Enums.StockMovementType
    quantity: number
    balanceBefore: number
    balanceAfter: number
    reference?: string | null
    reason: string
    operatorId: string
    timestamp?: Date | string
  }

  export type StockMovementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumStockMovementTypeFieldUpdateOperationsInput | $Enums.StockMovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    balanceBefore?: FloatFieldUpdateOperationsInput | number
    balanceAfter?: FloatFieldUpdateOperationsInput | number
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    stockItem?: StockItemUpdateOneRequiredWithoutMovementsNestedInput
    operator?: UserUpdateOneRequiredWithoutStockMovementsNestedInput
  }

  export type StockMovementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stockItemId?: StringFieldUpdateOperationsInput | string
    type?: EnumStockMovementTypeFieldUpdateOperationsInput | $Enums.StockMovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    balanceBefore?: FloatFieldUpdateOperationsInput | number
    balanceAfter?: FloatFieldUpdateOperationsInput | number
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementCreateManyInput = {
    id?: string
    stockItemId: string
    type: $Enums.StockMovementType
    quantity: number
    balanceBefore: number
    balanceAfter: number
    reference?: string | null
    reason: string
    operatorId: string
    timestamp?: Date | string
  }

  export type StockMovementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumStockMovementTypeFieldUpdateOperationsInput | $Enums.StockMovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    balanceBefore?: FloatFieldUpdateOperationsInput | number
    balanceAfter?: FloatFieldUpdateOperationsInput | number
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    stockItemId?: StringFieldUpdateOperationsInput | string
    type?: EnumStockMovementTypeFieldUpdateOperationsInput | $Enums.StockMovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    balanceBefore?: FloatFieldUpdateOperationsInput | number
    balanceAfter?: FloatFieldUpdateOperationsInput | number
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ManufacturingOrderListRelationFilter = {
    every?: ManufacturingOrderWhereInput
    some?: ManufacturingOrderWhereInput
    none?: ManufacturingOrderWhereInput
  }

  export type WorkOrderListRelationFilter = {
    every?: WorkOrderWhereInput
    some?: WorkOrderWhereInput
    none?: WorkOrderWhereInput
  }

  export type StockMovementListRelationFilter = {
    every?: StockMovementWhereInput
    some?: StockMovementWhereInput
    none?: StockMovementWhereInput
  }

  export type CertificationListRelationFilter = {
    every?: CertificationWhereInput
    some?: CertificationWhereInput
    none?: CertificationWhereInput
  }

  export type UserActivityListRelationFilter = {
    every?: UserActivityWhereInput
    some?: UserActivityWhereInput
    none?: UserActivityWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ManufacturingOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StockMovementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CertificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    position?: SortOrder
    department?: SortOrder
    location?: SortOrder
    avatar?: SortOrder
    bio?: SortOrder
    skills?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    joinDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    position?: SortOrder
    department?: SortOrder
    location?: SortOrder
    avatar?: SortOrder
    bio?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    joinDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    position?: SortOrder
    department?: SortOrder
    location?: SortOrder
    avatar?: SortOrder
    bio?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    joinDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CertificationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    issuer?: SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrder
    isVerified?: SortOrder
    userId?: SortOrder
  }

  export type CertificationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    issuer?: SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrder
    isVerified?: SortOrder
    userId?: SortOrder
  }

  export type CertificationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    issuer?: SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrder
    isVerified?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserActivityCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
  }

  export type UserActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
  }

  export type UserActivityMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BillOfMaterialsListRelationFilter = {
    every?: BillOfMaterialsWhereInput
    some?: BillOfMaterialsWhereInput
    none?: BillOfMaterialsWhereInput
  }

  export type BomItemListRelationFilter = {
    every?: BomItemWhereInput
    some?: BomItemWhereInput
    none?: BomItemWhereInput
  }

  export type StockItemListRelationFilter = {
    every?: StockItemWhereInput
    some?: StockItemWhereInput
    none?: StockItemWhereInput
  }

  export type BillOfMaterialsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BomItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StockItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    unitCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    unitCost?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    unitCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    unitCost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    unitCost?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumBomStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BomStatus | EnumBomStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BomStatus[] | ListEnumBomStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BomStatus[] | ListEnumBomStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBomStatusFilter<$PrismaModel> | $Enums.BomStatus
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type BillOfMaterialsProductIdVersionCompoundUniqueInput = {
    productId: string
    version: string
  }

  export type BillOfMaterialsCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    version?: SortOrder
    status?: SortOrder
    description?: SortOrder
    totalCost?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillOfMaterialsAvgOrderByAggregateInput = {
    totalCost?: SortOrder
  }

  export type BillOfMaterialsMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    version?: SortOrder
    status?: SortOrder
    description?: SortOrder
    totalCost?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillOfMaterialsMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    version?: SortOrder
    status?: SortOrder
    description?: SortOrder
    totalCost?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillOfMaterialsSumOrderByAggregateInput = {
    totalCost?: SortOrder
  }

  export type EnumBomStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BomStatus | EnumBomStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BomStatus[] | ListEnumBomStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BomStatus[] | ListEnumBomStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBomStatusWithAggregatesFilter<$PrismaModel> | $Enums.BomStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBomStatusFilter<$PrismaModel>
    _max?: NestedEnumBomStatusFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BillOfMaterialsRelationFilter = {
    is?: BillOfMaterialsWhereInput
    isNot?: BillOfMaterialsWhereInput
  }

  export type BomItemCountOrderByAggregateInput = {
    id?: SortOrder
    bomId?: SortOrder
    componentId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    leadTimeDays?: SortOrder
    supplier?: SortOrder
    specifications?: SortOrder
  }

  export type BomItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    leadTimeDays?: SortOrder
  }

  export type BomItemMaxOrderByAggregateInput = {
    id?: SortOrder
    bomId?: SortOrder
    componentId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    leadTimeDays?: SortOrder
    supplier?: SortOrder
    specifications?: SortOrder
  }

  export type BomItemMinOrderByAggregateInput = {
    id?: SortOrder
    bomId?: SortOrder
    componentId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    leadTimeDays?: SortOrder
    supplier?: SortOrder
    specifications?: SortOrder
  }

  export type BomItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitCost?: SortOrder
    totalCost?: SortOrder
    leadTimeDays?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type EnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ManufacturingOrderCountOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    deadline?: SortOrder
    completedAt?: SortOrder
    assignedToId?: SortOrder
    estimatedCost?: SortOrder
    actualCost?: SortOrder
    progress?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ManufacturingOrderAvgOrderByAggregateInput = {
    quantity?: SortOrder
    estimatedCost?: SortOrder
    actualCost?: SortOrder
    progress?: SortOrder
  }

  export type ManufacturingOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    deadline?: SortOrder
    completedAt?: SortOrder
    assignedToId?: SortOrder
    estimatedCost?: SortOrder
    actualCost?: SortOrder
    progress?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ManufacturingOrderMinOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    deadline?: SortOrder
    completedAt?: SortOrder
    assignedToId?: SortOrder
    estimatedCost?: SortOrder
    actualCost?: SortOrder
    progress?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ManufacturingOrderSumOrderByAggregateInput = {
    quantity?: SortOrder
    estimatedCost?: SortOrder
    actualCost?: SortOrder
    progress?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type EnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type EnumWorkCenterStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkCenterStatus | EnumWorkCenterStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkCenterStatus[] | ListEnumWorkCenterStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkCenterStatus[] | ListEnumWorkCenterStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkCenterStatusFilter<$PrismaModel> | $Enums.WorkCenterStatus
  }

  export type WorkCenterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    location?: SortOrder
    status?: SortOrder
    capacity?: SortOrder
    hourlyCost?: SortOrder
    utilization?: SortOrder
    efficiency?: SortOrder
    downtime?: SortOrder
    totalHours?: SortOrder
    productiveHours?: SortOrder
    specifications?: SortOrder
    maintenanceScheduled?: SortOrder
    lastMaintenance?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkCenterAvgOrderByAggregateInput = {
    capacity?: SortOrder
    hourlyCost?: SortOrder
    utilization?: SortOrder
    efficiency?: SortOrder
    downtime?: SortOrder
    totalHours?: SortOrder
    productiveHours?: SortOrder
  }

  export type WorkCenterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    location?: SortOrder
    status?: SortOrder
    capacity?: SortOrder
    hourlyCost?: SortOrder
    utilization?: SortOrder
    efficiency?: SortOrder
    downtime?: SortOrder
    totalHours?: SortOrder
    productiveHours?: SortOrder
    maintenanceScheduled?: SortOrder
    lastMaintenance?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkCenterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    location?: SortOrder
    status?: SortOrder
    capacity?: SortOrder
    hourlyCost?: SortOrder
    utilization?: SortOrder
    efficiency?: SortOrder
    downtime?: SortOrder
    totalHours?: SortOrder
    productiveHours?: SortOrder
    maintenanceScheduled?: SortOrder
    lastMaintenance?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkCenterSumOrderByAggregateInput = {
    capacity?: SortOrder
    hourlyCost?: SortOrder
    utilization?: SortOrder
    efficiency?: SortOrder
    downtime?: SortOrder
    totalHours?: SortOrder
    productiveHours?: SortOrder
  }

  export type EnumWorkCenterStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkCenterStatus | EnumWorkCenterStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkCenterStatus[] | ListEnumWorkCenterStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkCenterStatus[] | ListEnumWorkCenterStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkCenterStatusWithAggregatesFilter<$PrismaModel> | $Enums.WorkCenterStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkCenterStatusFilter<$PrismaModel>
    _max?: NestedEnumWorkCenterStatusFilter<$PrismaModel>
  }

  export type EnumWorkOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkOrderStatus | EnumWorkOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkOrderStatusFilter<$PrismaModel> | $Enums.WorkOrderStatus
  }

  export type ManufacturingOrderRelationFilter = {
    is?: ManufacturingOrderWhereInput
    isNot?: ManufacturingOrderWhereInput
  }

  export type WorkCenterRelationFilter = {
    is?: WorkCenterWhereInput
    isNot?: WorkCenterWhereInput
  }

  export type WorkOrderCountOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    manufacturingOrderId?: SortOrder
    workCenterId?: SortOrder
    assignedToId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    progress?: SortOrder
    startedAt?: SortOrder
    pausedAt?: SortOrder
    completedAt?: SortOrder
    dueDate?: SortOrder
    pausedReason?: SortOrder
    comments?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkOrderAvgOrderByAggregateInput = {
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    progress?: SortOrder
  }

  export type WorkOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    manufacturingOrderId?: SortOrder
    workCenterId?: SortOrder
    assignedToId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    progress?: SortOrder
    startedAt?: SortOrder
    pausedAt?: SortOrder
    completedAt?: SortOrder
    dueDate?: SortOrder
    pausedReason?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkOrderMinOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    manufacturingOrderId?: SortOrder
    workCenterId?: SortOrder
    assignedToId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    progress?: SortOrder
    startedAt?: SortOrder
    pausedAt?: SortOrder
    completedAt?: SortOrder
    dueDate?: SortOrder
    pausedReason?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkOrderSumOrderByAggregateInput = {
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    progress?: SortOrder
  }

  export type EnumWorkOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkOrderStatus | EnumWorkOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.WorkOrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumWorkOrderStatusFilter<$PrismaModel>
  }

  export type StockItemProductIdLocationCompoundUniqueInput = {
    productId: string
    location: string
  }

  export type StockItemCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    currentStock?: SortOrder
    minStock?: SortOrder
    maxStock?: SortOrder
    unit?: SortOrder
    location?: SortOrder
    unitCost?: SortOrder
    totalValue?: SortOrder
    lastMovement?: SortOrder
    supplier?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockItemAvgOrderByAggregateInput = {
    currentStock?: SortOrder
    minStock?: SortOrder
    maxStock?: SortOrder
    unitCost?: SortOrder
    totalValue?: SortOrder
  }

  export type StockItemMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    currentStock?: SortOrder
    minStock?: SortOrder
    maxStock?: SortOrder
    unit?: SortOrder
    location?: SortOrder
    unitCost?: SortOrder
    totalValue?: SortOrder
    lastMovement?: SortOrder
    supplier?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockItemMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    currentStock?: SortOrder
    minStock?: SortOrder
    maxStock?: SortOrder
    unit?: SortOrder
    location?: SortOrder
    unitCost?: SortOrder
    totalValue?: SortOrder
    lastMovement?: SortOrder
    supplier?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockItemSumOrderByAggregateInput = {
    currentStock?: SortOrder
    minStock?: SortOrder
    maxStock?: SortOrder
    unitCost?: SortOrder
    totalValue?: SortOrder
  }

  export type EnumStockMovementTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StockMovementType | EnumStockMovementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StockMovementType[] | ListEnumStockMovementTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StockMovementType[] | ListEnumStockMovementTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStockMovementTypeFilter<$PrismaModel> | $Enums.StockMovementType
  }

  export type StockItemRelationFilter = {
    is?: StockItemWhereInput
    isNot?: StockItemWhereInput
  }

  export type StockMovementCountOrderByAggregateInput = {
    id?: SortOrder
    stockItemId?: SortOrder
    type?: SortOrder
    quantity?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
    reference?: SortOrder
    reason?: SortOrder
    operatorId?: SortOrder
    timestamp?: SortOrder
  }

  export type StockMovementAvgOrderByAggregateInput = {
    quantity?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
  }

  export type StockMovementMaxOrderByAggregateInput = {
    id?: SortOrder
    stockItemId?: SortOrder
    type?: SortOrder
    quantity?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
    reference?: SortOrder
    reason?: SortOrder
    operatorId?: SortOrder
    timestamp?: SortOrder
  }

  export type StockMovementMinOrderByAggregateInput = {
    id?: SortOrder
    stockItemId?: SortOrder
    type?: SortOrder
    quantity?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
    reference?: SortOrder
    reason?: SortOrder
    operatorId?: SortOrder
    timestamp?: SortOrder
  }

  export type StockMovementSumOrderByAggregateInput = {
    quantity?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
  }

  export type EnumStockMovementTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StockMovementType | EnumStockMovementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StockMovementType[] | ListEnumStockMovementTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StockMovementType[] | ListEnumStockMovementTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStockMovementTypeWithAggregatesFilter<$PrismaModel> | $Enums.StockMovementType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStockMovementTypeFilter<$PrismaModel>
    _max?: NestedEnumStockMovementTypeFilter<$PrismaModel>
  }

  export type UserCreateskillsInput = {
    set: string[]
  }

  export type ManufacturingOrderCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<ManufacturingOrderCreateWithoutAssignedToInput, ManufacturingOrderUncheckedCreateWithoutAssignedToInput> | ManufacturingOrderCreateWithoutAssignedToInput[] | ManufacturingOrderUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ManufacturingOrderCreateOrConnectWithoutAssignedToInput | ManufacturingOrderCreateOrConnectWithoutAssignedToInput[]
    createMany?: ManufacturingOrderCreateManyAssignedToInputEnvelope
    connect?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
  }

  export type WorkOrderCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<WorkOrderCreateWithoutAssignedToInput, WorkOrderUncheckedCreateWithoutAssignedToInput> | WorkOrderCreateWithoutAssignedToInput[] | WorkOrderUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutAssignedToInput | WorkOrderCreateOrConnectWithoutAssignedToInput[]
    createMany?: WorkOrderCreateManyAssignedToInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type StockMovementCreateNestedManyWithoutOperatorInput = {
    create?: XOR<StockMovementCreateWithoutOperatorInput, StockMovementUncheckedCreateWithoutOperatorInput> | StockMovementCreateWithoutOperatorInput[] | StockMovementUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutOperatorInput | StockMovementCreateOrConnectWithoutOperatorInput[]
    createMany?: StockMovementCreateManyOperatorInputEnvelope
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
  }

  export type CertificationCreateNestedManyWithoutUserInput = {
    create?: XOR<CertificationCreateWithoutUserInput, CertificationUncheckedCreateWithoutUserInput> | CertificationCreateWithoutUserInput[] | CertificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CertificationCreateOrConnectWithoutUserInput | CertificationCreateOrConnectWithoutUserInput[]
    createMany?: CertificationCreateManyUserInputEnvelope
    connect?: CertificationWhereUniqueInput | CertificationWhereUniqueInput[]
  }

  export type UserActivityCreateNestedManyWithoutUserInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
  }

  export type ManufacturingOrderUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<ManufacturingOrderCreateWithoutAssignedToInput, ManufacturingOrderUncheckedCreateWithoutAssignedToInput> | ManufacturingOrderCreateWithoutAssignedToInput[] | ManufacturingOrderUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ManufacturingOrderCreateOrConnectWithoutAssignedToInput | ManufacturingOrderCreateOrConnectWithoutAssignedToInput[]
    createMany?: ManufacturingOrderCreateManyAssignedToInputEnvelope
    connect?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
  }

  export type WorkOrderUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<WorkOrderCreateWithoutAssignedToInput, WorkOrderUncheckedCreateWithoutAssignedToInput> | WorkOrderCreateWithoutAssignedToInput[] | WorkOrderUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutAssignedToInput | WorkOrderCreateOrConnectWithoutAssignedToInput[]
    createMany?: WorkOrderCreateManyAssignedToInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type StockMovementUncheckedCreateNestedManyWithoutOperatorInput = {
    create?: XOR<StockMovementCreateWithoutOperatorInput, StockMovementUncheckedCreateWithoutOperatorInput> | StockMovementCreateWithoutOperatorInput[] | StockMovementUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutOperatorInput | StockMovementCreateOrConnectWithoutOperatorInput[]
    createMany?: StockMovementCreateManyOperatorInputEnvelope
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
  }

  export type CertificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CertificationCreateWithoutUserInput, CertificationUncheckedCreateWithoutUserInput> | CertificationCreateWithoutUserInput[] | CertificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CertificationCreateOrConnectWithoutUserInput | CertificationCreateOrConnectWithoutUserInput[]
    createMany?: CertificationCreateManyUserInputEnvelope
    connect?: CertificationWhereUniqueInput | CertificationWhereUniqueInput[]
  }

  export type UserActivityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateskillsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ManufacturingOrderUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<ManufacturingOrderCreateWithoutAssignedToInput, ManufacturingOrderUncheckedCreateWithoutAssignedToInput> | ManufacturingOrderCreateWithoutAssignedToInput[] | ManufacturingOrderUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ManufacturingOrderCreateOrConnectWithoutAssignedToInput | ManufacturingOrderCreateOrConnectWithoutAssignedToInput[]
    upsert?: ManufacturingOrderUpsertWithWhereUniqueWithoutAssignedToInput | ManufacturingOrderUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: ManufacturingOrderCreateManyAssignedToInputEnvelope
    set?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    disconnect?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    delete?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    connect?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    update?: ManufacturingOrderUpdateWithWhereUniqueWithoutAssignedToInput | ManufacturingOrderUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: ManufacturingOrderUpdateManyWithWhereWithoutAssignedToInput | ManufacturingOrderUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: ManufacturingOrderScalarWhereInput | ManufacturingOrderScalarWhereInput[]
  }

  export type WorkOrderUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<WorkOrderCreateWithoutAssignedToInput, WorkOrderUncheckedCreateWithoutAssignedToInput> | WorkOrderCreateWithoutAssignedToInput[] | WorkOrderUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutAssignedToInput | WorkOrderCreateOrConnectWithoutAssignedToInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutAssignedToInput | WorkOrderUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: WorkOrderCreateManyAssignedToInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutAssignedToInput | WorkOrderUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutAssignedToInput | WorkOrderUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type StockMovementUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<StockMovementCreateWithoutOperatorInput, StockMovementUncheckedCreateWithoutOperatorInput> | StockMovementCreateWithoutOperatorInput[] | StockMovementUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutOperatorInput | StockMovementCreateOrConnectWithoutOperatorInput[]
    upsert?: StockMovementUpsertWithWhereUniqueWithoutOperatorInput | StockMovementUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: StockMovementCreateManyOperatorInputEnvelope
    set?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    disconnect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    delete?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    update?: StockMovementUpdateWithWhereUniqueWithoutOperatorInput | StockMovementUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: StockMovementUpdateManyWithWhereWithoutOperatorInput | StockMovementUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: StockMovementScalarWhereInput | StockMovementScalarWhereInput[]
  }

  export type CertificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<CertificationCreateWithoutUserInput, CertificationUncheckedCreateWithoutUserInput> | CertificationCreateWithoutUserInput[] | CertificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CertificationCreateOrConnectWithoutUserInput | CertificationCreateOrConnectWithoutUserInput[]
    upsert?: CertificationUpsertWithWhereUniqueWithoutUserInput | CertificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CertificationCreateManyUserInputEnvelope
    set?: CertificationWhereUniqueInput | CertificationWhereUniqueInput[]
    disconnect?: CertificationWhereUniqueInput | CertificationWhereUniqueInput[]
    delete?: CertificationWhereUniqueInput | CertificationWhereUniqueInput[]
    connect?: CertificationWhereUniqueInput | CertificationWhereUniqueInput[]
    update?: CertificationUpdateWithWhereUniqueWithoutUserInput | CertificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CertificationUpdateManyWithWhereWithoutUserInput | CertificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CertificationScalarWhereInput | CertificationScalarWhereInput[]
  }

  export type UserActivityUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    upsert?: UserActivityUpsertWithWhereUniqueWithoutUserInput | UserActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    set?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    disconnect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    delete?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    update?: UserActivityUpdateWithWhereUniqueWithoutUserInput | UserActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserActivityUpdateManyWithWhereWithoutUserInput | UserActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
  }

  export type ManufacturingOrderUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<ManufacturingOrderCreateWithoutAssignedToInput, ManufacturingOrderUncheckedCreateWithoutAssignedToInput> | ManufacturingOrderCreateWithoutAssignedToInput[] | ManufacturingOrderUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ManufacturingOrderCreateOrConnectWithoutAssignedToInput | ManufacturingOrderCreateOrConnectWithoutAssignedToInput[]
    upsert?: ManufacturingOrderUpsertWithWhereUniqueWithoutAssignedToInput | ManufacturingOrderUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: ManufacturingOrderCreateManyAssignedToInputEnvelope
    set?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    disconnect?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    delete?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    connect?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    update?: ManufacturingOrderUpdateWithWhereUniqueWithoutAssignedToInput | ManufacturingOrderUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: ManufacturingOrderUpdateManyWithWhereWithoutAssignedToInput | ManufacturingOrderUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: ManufacturingOrderScalarWhereInput | ManufacturingOrderScalarWhereInput[]
  }

  export type WorkOrderUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<WorkOrderCreateWithoutAssignedToInput, WorkOrderUncheckedCreateWithoutAssignedToInput> | WorkOrderCreateWithoutAssignedToInput[] | WorkOrderUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutAssignedToInput | WorkOrderCreateOrConnectWithoutAssignedToInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutAssignedToInput | WorkOrderUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: WorkOrderCreateManyAssignedToInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutAssignedToInput | WorkOrderUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutAssignedToInput | WorkOrderUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type StockMovementUncheckedUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<StockMovementCreateWithoutOperatorInput, StockMovementUncheckedCreateWithoutOperatorInput> | StockMovementCreateWithoutOperatorInput[] | StockMovementUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutOperatorInput | StockMovementCreateOrConnectWithoutOperatorInput[]
    upsert?: StockMovementUpsertWithWhereUniqueWithoutOperatorInput | StockMovementUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: StockMovementCreateManyOperatorInputEnvelope
    set?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    disconnect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    delete?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    update?: StockMovementUpdateWithWhereUniqueWithoutOperatorInput | StockMovementUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: StockMovementUpdateManyWithWhereWithoutOperatorInput | StockMovementUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: StockMovementScalarWhereInput | StockMovementScalarWhereInput[]
  }

  export type CertificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CertificationCreateWithoutUserInput, CertificationUncheckedCreateWithoutUserInput> | CertificationCreateWithoutUserInput[] | CertificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CertificationCreateOrConnectWithoutUserInput | CertificationCreateOrConnectWithoutUserInput[]
    upsert?: CertificationUpsertWithWhereUniqueWithoutUserInput | CertificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CertificationCreateManyUserInputEnvelope
    set?: CertificationWhereUniqueInput | CertificationWhereUniqueInput[]
    disconnect?: CertificationWhereUniqueInput | CertificationWhereUniqueInput[]
    delete?: CertificationWhereUniqueInput | CertificationWhereUniqueInput[]
    connect?: CertificationWhereUniqueInput | CertificationWhereUniqueInput[]
    update?: CertificationUpdateWithWhereUniqueWithoutUserInput | CertificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CertificationUpdateManyWithWhereWithoutUserInput | CertificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CertificationScalarWhereInput | CertificationScalarWhereInput[]
  }

  export type UserActivityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    upsert?: UserActivityUpsertWithWhereUniqueWithoutUserInput | UserActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    set?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    disconnect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    delete?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    update?: UserActivityUpdateWithWhereUniqueWithoutUserInput | UserActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserActivityUpdateManyWithWhereWithoutUserInput | UserActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCertificationsInput = {
    create?: XOR<UserCreateWithoutCertificationsInput, UserUncheckedCreateWithoutCertificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCertificationsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutCertificationsNestedInput = {
    create?: XOR<UserCreateWithoutCertificationsInput, UserUncheckedCreateWithoutCertificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCertificationsInput
    upsert?: UserUpsertWithoutCertificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCertificationsInput, UserUpdateWithoutCertificationsInput>, UserUncheckedUpdateWithoutCertificationsInput>
  }

  export type UserCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    upsert?: UserUpsertWithoutActivitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivitiesInput, UserUpdateWithoutActivitiesInput>, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type ManufacturingOrderCreateNestedManyWithoutProductInput = {
    create?: XOR<ManufacturingOrderCreateWithoutProductInput, ManufacturingOrderUncheckedCreateWithoutProductInput> | ManufacturingOrderCreateWithoutProductInput[] | ManufacturingOrderUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ManufacturingOrderCreateOrConnectWithoutProductInput | ManufacturingOrderCreateOrConnectWithoutProductInput[]
    createMany?: ManufacturingOrderCreateManyProductInputEnvelope
    connect?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
  }

  export type BillOfMaterialsCreateNestedManyWithoutProductInput = {
    create?: XOR<BillOfMaterialsCreateWithoutProductInput, BillOfMaterialsUncheckedCreateWithoutProductInput> | BillOfMaterialsCreateWithoutProductInput[] | BillOfMaterialsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BillOfMaterialsCreateOrConnectWithoutProductInput | BillOfMaterialsCreateOrConnectWithoutProductInput[]
    createMany?: BillOfMaterialsCreateManyProductInputEnvelope
    connect?: BillOfMaterialsWhereUniqueInput | BillOfMaterialsWhereUniqueInput[]
  }

  export type BomItemCreateNestedManyWithoutComponentInput = {
    create?: XOR<BomItemCreateWithoutComponentInput, BomItemUncheckedCreateWithoutComponentInput> | BomItemCreateWithoutComponentInput[] | BomItemUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutComponentInput | BomItemCreateOrConnectWithoutComponentInput[]
    createMany?: BomItemCreateManyComponentInputEnvelope
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
  }

  export type StockItemCreateNestedManyWithoutProductInput = {
    create?: XOR<StockItemCreateWithoutProductInput, StockItemUncheckedCreateWithoutProductInput> | StockItemCreateWithoutProductInput[] | StockItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: StockItemCreateOrConnectWithoutProductInput | StockItemCreateOrConnectWithoutProductInput[]
    createMany?: StockItemCreateManyProductInputEnvelope
    connect?: StockItemWhereUniqueInput | StockItemWhereUniqueInput[]
  }

  export type ManufacturingOrderUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ManufacturingOrderCreateWithoutProductInput, ManufacturingOrderUncheckedCreateWithoutProductInput> | ManufacturingOrderCreateWithoutProductInput[] | ManufacturingOrderUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ManufacturingOrderCreateOrConnectWithoutProductInput | ManufacturingOrderCreateOrConnectWithoutProductInput[]
    createMany?: ManufacturingOrderCreateManyProductInputEnvelope
    connect?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
  }

  export type BillOfMaterialsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<BillOfMaterialsCreateWithoutProductInput, BillOfMaterialsUncheckedCreateWithoutProductInput> | BillOfMaterialsCreateWithoutProductInput[] | BillOfMaterialsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BillOfMaterialsCreateOrConnectWithoutProductInput | BillOfMaterialsCreateOrConnectWithoutProductInput[]
    createMany?: BillOfMaterialsCreateManyProductInputEnvelope
    connect?: BillOfMaterialsWhereUniqueInput | BillOfMaterialsWhereUniqueInput[]
  }

  export type BomItemUncheckedCreateNestedManyWithoutComponentInput = {
    create?: XOR<BomItemCreateWithoutComponentInput, BomItemUncheckedCreateWithoutComponentInput> | BomItemCreateWithoutComponentInput[] | BomItemUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutComponentInput | BomItemCreateOrConnectWithoutComponentInput[]
    createMany?: BomItemCreateManyComponentInputEnvelope
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
  }

  export type StockItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<StockItemCreateWithoutProductInput, StockItemUncheckedCreateWithoutProductInput> | StockItemCreateWithoutProductInput[] | StockItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: StockItemCreateOrConnectWithoutProductInput | StockItemCreateOrConnectWithoutProductInput[]
    createMany?: StockItemCreateManyProductInputEnvelope
    connect?: StockItemWhereUniqueInput | StockItemWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ManufacturingOrderUpdateManyWithoutProductNestedInput = {
    create?: XOR<ManufacturingOrderCreateWithoutProductInput, ManufacturingOrderUncheckedCreateWithoutProductInput> | ManufacturingOrderCreateWithoutProductInput[] | ManufacturingOrderUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ManufacturingOrderCreateOrConnectWithoutProductInput | ManufacturingOrderCreateOrConnectWithoutProductInput[]
    upsert?: ManufacturingOrderUpsertWithWhereUniqueWithoutProductInput | ManufacturingOrderUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ManufacturingOrderCreateManyProductInputEnvelope
    set?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    disconnect?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    delete?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    connect?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    update?: ManufacturingOrderUpdateWithWhereUniqueWithoutProductInput | ManufacturingOrderUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ManufacturingOrderUpdateManyWithWhereWithoutProductInput | ManufacturingOrderUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ManufacturingOrderScalarWhereInput | ManufacturingOrderScalarWhereInput[]
  }

  export type BillOfMaterialsUpdateManyWithoutProductNestedInput = {
    create?: XOR<BillOfMaterialsCreateWithoutProductInput, BillOfMaterialsUncheckedCreateWithoutProductInput> | BillOfMaterialsCreateWithoutProductInput[] | BillOfMaterialsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BillOfMaterialsCreateOrConnectWithoutProductInput | BillOfMaterialsCreateOrConnectWithoutProductInput[]
    upsert?: BillOfMaterialsUpsertWithWhereUniqueWithoutProductInput | BillOfMaterialsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: BillOfMaterialsCreateManyProductInputEnvelope
    set?: BillOfMaterialsWhereUniqueInput | BillOfMaterialsWhereUniqueInput[]
    disconnect?: BillOfMaterialsWhereUniqueInput | BillOfMaterialsWhereUniqueInput[]
    delete?: BillOfMaterialsWhereUniqueInput | BillOfMaterialsWhereUniqueInput[]
    connect?: BillOfMaterialsWhereUniqueInput | BillOfMaterialsWhereUniqueInput[]
    update?: BillOfMaterialsUpdateWithWhereUniqueWithoutProductInput | BillOfMaterialsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: BillOfMaterialsUpdateManyWithWhereWithoutProductInput | BillOfMaterialsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: BillOfMaterialsScalarWhereInput | BillOfMaterialsScalarWhereInput[]
  }

  export type BomItemUpdateManyWithoutComponentNestedInput = {
    create?: XOR<BomItemCreateWithoutComponentInput, BomItemUncheckedCreateWithoutComponentInput> | BomItemCreateWithoutComponentInput[] | BomItemUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutComponentInput | BomItemCreateOrConnectWithoutComponentInput[]
    upsert?: BomItemUpsertWithWhereUniqueWithoutComponentInput | BomItemUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: BomItemCreateManyComponentInputEnvelope
    set?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    disconnect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    delete?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    update?: BomItemUpdateWithWhereUniqueWithoutComponentInput | BomItemUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: BomItemUpdateManyWithWhereWithoutComponentInput | BomItemUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: BomItemScalarWhereInput | BomItemScalarWhereInput[]
  }

  export type StockItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<StockItemCreateWithoutProductInput, StockItemUncheckedCreateWithoutProductInput> | StockItemCreateWithoutProductInput[] | StockItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: StockItemCreateOrConnectWithoutProductInput | StockItemCreateOrConnectWithoutProductInput[]
    upsert?: StockItemUpsertWithWhereUniqueWithoutProductInput | StockItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: StockItemCreateManyProductInputEnvelope
    set?: StockItemWhereUniqueInput | StockItemWhereUniqueInput[]
    disconnect?: StockItemWhereUniqueInput | StockItemWhereUniqueInput[]
    delete?: StockItemWhereUniqueInput | StockItemWhereUniqueInput[]
    connect?: StockItemWhereUniqueInput | StockItemWhereUniqueInput[]
    update?: StockItemUpdateWithWhereUniqueWithoutProductInput | StockItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: StockItemUpdateManyWithWhereWithoutProductInput | StockItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: StockItemScalarWhereInput | StockItemScalarWhereInput[]
  }

  export type ManufacturingOrderUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ManufacturingOrderCreateWithoutProductInput, ManufacturingOrderUncheckedCreateWithoutProductInput> | ManufacturingOrderCreateWithoutProductInput[] | ManufacturingOrderUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ManufacturingOrderCreateOrConnectWithoutProductInput | ManufacturingOrderCreateOrConnectWithoutProductInput[]
    upsert?: ManufacturingOrderUpsertWithWhereUniqueWithoutProductInput | ManufacturingOrderUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ManufacturingOrderCreateManyProductInputEnvelope
    set?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    disconnect?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    delete?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    connect?: ManufacturingOrderWhereUniqueInput | ManufacturingOrderWhereUniqueInput[]
    update?: ManufacturingOrderUpdateWithWhereUniqueWithoutProductInput | ManufacturingOrderUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ManufacturingOrderUpdateManyWithWhereWithoutProductInput | ManufacturingOrderUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ManufacturingOrderScalarWhereInput | ManufacturingOrderScalarWhereInput[]
  }

  export type BillOfMaterialsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<BillOfMaterialsCreateWithoutProductInput, BillOfMaterialsUncheckedCreateWithoutProductInput> | BillOfMaterialsCreateWithoutProductInput[] | BillOfMaterialsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BillOfMaterialsCreateOrConnectWithoutProductInput | BillOfMaterialsCreateOrConnectWithoutProductInput[]
    upsert?: BillOfMaterialsUpsertWithWhereUniqueWithoutProductInput | BillOfMaterialsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: BillOfMaterialsCreateManyProductInputEnvelope
    set?: BillOfMaterialsWhereUniqueInput | BillOfMaterialsWhereUniqueInput[]
    disconnect?: BillOfMaterialsWhereUniqueInput | BillOfMaterialsWhereUniqueInput[]
    delete?: BillOfMaterialsWhereUniqueInput | BillOfMaterialsWhereUniqueInput[]
    connect?: BillOfMaterialsWhereUniqueInput | BillOfMaterialsWhereUniqueInput[]
    update?: BillOfMaterialsUpdateWithWhereUniqueWithoutProductInput | BillOfMaterialsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: BillOfMaterialsUpdateManyWithWhereWithoutProductInput | BillOfMaterialsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: BillOfMaterialsScalarWhereInput | BillOfMaterialsScalarWhereInput[]
  }

  export type BomItemUncheckedUpdateManyWithoutComponentNestedInput = {
    create?: XOR<BomItemCreateWithoutComponentInput, BomItemUncheckedCreateWithoutComponentInput> | BomItemCreateWithoutComponentInput[] | BomItemUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutComponentInput | BomItemCreateOrConnectWithoutComponentInput[]
    upsert?: BomItemUpsertWithWhereUniqueWithoutComponentInput | BomItemUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: BomItemCreateManyComponentInputEnvelope
    set?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    disconnect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    delete?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    update?: BomItemUpdateWithWhereUniqueWithoutComponentInput | BomItemUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: BomItemUpdateManyWithWhereWithoutComponentInput | BomItemUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: BomItemScalarWhereInput | BomItemScalarWhereInput[]
  }

  export type StockItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<StockItemCreateWithoutProductInput, StockItemUncheckedCreateWithoutProductInput> | StockItemCreateWithoutProductInput[] | StockItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: StockItemCreateOrConnectWithoutProductInput | StockItemCreateOrConnectWithoutProductInput[]
    upsert?: StockItemUpsertWithWhereUniqueWithoutProductInput | StockItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: StockItemCreateManyProductInputEnvelope
    set?: StockItemWhereUniqueInput | StockItemWhereUniqueInput[]
    disconnect?: StockItemWhereUniqueInput | StockItemWhereUniqueInput[]
    delete?: StockItemWhereUniqueInput | StockItemWhereUniqueInput[]
    connect?: StockItemWhereUniqueInput | StockItemWhereUniqueInput[]
    update?: StockItemUpdateWithWhereUniqueWithoutProductInput | StockItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: StockItemUpdateManyWithWhereWithoutProductInput | StockItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: StockItemScalarWhereInput | StockItemScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutBillsOfMaterialsInput = {
    create?: XOR<ProductCreateWithoutBillsOfMaterialsInput, ProductUncheckedCreateWithoutBillsOfMaterialsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutBillsOfMaterialsInput
    connect?: ProductWhereUniqueInput
  }

  export type BomItemCreateNestedManyWithoutBomInput = {
    create?: XOR<BomItemCreateWithoutBomInput, BomItemUncheckedCreateWithoutBomInput> | BomItemCreateWithoutBomInput[] | BomItemUncheckedCreateWithoutBomInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutBomInput | BomItemCreateOrConnectWithoutBomInput[]
    createMany?: BomItemCreateManyBomInputEnvelope
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
  }

  export type BomItemUncheckedCreateNestedManyWithoutBomInput = {
    create?: XOR<BomItemCreateWithoutBomInput, BomItemUncheckedCreateWithoutBomInput> | BomItemCreateWithoutBomInput[] | BomItemUncheckedCreateWithoutBomInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutBomInput | BomItemCreateOrConnectWithoutBomInput[]
    createMany?: BomItemCreateManyBomInputEnvelope
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
  }

  export type EnumBomStatusFieldUpdateOperationsInput = {
    set?: $Enums.BomStatus
  }

  export type ProductUpdateOneRequiredWithoutBillsOfMaterialsNestedInput = {
    create?: XOR<ProductCreateWithoutBillsOfMaterialsInput, ProductUncheckedCreateWithoutBillsOfMaterialsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutBillsOfMaterialsInput
    upsert?: ProductUpsertWithoutBillsOfMaterialsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutBillsOfMaterialsInput, ProductUpdateWithoutBillsOfMaterialsInput>, ProductUncheckedUpdateWithoutBillsOfMaterialsInput>
  }

  export type BomItemUpdateManyWithoutBomNestedInput = {
    create?: XOR<BomItemCreateWithoutBomInput, BomItemUncheckedCreateWithoutBomInput> | BomItemCreateWithoutBomInput[] | BomItemUncheckedCreateWithoutBomInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutBomInput | BomItemCreateOrConnectWithoutBomInput[]
    upsert?: BomItemUpsertWithWhereUniqueWithoutBomInput | BomItemUpsertWithWhereUniqueWithoutBomInput[]
    createMany?: BomItemCreateManyBomInputEnvelope
    set?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    disconnect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    delete?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    update?: BomItemUpdateWithWhereUniqueWithoutBomInput | BomItemUpdateWithWhereUniqueWithoutBomInput[]
    updateMany?: BomItemUpdateManyWithWhereWithoutBomInput | BomItemUpdateManyWithWhereWithoutBomInput[]
    deleteMany?: BomItemScalarWhereInput | BomItemScalarWhereInput[]
  }

  export type BomItemUncheckedUpdateManyWithoutBomNestedInput = {
    create?: XOR<BomItemCreateWithoutBomInput, BomItemUncheckedCreateWithoutBomInput> | BomItemCreateWithoutBomInput[] | BomItemUncheckedCreateWithoutBomInput[]
    connectOrCreate?: BomItemCreateOrConnectWithoutBomInput | BomItemCreateOrConnectWithoutBomInput[]
    upsert?: BomItemUpsertWithWhereUniqueWithoutBomInput | BomItemUpsertWithWhereUniqueWithoutBomInput[]
    createMany?: BomItemCreateManyBomInputEnvelope
    set?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    disconnect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    delete?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    connect?: BomItemWhereUniqueInput | BomItemWhereUniqueInput[]
    update?: BomItemUpdateWithWhereUniqueWithoutBomInput | BomItemUpdateWithWhereUniqueWithoutBomInput[]
    updateMany?: BomItemUpdateManyWithWhereWithoutBomInput | BomItemUpdateManyWithWhereWithoutBomInput[]
    deleteMany?: BomItemScalarWhereInput | BomItemScalarWhereInput[]
  }

  export type BillOfMaterialsCreateNestedOneWithoutItemsInput = {
    create?: XOR<BillOfMaterialsCreateWithoutItemsInput, BillOfMaterialsUncheckedCreateWithoutItemsInput>
    connectOrCreate?: BillOfMaterialsCreateOrConnectWithoutItemsInput
    connect?: BillOfMaterialsWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutBomComponentsInput = {
    create?: XOR<ProductCreateWithoutBomComponentsInput, ProductUncheckedCreateWithoutBomComponentsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutBomComponentsInput
    connect?: ProductWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BillOfMaterialsUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<BillOfMaterialsCreateWithoutItemsInput, BillOfMaterialsUncheckedCreateWithoutItemsInput>
    connectOrCreate?: BillOfMaterialsCreateOrConnectWithoutItemsInput
    upsert?: BillOfMaterialsUpsertWithoutItemsInput
    connect?: BillOfMaterialsWhereUniqueInput
    update?: XOR<XOR<BillOfMaterialsUpdateToOneWithWhereWithoutItemsInput, BillOfMaterialsUpdateWithoutItemsInput>, BillOfMaterialsUncheckedUpdateWithoutItemsInput>
  }

  export type ProductUpdateOneRequiredWithoutBomComponentsNestedInput = {
    create?: XOR<ProductCreateWithoutBomComponentsInput, ProductUncheckedCreateWithoutBomComponentsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutBomComponentsInput
    upsert?: ProductUpsertWithoutBomComponentsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutBomComponentsInput, ProductUpdateWithoutBomComponentsInput>, ProductUncheckedUpdateWithoutBomComponentsInput>
  }

  export type ProductCreateNestedOneWithoutManufacturingOrdersInput = {
    create?: XOR<ProductCreateWithoutManufacturingOrdersInput, ProductUncheckedCreateWithoutManufacturingOrdersInput>
    connectOrCreate?: ProductCreateOrConnectWithoutManufacturingOrdersInput
    connect?: ProductWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutManufacturingOrdersInput = {
    create?: XOR<UserCreateWithoutManufacturingOrdersInput, UserUncheckedCreateWithoutManufacturingOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutManufacturingOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type WorkOrderCreateNestedManyWithoutManufacturingOrderInput = {
    create?: XOR<WorkOrderCreateWithoutManufacturingOrderInput, WorkOrderUncheckedCreateWithoutManufacturingOrderInput> | WorkOrderCreateWithoutManufacturingOrderInput[] | WorkOrderUncheckedCreateWithoutManufacturingOrderInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutManufacturingOrderInput | WorkOrderCreateOrConnectWithoutManufacturingOrderInput[]
    createMany?: WorkOrderCreateManyManufacturingOrderInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type WorkOrderUncheckedCreateNestedManyWithoutManufacturingOrderInput = {
    create?: XOR<WorkOrderCreateWithoutManufacturingOrderInput, WorkOrderUncheckedCreateWithoutManufacturingOrderInput> | WorkOrderCreateWithoutManufacturingOrderInput[] | WorkOrderUncheckedCreateWithoutManufacturingOrderInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutManufacturingOrderInput | WorkOrderCreateOrConnectWithoutManufacturingOrderInput[]
    createMany?: WorkOrderCreateManyManufacturingOrderInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type EnumPriorityFieldUpdateOperationsInput = {
    set?: $Enums.Priority
  }

  export type ProductUpdateOneRequiredWithoutManufacturingOrdersNestedInput = {
    create?: XOR<ProductCreateWithoutManufacturingOrdersInput, ProductUncheckedCreateWithoutManufacturingOrdersInput>
    connectOrCreate?: ProductCreateOrConnectWithoutManufacturingOrdersInput
    upsert?: ProductUpsertWithoutManufacturingOrdersInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutManufacturingOrdersInput, ProductUpdateWithoutManufacturingOrdersInput>, ProductUncheckedUpdateWithoutManufacturingOrdersInput>
  }

  export type UserUpdateOneWithoutManufacturingOrdersNestedInput = {
    create?: XOR<UserCreateWithoutManufacturingOrdersInput, UserUncheckedCreateWithoutManufacturingOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutManufacturingOrdersInput
    upsert?: UserUpsertWithoutManufacturingOrdersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutManufacturingOrdersInput, UserUpdateWithoutManufacturingOrdersInput>, UserUncheckedUpdateWithoutManufacturingOrdersInput>
  }

  export type WorkOrderUpdateManyWithoutManufacturingOrderNestedInput = {
    create?: XOR<WorkOrderCreateWithoutManufacturingOrderInput, WorkOrderUncheckedCreateWithoutManufacturingOrderInput> | WorkOrderCreateWithoutManufacturingOrderInput[] | WorkOrderUncheckedCreateWithoutManufacturingOrderInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutManufacturingOrderInput | WorkOrderCreateOrConnectWithoutManufacturingOrderInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutManufacturingOrderInput | WorkOrderUpsertWithWhereUniqueWithoutManufacturingOrderInput[]
    createMany?: WorkOrderCreateManyManufacturingOrderInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutManufacturingOrderInput | WorkOrderUpdateWithWhereUniqueWithoutManufacturingOrderInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutManufacturingOrderInput | WorkOrderUpdateManyWithWhereWithoutManufacturingOrderInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type WorkOrderUncheckedUpdateManyWithoutManufacturingOrderNestedInput = {
    create?: XOR<WorkOrderCreateWithoutManufacturingOrderInput, WorkOrderUncheckedCreateWithoutManufacturingOrderInput> | WorkOrderCreateWithoutManufacturingOrderInput[] | WorkOrderUncheckedCreateWithoutManufacturingOrderInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutManufacturingOrderInput | WorkOrderCreateOrConnectWithoutManufacturingOrderInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutManufacturingOrderInput | WorkOrderUpsertWithWhereUniqueWithoutManufacturingOrderInput[]
    createMany?: WorkOrderCreateManyManufacturingOrderInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutManufacturingOrderInput | WorkOrderUpdateWithWhereUniqueWithoutManufacturingOrderInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutManufacturingOrderInput | WorkOrderUpdateManyWithWhereWithoutManufacturingOrderInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type WorkOrderCreateNestedManyWithoutWorkCenterInput = {
    create?: XOR<WorkOrderCreateWithoutWorkCenterInput, WorkOrderUncheckedCreateWithoutWorkCenterInput> | WorkOrderCreateWithoutWorkCenterInput[] | WorkOrderUncheckedCreateWithoutWorkCenterInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutWorkCenterInput | WorkOrderCreateOrConnectWithoutWorkCenterInput[]
    createMany?: WorkOrderCreateManyWorkCenterInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type WorkOrderUncheckedCreateNestedManyWithoutWorkCenterInput = {
    create?: XOR<WorkOrderCreateWithoutWorkCenterInput, WorkOrderUncheckedCreateWithoutWorkCenterInput> | WorkOrderCreateWithoutWorkCenterInput[] | WorkOrderUncheckedCreateWithoutWorkCenterInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutWorkCenterInput | WorkOrderCreateOrConnectWithoutWorkCenterInput[]
    createMany?: WorkOrderCreateManyWorkCenterInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type EnumWorkCenterStatusFieldUpdateOperationsInput = {
    set?: $Enums.WorkCenterStatus
  }

  export type WorkOrderUpdateManyWithoutWorkCenterNestedInput = {
    create?: XOR<WorkOrderCreateWithoutWorkCenterInput, WorkOrderUncheckedCreateWithoutWorkCenterInput> | WorkOrderCreateWithoutWorkCenterInput[] | WorkOrderUncheckedCreateWithoutWorkCenterInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutWorkCenterInput | WorkOrderCreateOrConnectWithoutWorkCenterInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutWorkCenterInput | WorkOrderUpsertWithWhereUniqueWithoutWorkCenterInput[]
    createMany?: WorkOrderCreateManyWorkCenterInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutWorkCenterInput | WorkOrderUpdateWithWhereUniqueWithoutWorkCenterInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutWorkCenterInput | WorkOrderUpdateManyWithWhereWithoutWorkCenterInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type WorkOrderUncheckedUpdateManyWithoutWorkCenterNestedInput = {
    create?: XOR<WorkOrderCreateWithoutWorkCenterInput, WorkOrderUncheckedCreateWithoutWorkCenterInput> | WorkOrderCreateWithoutWorkCenterInput[] | WorkOrderUncheckedCreateWithoutWorkCenterInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutWorkCenterInput | WorkOrderCreateOrConnectWithoutWorkCenterInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutWorkCenterInput | WorkOrderUpsertWithWhereUniqueWithoutWorkCenterInput[]
    createMany?: WorkOrderCreateManyWorkCenterInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutWorkCenterInput | WorkOrderUpdateWithWhereUniqueWithoutWorkCenterInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutWorkCenterInput | WorkOrderUpdateManyWithWhereWithoutWorkCenterInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type WorkOrderCreatetagsInput = {
    set: string[]
  }

  export type ManufacturingOrderCreateNestedOneWithoutWorkOrdersInput = {
    create?: XOR<ManufacturingOrderCreateWithoutWorkOrdersInput, ManufacturingOrderUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: ManufacturingOrderCreateOrConnectWithoutWorkOrdersInput
    connect?: ManufacturingOrderWhereUniqueInput
  }

  export type WorkCenterCreateNestedOneWithoutWorkOrdersInput = {
    create?: XOR<WorkCenterCreateWithoutWorkOrdersInput, WorkCenterUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: WorkCenterCreateOrConnectWithoutWorkOrdersInput
    connect?: WorkCenterWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWorkOrdersInput = {
    create?: XOR<UserCreateWithoutWorkOrdersInput, UserUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type EnumWorkOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.WorkOrderStatus
  }

  export type WorkOrderUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ManufacturingOrderUpdateOneRequiredWithoutWorkOrdersNestedInput = {
    create?: XOR<ManufacturingOrderCreateWithoutWorkOrdersInput, ManufacturingOrderUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: ManufacturingOrderCreateOrConnectWithoutWorkOrdersInput
    upsert?: ManufacturingOrderUpsertWithoutWorkOrdersInput
    connect?: ManufacturingOrderWhereUniqueInput
    update?: XOR<XOR<ManufacturingOrderUpdateToOneWithWhereWithoutWorkOrdersInput, ManufacturingOrderUpdateWithoutWorkOrdersInput>, ManufacturingOrderUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type WorkCenterUpdateOneRequiredWithoutWorkOrdersNestedInput = {
    create?: XOR<WorkCenterCreateWithoutWorkOrdersInput, WorkCenterUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: WorkCenterCreateOrConnectWithoutWorkOrdersInput
    upsert?: WorkCenterUpsertWithoutWorkOrdersInput
    connect?: WorkCenterWhereUniqueInput
    update?: XOR<XOR<WorkCenterUpdateToOneWithWhereWithoutWorkOrdersInput, WorkCenterUpdateWithoutWorkOrdersInput>, WorkCenterUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type UserUpdateOneWithoutWorkOrdersNestedInput = {
    create?: XOR<UserCreateWithoutWorkOrdersInput, UserUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkOrdersInput
    upsert?: UserUpsertWithoutWorkOrdersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkOrdersInput, UserUpdateWithoutWorkOrdersInput>, UserUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type ProductCreateNestedOneWithoutStockItemsInput = {
    create?: XOR<ProductCreateWithoutStockItemsInput, ProductUncheckedCreateWithoutStockItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutStockItemsInput
    connect?: ProductWhereUniqueInput
  }

  export type StockMovementCreateNestedManyWithoutStockItemInput = {
    create?: XOR<StockMovementCreateWithoutStockItemInput, StockMovementUncheckedCreateWithoutStockItemInput> | StockMovementCreateWithoutStockItemInput[] | StockMovementUncheckedCreateWithoutStockItemInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutStockItemInput | StockMovementCreateOrConnectWithoutStockItemInput[]
    createMany?: StockMovementCreateManyStockItemInputEnvelope
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
  }

  export type StockMovementUncheckedCreateNestedManyWithoutStockItemInput = {
    create?: XOR<StockMovementCreateWithoutStockItemInput, StockMovementUncheckedCreateWithoutStockItemInput> | StockMovementCreateWithoutStockItemInput[] | StockMovementUncheckedCreateWithoutStockItemInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutStockItemInput | StockMovementCreateOrConnectWithoutStockItemInput[]
    createMany?: StockMovementCreateManyStockItemInputEnvelope
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
  }

  export type ProductUpdateOneRequiredWithoutStockItemsNestedInput = {
    create?: XOR<ProductCreateWithoutStockItemsInput, ProductUncheckedCreateWithoutStockItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutStockItemsInput
    upsert?: ProductUpsertWithoutStockItemsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutStockItemsInput, ProductUpdateWithoutStockItemsInput>, ProductUncheckedUpdateWithoutStockItemsInput>
  }

  export type StockMovementUpdateManyWithoutStockItemNestedInput = {
    create?: XOR<StockMovementCreateWithoutStockItemInput, StockMovementUncheckedCreateWithoutStockItemInput> | StockMovementCreateWithoutStockItemInput[] | StockMovementUncheckedCreateWithoutStockItemInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutStockItemInput | StockMovementCreateOrConnectWithoutStockItemInput[]
    upsert?: StockMovementUpsertWithWhereUniqueWithoutStockItemInput | StockMovementUpsertWithWhereUniqueWithoutStockItemInput[]
    createMany?: StockMovementCreateManyStockItemInputEnvelope
    set?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    disconnect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    delete?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    update?: StockMovementUpdateWithWhereUniqueWithoutStockItemInput | StockMovementUpdateWithWhereUniqueWithoutStockItemInput[]
    updateMany?: StockMovementUpdateManyWithWhereWithoutStockItemInput | StockMovementUpdateManyWithWhereWithoutStockItemInput[]
    deleteMany?: StockMovementScalarWhereInput | StockMovementScalarWhereInput[]
  }

  export type StockMovementUncheckedUpdateManyWithoutStockItemNestedInput = {
    create?: XOR<StockMovementCreateWithoutStockItemInput, StockMovementUncheckedCreateWithoutStockItemInput> | StockMovementCreateWithoutStockItemInput[] | StockMovementUncheckedCreateWithoutStockItemInput[]
    connectOrCreate?: StockMovementCreateOrConnectWithoutStockItemInput | StockMovementCreateOrConnectWithoutStockItemInput[]
    upsert?: StockMovementUpsertWithWhereUniqueWithoutStockItemInput | StockMovementUpsertWithWhereUniqueWithoutStockItemInput[]
    createMany?: StockMovementCreateManyStockItemInputEnvelope
    set?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    disconnect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    delete?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    connect?: StockMovementWhereUniqueInput | StockMovementWhereUniqueInput[]
    update?: StockMovementUpdateWithWhereUniqueWithoutStockItemInput | StockMovementUpdateWithWhereUniqueWithoutStockItemInput[]
    updateMany?: StockMovementUpdateManyWithWhereWithoutStockItemInput | StockMovementUpdateManyWithWhereWithoutStockItemInput[]
    deleteMany?: StockMovementScalarWhereInput | StockMovementScalarWhereInput[]
  }

  export type StockItemCreateNestedOneWithoutMovementsInput = {
    create?: XOR<StockItemCreateWithoutMovementsInput, StockItemUncheckedCreateWithoutMovementsInput>
    connectOrCreate?: StockItemCreateOrConnectWithoutMovementsInput
    connect?: StockItemWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStockMovementsInput = {
    create?: XOR<UserCreateWithoutStockMovementsInput, UserUncheckedCreateWithoutStockMovementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStockMovementsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumStockMovementTypeFieldUpdateOperationsInput = {
    set?: $Enums.StockMovementType
  }

  export type StockItemUpdateOneRequiredWithoutMovementsNestedInput = {
    create?: XOR<StockItemCreateWithoutMovementsInput, StockItemUncheckedCreateWithoutMovementsInput>
    connectOrCreate?: StockItemCreateOrConnectWithoutMovementsInput
    upsert?: StockItemUpsertWithoutMovementsInput
    connect?: StockItemWhereUniqueInput
    update?: XOR<XOR<StockItemUpdateToOneWithWhereWithoutMovementsInput, StockItemUpdateWithoutMovementsInput>, StockItemUncheckedUpdateWithoutMovementsInput>
  }

  export type UserUpdateOneRequiredWithoutStockMovementsNestedInput = {
    create?: XOR<UserCreateWithoutStockMovementsInput, UserUncheckedCreateWithoutStockMovementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStockMovementsInput
    upsert?: UserUpsertWithoutStockMovementsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStockMovementsInput, UserUpdateWithoutStockMovementsInput>, UserUncheckedUpdateWithoutStockMovementsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumBomStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BomStatus | EnumBomStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BomStatus[] | ListEnumBomStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BomStatus[] | ListEnumBomStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBomStatusFilter<$PrismaModel> | $Enums.BomStatus
  }

  export type NestedEnumBomStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BomStatus | EnumBomStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BomStatus[] | ListEnumBomStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BomStatus[] | ListEnumBomStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBomStatusWithAggregatesFilter<$PrismaModel> | $Enums.BomStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBomStatusFilter<$PrismaModel>
    _max?: NestedEnumBomStatusFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type NestedEnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type NestedEnumWorkCenterStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkCenterStatus | EnumWorkCenterStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkCenterStatus[] | ListEnumWorkCenterStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkCenterStatus[] | ListEnumWorkCenterStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkCenterStatusFilter<$PrismaModel> | $Enums.WorkCenterStatus
  }

  export type NestedEnumWorkCenterStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkCenterStatus | EnumWorkCenterStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkCenterStatus[] | ListEnumWorkCenterStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkCenterStatus[] | ListEnumWorkCenterStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkCenterStatusWithAggregatesFilter<$PrismaModel> | $Enums.WorkCenterStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkCenterStatusFilter<$PrismaModel>
    _max?: NestedEnumWorkCenterStatusFilter<$PrismaModel>
  }

  export type NestedEnumWorkOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkOrderStatus | EnumWorkOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkOrderStatusFilter<$PrismaModel> | $Enums.WorkOrderStatus
  }

  export type NestedEnumWorkOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkOrderStatus | EnumWorkOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkOrderStatus[] | ListEnumWorkOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.WorkOrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumWorkOrderStatusFilter<$PrismaModel>
  }

  export type NestedEnumStockMovementTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StockMovementType | EnumStockMovementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StockMovementType[] | ListEnumStockMovementTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StockMovementType[] | ListEnumStockMovementTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStockMovementTypeFilter<$PrismaModel> | $Enums.StockMovementType
  }

  export type NestedEnumStockMovementTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StockMovementType | EnumStockMovementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StockMovementType[] | ListEnumStockMovementTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StockMovementType[] | ListEnumStockMovementTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStockMovementTypeWithAggregatesFilter<$PrismaModel> | $Enums.StockMovementType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStockMovementTypeFilter<$PrismaModel>
    _max?: NestedEnumStockMovementTypeFilter<$PrismaModel>
  }

  export type ManufacturingOrderCreateWithoutAssignedToInput = {
    id?: string
    orderNumber: string
    quantity: number
    status?: $Enums.OrderStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    deadline: Date | string
    completedAt?: Date | string | null
    estimatedCost?: number | null
    actualCost?: number | null
    progress?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutManufacturingOrdersInput
    workOrders?: WorkOrderCreateNestedManyWithoutManufacturingOrderInput
  }

  export type ManufacturingOrderUncheckedCreateWithoutAssignedToInput = {
    id?: string
    orderNumber: string
    productId: string
    quantity: number
    status?: $Enums.OrderStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    deadline: Date | string
    completedAt?: Date | string | null
    estimatedCost?: number | null
    actualCost?: number | null
    progress?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutManufacturingOrderInput
  }

  export type ManufacturingOrderCreateOrConnectWithoutAssignedToInput = {
    where: ManufacturingOrderWhereUniqueInput
    create: XOR<ManufacturingOrderCreateWithoutAssignedToInput, ManufacturingOrderUncheckedCreateWithoutAssignedToInput>
  }

  export type ManufacturingOrderCreateManyAssignedToInputEnvelope = {
    data: ManufacturingOrderCreateManyAssignedToInput | ManufacturingOrderCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderCreateWithoutAssignedToInput = {
    id?: string
    orderNumber: string
    title: string
    description?: string | null
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.Priority
    estimatedHours: number
    actualHours?: number | null
    progress?: number
    startedAt?: Date | string | null
    pausedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate: Date | string
    pausedReason?: string | null
    comments?: string | null
    tags?: WorkOrderCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrder: ManufacturingOrderCreateNestedOneWithoutWorkOrdersInput
    workCenter: WorkCenterCreateNestedOneWithoutWorkOrdersInput
  }

  export type WorkOrderUncheckedCreateWithoutAssignedToInput = {
    id?: string
    orderNumber: string
    title: string
    description?: string | null
    manufacturingOrderId: string
    workCenterId: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.Priority
    estimatedHours: number
    actualHours?: number | null
    progress?: number
    startedAt?: Date | string | null
    pausedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate: Date | string
    pausedReason?: string | null
    comments?: string | null
    tags?: WorkOrderCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderCreateOrConnectWithoutAssignedToInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutAssignedToInput, WorkOrderUncheckedCreateWithoutAssignedToInput>
  }

  export type WorkOrderCreateManyAssignedToInputEnvelope = {
    data: WorkOrderCreateManyAssignedToInput | WorkOrderCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type StockMovementCreateWithoutOperatorInput = {
    id?: string
    type: $Enums.StockMovementType
    quantity: number
    balanceBefore: number
    balanceAfter: number
    reference?: string | null
    reason: string
    timestamp?: Date | string
    stockItem: StockItemCreateNestedOneWithoutMovementsInput
  }

  export type StockMovementUncheckedCreateWithoutOperatorInput = {
    id?: string
    stockItemId: string
    type: $Enums.StockMovementType
    quantity: number
    balanceBefore: number
    balanceAfter: number
    reference?: string | null
    reason: string
    timestamp?: Date | string
  }

  export type StockMovementCreateOrConnectWithoutOperatorInput = {
    where: StockMovementWhereUniqueInput
    create: XOR<StockMovementCreateWithoutOperatorInput, StockMovementUncheckedCreateWithoutOperatorInput>
  }

  export type StockMovementCreateManyOperatorInputEnvelope = {
    data: StockMovementCreateManyOperatorInput | StockMovementCreateManyOperatorInput[]
    skipDuplicates?: boolean
  }

  export type CertificationCreateWithoutUserInput = {
    id?: string
    name: string
    issuer: string
    issueDate: Date | string
    expiryDate?: Date | string | null
    isVerified?: boolean
  }

  export type CertificationUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    issuer: string
    issueDate: Date | string
    expiryDate?: Date | string | null
    isVerified?: boolean
  }

  export type CertificationCreateOrConnectWithoutUserInput = {
    where: CertificationWhereUniqueInput
    create: XOR<CertificationCreateWithoutUserInput, CertificationUncheckedCreateWithoutUserInput>
  }

  export type CertificationCreateManyUserInputEnvelope = {
    data: CertificationCreateManyUserInput | CertificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserActivityCreateWithoutUserInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type UserActivityUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type UserActivityCreateOrConnectWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    create: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput>
  }

  export type UserActivityCreateManyUserInputEnvelope = {
    data: UserActivityCreateManyUserInput | UserActivityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ManufacturingOrderUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: ManufacturingOrderWhereUniqueInput
    update: XOR<ManufacturingOrderUpdateWithoutAssignedToInput, ManufacturingOrderUncheckedUpdateWithoutAssignedToInput>
    create: XOR<ManufacturingOrderCreateWithoutAssignedToInput, ManufacturingOrderUncheckedCreateWithoutAssignedToInput>
  }

  export type ManufacturingOrderUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: ManufacturingOrderWhereUniqueInput
    data: XOR<ManufacturingOrderUpdateWithoutAssignedToInput, ManufacturingOrderUncheckedUpdateWithoutAssignedToInput>
  }

  export type ManufacturingOrderUpdateManyWithWhereWithoutAssignedToInput = {
    where: ManufacturingOrderScalarWhereInput
    data: XOR<ManufacturingOrderUpdateManyMutationInput, ManufacturingOrderUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type ManufacturingOrderScalarWhereInput = {
    AND?: ManufacturingOrderScalarWhereInput | ManufacturingOrderScalarWhereInput[]
    OR?: ManufacturingOrderScalarWhereInput[]
    NOT?: ManufacturingOrderScalarWhereInput | ManufacturingOrderScalarWhereInput[]
    id?: StringFilter<"ManufacturingOrder"> | string
    orderNumber?: StringFilter<"ManufacturingOrder"> | string
    productId?: StringFilter<"ManufacturingOrder"> | string
    quantity?: IntFilter<"ManufacturingOrder"> | number
    status?: EnumOrderStatusFilter<"ManufacturingOrder"> | $Enums.OrderStatus
    priority?: EnumPriorityFilter<"ManufacturingOrder"> | $Enums.Priority
    startDate?: DateTimeNullableFilter<"ManufacturingOrder"> | Date | string | null
    deadline?: DateTimeFilter<"ManufacturingOrder"> | Date | string
    completedAt?: DateTimeNullableFilter<"ManufacturingOrder"> | Date | string | null
    assignedToId?: StringNullableFilter<"ManufacturingOrder"> | string | null
    estimatedCost?: FloatNullableFilter<"ManufacturingOrder"> | number | null
    actualCost?: FloatNullableFilter<"ManufacturingOrder"> | number | null
    progress?: FloatFilter<"ManufacturingOrder"> | number
    notes?: StringNullableFilter<"ManufacturingOrder"> | string | null
    createdAt?: DateTimeFilter<"ManufacturingOrder"> | Date | string
    updatedAt?: DateTimeFilter<"ManufacturingOrder"> | Date | string
  }

  export type WorkOrderUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: WorkOrderWhereUniqueInput
    update: XOR<WorkOrderUpdateWithoutAssignedToInput, WorkOrderUncheckedUpdateWithoutAssignedToInput>
    create: XOR<WorkOrderCreateWithoutAssignedToInput, WorkOrderUncheckedCreateWithoutAssignedToInput>
  }

  export type WorkOrderUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: WorkOrderWhereUniqueInput
    data: XOR<WorkOrderUpdateWithoutAssignedToInput, WorkOrderUncheckedUpdateWithoutAssignedToInput>
  }

  export type WorkOrderUpdateManyWithWhereWithoutAssignedToInput = {
    where: WorkOrderScalarWhereInput
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type WorkOrderScalarWhereInput = {
    AND?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
    OR?: WorkOrderScalarWhereInput[]
    NOT?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
    id?: StringFilter<"WorkOrder"> | string
    orderNumber?: StringFilter<"WorkOrder"> | string
    title?: StringFilter<"WorkOrder"> | string
    description?: StringNullableFilter<"WorkOrder"> | string | null
    manufacturingOrderId?: StringFilter<"WorkOrder"> | string
    workCenterId?: StringFilter<"WorkOrder"> | string
    assignedToId?: StringNullableFilter<"WorkOrder"> | string | null
    status?: EnumWorkOrderStatusFilter<"WorkOrder"> | $Enums.WorkOrderStatus
    priority?: EnumPriorityFilter<"WorkOrder"> | $Enums.Priority
    estimatedHours?: FloatFilter<"WorkOrder"> | number
    actualHours?: FloatNullableFilter<"WorkOrder"> | number | null
    progress?: FloatFilter<"WorkOrder"> | number
    startedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    pausedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    dueDate?: DateTimeFilter<"WorkOrder"> | Date | string
    pausedReason?: StringNullableFilter<"WorkOrder"> | string | null
    comments?: StringNullableFilter<"WorkOrder"> | string | null
    tags?: StringNullableListFilter<"WorkOrder">
    createdAt?: DateTimeFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeFilter<"WorkOrder"> | Date | string
  }

  export type StockMovementUpsertWithWhereUniqueWithoutOperatorInput = {
    where: StockMovementWhereUniqueInput
    update: XOR<StockMovementUpdateWithoutOperatorInput, StockMovementUncheckedUpdateWithoutOperatorInput>
    create: XOR<StockMovementCreateWithoutOperatorInput, StockMovementUncheckedCreateWithoutOperatorInput>
  }

  export type StockMovementUpdateWithWhereUniqueWithoutOperatorInput = {
    where: StockMovementWhereUniqueInput
    data: XOR<StockMovementUpdateWithoutOperatorInput, StockMovementUncheckedUpdateWithoutOperatorInput>
  }

  export type StockMovementUpdateManyWithWhereWithoutOperatorInput = {
    where: StockMovementScalarWhereInput
    data: XOR<StockMovementUpdateManyMutationInput, StockMovementUncheckedUpdateManyWithoutOperatorInput>
  }

  export type StockMovementScalarWhereInput = {
    AND?: StockMovementScalarWhereInput | StockMovementScalarWhereInput[]
    OR?: StockMovementScalarWhereInput[]
    NOT?: StockMovementScalarWhereInput | StockMovementScalarWhereInput[]
    id?: StringFilter<"StockMovement"> | string
    stockItemId?: StringFilter<"StockMovement"> | string
    type?: EnumStockMovementTypeFilter<"StockMovement"> | $Enums.StockMovementType
    quantity?: FloatFilter<"StockMovement"> | number
    balanceBefore?: FloatFilter<"StockMovement"> | number
    balanceAfter?: FloatFilter<"StockMovement"> | number
    reference?: StringNullableFilter<"StockMovement"> | string | null
    reason?: StringFilter<"StockMovement"> | string
    operatorId?: StringFilter<"StockMovement"> | string
    timestamp?: DateTimeFilter<"StockMovement"> | Date | string
  }

  export type CertificationUpsertWithWhereUniqueWithoutUserInput = {
    where: CertificationWhereUniqueInput
    update: XOR<CertificationUpdateWithoutUserInput, CertificationUncheckedUpdateWithoutUserInput>
    create: XOR<CertificationCreateWithoutUserInput, CertificationUncheckedCreateWithoutUserInput>
  }

  export type CertificationUpdateWithWhereUniqueWithoutUserInput = {
    where: CertificationWhereUniqueInput
    data: XOR<CertificationUpdateWithoutUserInput, CertificationUncheckedUpdateWithoutUserInput>
  }

  export type CertificationUpdateManyWithWhereWithoutUserInput = {
    where: CertificationScalarWhereInput
    data: XOR<CertificationUpdateManyMutationInput, CertificationUncheckedUpdateManyWithoutUserInput>
  }

  export type CertificationScalarWhereInput = {
    AND?: CertificationScalarWhereInput | CertificationScalarWhereInput[]
    OR?: CertificationScalarWhereInput[]
    NOT?: CertificationScalarWhereInput | CertificationScalarWhereInput[]
    id?: StringFilter<"Certification"> | string
    name?: StringFilter<"Certification"> | string
    issuer?: StringFilter<"Certification"> | string
    issueDate?: DateTimeFilter<"Certification"> | Date | string
    expiryDate?: DateTimeNullableFilter<"Certification"> | Date | string | null
    isVerified?: BoolFilter<"Certification"> | boolean
    userId?: StringFilter<"Certification"> | string
  }

  export type UserActivityUpsertWithWhereUniqueWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    update: XOR<UserActivityUpdateWithoutUserInput, UserActivityUncheckedUpdateWithoutUserInput>
    create: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput>
  }

  export type UserActivityUpdateWithWhereUniqueWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    data: XOR<UserActivityUpdateWithoutUserInput, UserActivityUncheckedUpdateWithoutUserInput>
  }

  export type UserActivityUpdateManyWithWhereWithoutUserInput = {
    where: UserActivityScalarWhereInput
    data: XOR<UserActivityUpdateManyMutationInput, UserActivityUncheckedUpdateManyWithoutUserInput>
  }

  export type UserActivityScalarWhereInput = {
    AND?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
    OR?: UserActivityScalarWhereInput[]
    NOT?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
    id?: StringFilter<"UserActivity"> | string
    type?: StringFilter<"UserActivity"> | string
    description?: StringFilter<"UserActivity"> | string
    metadata?: JsonNullableFilter<"UserActivity">
    timestamp?: DateTimeFilter<"UserActivity"> | Date | string
    userId?: StringFilter<"UserActivity"> | string
  }

  export type UserCreateWithoutCertificationsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    position: string
    department: string
    location?: string | null
    avatar?: string | null
    bio?: string | null
    skills?: UserCreateskillsInput | string[]
    role?: $Enums.UserRole
    isActive?: boolean
    joinDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderCreateNestedManyWithoutAssignedToInput
    workOrders?: WorkOrderCreateNestedManyWithoutAssignedToInput
    stockMovements?: StockMovementCreateNestedManyWithoutOperatorInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCertificationsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    position: string
    department: string
    location?: string | null
    avatar?: string | null
    bio?: string | null
    skills?: UserCreateskillsInput | string[]
    role?: $Enums.UserRole
    isActive?: boolean
    joinDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedCreateNestedManyWithoutAssignedToInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutAssignedToInput
    stockMovements?: StockMovementUncheckedCreateNestedManyWithoutOperatorInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCertificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCertificationsInput, UserUncheckedCreateWithoutCertificationsInput>
  }

  export type UserUpsertWithoutCertificationsInput = {
    update: XOR<UserUpdateWithoutCertificationsInput, UserUncheckedUpdateWithoutCertificationsInput>
    create: XOR<UserCreateWithoutCertificationsInput, UserUncheckedCreateWithoutCertificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCertificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCertificationsInput, UserUncheckedUpdateWithoutCertificationsInput>
  }

  export type UserUpdateWithoutCertificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: UserUpdateskillsInput | string[]
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUpdateManyWithoutAssignedToNestedInput
    workOrders?: WorkOrderUpdateManyWithoutAssignedToNestedInput
    stockMovements?: StockMovementUpdateManyWithoutOperatorNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCertificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: UserUpdateskillsInput | string[]
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    stockMovements?: StockMovementUncheckedUpdateManyWithoutOperatorNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutActivitiesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    position: string
    department: string
    location?: string | null
    avatar?: string | null
    bio?: string | null
    skills?: UserCreateskillsInput | string[]
    role?: $Enums.UserRole
    isActive?: boolean
    joinDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderCreateNestedManyWithoutAssignedToInput
    workOrders?: WorkOrderCreateNestedManyWithoutAssignedToInput
    stockMovements?: StockMovementCreateNestedManyWithoutOperatorInput
    certifications?: CertificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutActivitiesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    position: string
    department: string
    location?: string | null
    avatar?: string | null
    bio?: string | null
    skills?: UserCreateskillsInput | string[]
    role?: $Enums.UserRole
    isActive?: boolean
    joinDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedCreateNestedManyWithoutAssignedToInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutAssignedToInput
    stockMovements?: StockMovementUncheckedCreateNestedManyWithoutOperatorInput
    certifications?: CertificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
  }

  export type UserUpsertWithoutActivitiesInput = {
    update: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: UserUpdateskillsInput | string[]
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUpdateManyWithoutAssignedToNestedInput
    workOrders?: WorkOrderUpdateManyWithoutAssignedToNestedInput
    stockMovements?: StockMovementUpdateManyWithoutOperatorNestedInput
    certifications?: CertificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: UserUpdateskillsInput | string[]
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    stockMovements?: StockMovementUncheckedUpdateManyWithoutOperatorNestedInput
    certifications?: CertificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ManufacturingOrderCreateWithoutProductInput = {
    id?: string
    orderNumber: string
    quantity: number
    status?: $Enums.OrderStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    deadline: Date | string
    completedAt?: Date | string | null
    estimatedCost?: number | null
    actualCost?: number | null
    progress?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutManufacturingOrdersInput
    workOrders?: WorkOrderCreateNestedManyWithoutManufacturingOrderInput
  }

  export type ManufacturingOrderUncheckedCreateWithoutProductInput = {
    id?: string
    orderNumber: string
    quantity: number
    status?: $Enums.OrderStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    deadline: Date | string
    completedAt?: Date | string | null
    assignedToId?: string | null
    estimatedCost?: number | null
    actualCost?: number | null
    progress?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutManufacturingOrderInput
  }

  export type ManufacturingOrderCreateOrConnectWithoutProductInput = {
    where: ManufacturingOrderWhereUniqueInput
    create: XOR<ManufacturingOrderCreateWithoutProductInput, ManufacturingOrderUncheckedCreateWithoutProductInput>
  }

  export type ManufacturingOrderCreateManyProductInputEnvelope = {
    data: ManufacturingOrderCreateManyProductInput | ManufacturingOrderCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type BillOfMaterialsCreateWithoutProductInput = {
    id?: string
    version: string
    status?: $Enums.BomStatus
    description?: string | null
    totalCost?: number | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: BomItemCreateNestedManyWithoutBomInput
  }

  export type BillOfMaterialsUncheckedCreateWithoutProductInput = {
    id?: string
    version: string
    status?: $Enums.BomStatus
    description?: string | null
    totalCost?: number | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: BomItemUncheckedCreateNestedManyWithoutBomInput
  }

  export type BillOfMaterialsCreateOrConnectWithoutProductInput = {
    where: BillOfMaterialsWhereUniqueInput
    create: XOR<BillOfMaterialsCreateWithoutProductInput, BillOfMaterialsUncheckedCreateWithoutProductInput>
  }

  export type BillOfMaterialsCreateManyProductInputEnvelope = {
    data: BillOfMaterialsCreateManyProductInput | BillOfMaterialsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type BomItemCreateWithoutComponentInput = {
    id?: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    leadTimeDays?: number | null
    supplier?: string | null
    specifications?: string | null
    bom: BillOfMaterialsCreateNestedOneWithoutItemsInput
  }

  export type BomItemUncheckedCreateWithoutComponentInput = {
    id?: string
    bomId: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    leadTimeDays?: number | null
    supplier?: string | null
    specifications?: string | null
  }

  export type BomItemCreateOrConnectWithoutComponentInput = {
    where: BomItemWhereUniqueInput
    create: XOR<BomItemCreateWithoutComponentInput, BomItemUncheckedCreateWithoutComponentInput>
  }

  export type BomItemCreateManyComponentInputEnvelope = {
    data: BomItemCreateManyComponentInput | BomItemCreateManyComponentInput[]
    skipDuplicates?: boolean
  }

  export type StockItemCreateWithoutProductInput = {
    id?: string
    currentStock: number
    minStock: number
    maxStock: number
    unit: string
    location: string
    unitCost?: number | null
    totalValue?: number | null
    lastMovement?: Date | string | null
    supplier?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    movements?: StockMovementCreateNestedManyWithoutStockItemInput
  }

  export type StockItemUncheckedCreateWithoutProductInput = {
    id?: string
    currentStock: number
    minStock: number
    maxStock: number
    unit: string
    location: string
    unitCost?: number | null
    totalValue?: number | null
    lastMovement?: Date | string | null
    supplier?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    movements?: StockMovementUncheckedCreateNestedManyWithoutStockItemInput
  }

  export type StockItemCreateOrConnectWithoutProductInput = {
    where: StockItemWhereUniqueInput
    create: XOR<StockItemCreateWithoutProductInput, StockItemUncheckedCreateWithoutProductInput>
  }

  export type StockItemCreateManyProductInputEnvelope = {
    data: StockItemCreateManyProductInput | StockItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ManufacturingOrderUpsertWithWhereUniqueWithoutProductInput = {
    where: ManufacturingOrderWhereUniqueInput
    update: XOR<ManufacturingOrderUpdateWithoutProductInput, ManufacturingOrderUncheckedUpdateWithoutProductInput>
    create: XOR<ManufacturingOrderCreateWithoutProductInput, ManufacturingOrderUncheckedCreateWithoutProductInput>
  }

  export type ManufacturingOrderUpdateWithWhereUniqueWithoutProductInput = {
    where: ManufacturingOrderWhereUniqueInput
    data: XOR<ManufacturingOrderUpdateWithoutProductInput, ManufacturingOrderUncheckedUpdateWithoutProductInput>
  }

  export type ManufacturingOrderUpdateManyWithWhereWithoutProductInput = {
    where: ManufacturingOrderScalarWhereInput
    data: XOR<ManufacturingOrderUpdateManyMutationInput, ManufacturingOrderUncheckedUpdateManyWithoutProductInput>
  }

  export type BillOfMaterialsUpsertWithWhereUniqueWithoutProductInput = {
    where: BillOfMaterialsWhereUniqueInput
    update: XOR<BillOfMaterialsUpdateWithoutProductInput, BillOfMaterialsUncheckedUpdateWithoutProductInput>
    create: XOR<BillOfMaterialsCreateWithoutProductInput, BillOfMaterialsUncheckedCreateWithoutProductInput>
  }

  export type BillOfMaterialsUpdateWithWhereUniqueWithoutProductInput = {
    where: BillOfMaterialsWhereUniqueInput
    data: XOR<BillOfMaterialsUpdateWithoutProductInput, BillOfMaterialsUncheckedUpdateWithoutProductInput>
  }

  export type BillOfMaterialsUpdateManyWithWhereWithoutProductInput = {
    where: BillOfMaterialsScalarWhereInput
    data: XOR<BillOfMaterialsUpdateManyMutationInput, BillOfMaterialsUncheckedUpdateManyWithoutProductInput>
  }

  export type BillOfMaterialsScalarWhereInput = {
    AND?: BillOfMaterialsScalarWhereInput | BillOfMaterialsScalarWhereInput[]
    OR?: BillOfMaterialsScalarWhereInput[]
    NOT?: BillOfMaterialsScalarWhereInput | BillOfMaterialsScalarWhereInput[]
    id?: StringFilter<"BillOfMaterials"> | string
    productId?: StringFilter<"BillOfMaterials"> | string
    version?: StringFilter<"BillOfMaterials"> | string
    status?: EnumBomStatusFilter<"BillOfMaterials"> | $Enums.BomStatus
    description?: StringNullableFilter<"BillOfMaterials"> | string | null
    totalCost?: FloatNullableFilter<"BillOfMaterials"> | number | null
    createdBy?: StringFilter<"BillOfMaterials"> | string
    createdAt?: DateTimeFilter<"BillOfMaterials"> | Date | string
    updatedAt?: DateTimeFilter<"BillOfMaterials"> | Date | string
  }

  export type BomItemUpsertWithWhereUniqueWithoutComponentInput = {
    where: BomItemWhereUniqueInput
    update: XOR<BomItemUpdateWithoutComponentInput, BomItemUncheckedUpdateWithoutComponentInput>
    create: XOR<BomItemCreateWithoutComponentInput, BomItemUncheckedCreateWithoutComponentInput>
  }

  export type BomItemUpdateWithWhereUniqueWithoutComponentInput = {
    where: BomItemWhereUniqueInput
    data: XOR<BomItemUpdateWithoutComponentInput, BomItemUncheckedUpdateWithoutComponentInput>
  }

  export type BomItemUpdateManyWithWhereWithoutComponentInput = {
    where: BomItemScalarWhereInput
    data: XOR<BomItemUpdateManyMutationInput, BomItemUncheckedUpdateManyWithoutComponentInput>
  }

  export type BomItemScalarWhereInput = {
    AND?: BomItemScalarWhereInput | BomItemScalarWhereInput[]
    OR?: BomItemScalarWhereInput[]
    NOT?: BomItemScalarWhereInput | BomItemScalarWhereInput[]
    id?: StringFilter<"BomItem"> | string
    bomId?: StringFilter<"BomItem"> | string
    componentId?: StringFilter<"BomItem"> | string
    quantity?: FloatFilter<"BomItem"> | number
    unit?: StringFilter<"BomItem"> | string
    unitCost?: FloatNullableFilter<"BomItem"> | number | null
    totalCost?: FloatNullableFilter<"BomItem"> | number | null
    leadTimeDays?: IntNullableFilter<"BomItem"> | number | null
    supplier?: StringNullableFilter<"BomItem"> | string | null
    specifications?: StringNullableFilter<"BomItem"> | string | null
  }

  export type StockItemUpsertWithWhereUniqueWithoutProductInput = {
    where: StockItemWhereUniqueInput
    update: XOR<StockItemUpdateWithoutProductInput, StockItemUncheckedUpdateWithoutProductInput>
    create: XOR<StockItemCreateWithoutProductInput, StockItemUncheckedCreateWithoutProductInput>
  }

  export type StockItemUpdateWithWhereUniqueWithoutProductInput = {
    where: StockItemWhereUniqueInput
    data: XOR<StockItemUpdateWithoutProductInput, StockItemUncheckedUpdateWithoutProductInput>
  }

  export type StockItemUpdateManyWithWhereWithoutProductInput = {
    where: StockItemScalarWhereInput
    data: XOR<StockItemUpdateManyMutationInput, StockItemUncheckedUpdateManyWithoutProductInput>
  }

  export type StockItemScalarWhereInput = {
    AND?: StockItemScalarWhereInput | StockItemScalarWhereInput[]
    OR?: StockItemScalarWhereInput[]
    NOT?: StockItemScalarWhereInput | StockItemScalarWhereInput[]
    id?: StringFilter<"StockItem"> | string
    productId?: StringFilter<"StockItem"> | string
    currentStock?: FloatFilter<"StockItem"> | number
    minStock?: FloatFilter<"StockItem"> | number
    maxStock?: FloatFilter<"StockItem"> | number
    unit?: StringFilter<"StockItem"> | string
    location?: StringFilter<"StockItem"> | string
    unitCost?: FloatNullableFilter<"StockItem"> | number | null
    totalValue?: FloatNullableFilter<"StockItem"> | number | null
    lastMovement?: DateTimeNullableFilter<"StockItem"> | Date | string | null
    supplier?: StringNullableFilter<"StockItem"> | string | null
    createdAt?: DateTimeFilter<"StockItem"> | Date | string
    updatedAt?: DateTimeFilter<"StockItem"> | Date | string
  }

  export type ProductCreateWithoutBillsOfMaterialsInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    unitCost?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderCreateNestedManyWithoutProductInput
    bomComponents?: BomItemCreateNestedManyWithoutComponentInput
    stockItems?: StockItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutBillsOfMaterialsInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    unitCost?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedCreateNestedManyWithoutProductInput
    bomComponents?: BomItemUncheckedCreateNestedManyWithoutComponentInput
    stockItems?: StockItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutBillsOfMaterialsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutBillsOfMaterialsInput, ProductUncheckedCreateWithoutBillsOfMaterialsInput>
  }

  export type BomItemCreateWithoutBomInput = {
    id?: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    leadTimeDays?: number | null
    supplier?: string | null
    specifications?: string | null
    component: ProductCreateNestedOneWithoutBomComponentsInput
  }

  export type BomItemUncheckedCreateWithoutBomInput = {
    id?: string
    componentId: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    leadTimeDays?: number | null
    supplier?: string | null
    specifications?: string | null
  }

  export type BomItemCreateOrConnectWithoutBomInput = {
    where: BomItemWhereUniqueInput
    create: XOR<BomItemCreateWithoutBomInput, BomItemUncheckedCreateWithoutBomInput>
  }

  export type BomItemCreateManyBomInputEnvelope = {
    data: BomItemCreateManyBomInput | BomItemCreateManyBomInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithoutBillsOfMaterialsInput = {
    update: XOR<ProductUpdateWithoutBillsOfMaterialsInput, ProductUncheckedUpdateWithoutBillsOfMaterialsInput>
    create: XOR<ProductCreateWithoutBillsOfMaterialsInput, ProductUncheckedCreateWithoutBillsOfMaterialsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutBillsOfMaterialsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutBillsOfMaterialsInput, ProductUncheckedUpdateWithoutBillsOfMaterialsInput>
  }

  export type ProductUpdateWithoutBillsOfMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUpdateManyWithoutProductNestedInput
    bomComponents?: BomItemUpdateManyWithoutComponentNestedInput
    stockItems?: StockItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutBillsOfMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedUpdateManyWithoutProductNestedInput
    bomComponents?: BomItemUncheckedUpdateManyWithoutComponentNestedInput
    stockItems?: StockItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type BomItemUpsertWithWhereUniqueWithoutBomInput = {
    where: BomItemWhereUniqueInput
    update: XOR<BomItemUpdateWithoutBomInput, BomItemUncheckedUpdateWithoutBomInput>
    create: XOR<BomItemCreateWithoutBomInput, BomItemUncheckedCreateWithoutBomInput>
  }

  export type BomItemUpdateWithWhereUniqueWithoutBomInput = {
    where: BomItemWhereUniqueInput
    data: XOR<BomItemUpdateWithoutBomInput, BomItemUncheckedUpdateWithoutBomInput>
  }

  export type BomItemUpdateManyWithWhereWithoutBomInput = {
    where: BomItemScalarWhereInput
    data: XOR<BomItemUpdateManyMutationInput, BomItemUncheckedUpdateManyWithoutBomInput>
  }

  export type BillOfMaterialsCreateWithoutItemsInput = {
    id?: string
    version: string
    status?: $Enums.BomStatus
    description?: string | null
    totalCost?: number | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutBillsOfMaterialsInput
  }

  export type BillOfMaterialsUncheckedCreateWithoutItemsInput = {
    id?: string
    productId: string
    version: string
    status?: $Enums.BomStatus
    description?: string | null
    totalCost?: number | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillOfMaterialsCreateOrConnectWithoutItemsInput = {
    where: BillOfMaterialsWhereUniqueInput
    create: XOR<BillOfMaterialsCreateWithoutItemsInput, BillOfMaterialsUncheckedCreateWithoutItemsInput>
  }

  export type ProductCreateWithoutBomComponentsInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    unitCost?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderCreateNestedManyWithoutProductInput
    billsOfMaterials?: BillOfMaterialsCreateNestedManyWithoutProductInput
    stockItems?: StockItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutBomComponentsInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    unitCost?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedCreateNestedManyWithoutProductInput
    billsOfMaterials?: BillOfMaterialsUncheckedCreateNestedManyWithoutProductInput
    stockItems?: StockItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutBomComponentsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutBomComponentsInput, ProductUncheckedCreateWithoutBomComponentsInput>
  }

  export type BillOfMaterialsUpsertWithoutItemsInput = {
    update: XOR<BillOfMaterialsUpdateWithoutItemsInput, BillOfMaterialsUncheckedUpdateWithoutItemsInput>
    create: XOR<BillOfMaterialsCreateWithoutItemsInput, BillOfMaterialsUncheckedCreateWithoutItemsInput>
    where?: BillOfMaterialsWhereInput
  }

  export type BillOfMaterialsUpdateToOneWithWhereWithoutItemsInput = {
    where?: BillOfMaterialsWhereInput
    data: XOR<BillOfMaterialsUpdateWithoutItemsInput, BillOfMaterialsUncheckedUpdateWithoutItemsInput>
  }

  export type BillOfMaterialsUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: EnumBomStatusFieldUpdateOperationsInput | $Enums.BomStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutBillsOfMaterialsNestedInput
  }

  export type BillOfMaterialsUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: EnumBomStatusFieldUpdateOperationsInput | $Enums.BomStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpsertWithoutBomComponentsInput = {
    update: XOR<ProductUpdateWithoutBomComponentsInput, ProductUncheckedUpdateWithoutBomComponentsInput>
    create: XOR<ProductCreateWithoutBomComponentsInput, ProductUncheckedCreateWithoutBomComponentsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutBomComponentsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutBomComponentsInput, ProductUncheckedUpdateWithoutBomComponentsInput>
  }

  export type ProductUpdateWithoutBomComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUpdateManyWithoutProductNestedInput
    billsOfMaterials?: BillOfMaterialsUpdateManyWithoutProductNestedInput
    stockItems?: StockItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutBomComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedUpdateManyWithoutProductNestedInput
    billsOfMaterials?: BillOfMaterialsUncheckedUpdateManyWithoutProductNestedInput
    stockItems?: StockItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutManufacturingOrdersInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    unitCost?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    billsOfMaterials?: BillOfMaterialsCreateNestedManyWithoutProductInput
    bomComponents?: BomItemCreateNestedManyWithoutComponentInput
    stockItems?: StockItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutManufacturingOrdersInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    unitCost?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    billsOfMaterials?: BillOfMaterialsUncheckedCreateNestedManyWithoutProductInput
    bomComponents?: BomItemUncheckedCreateNestedManyWithoutComponentInput
    stockItems?: StockItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutManufacturingOrdersInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutManufacturingOrdersInput, ProductUncheckedCreateWithoutManufacturingOrdersInput>
  }

  export type UserCreateWithoutManufacturingOrdersInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    position: string
    department: string
    location?: string | null
    avatar?: string | null
    bio?: string | null
    skills?: UserCreateskillsInput | string[]
    role?: $Enums.UserRole
    isActive?: boolean
    joinDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderCreateNestedManyWithoutAssignedToInput
    stockMovements?: StockMovementCreateNestedManyWithoutOperatorInput
    certifications?: CertificationCreateNestedManyWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutManufacturingOrdersInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    position: string
    department: string
    location?: string | null
    avatar?: string | null
    bio?: string | null
    skills?: UserCreateskillsInput | string[]
    role?: $Enums.UserRole
    isActive?: boolean
    joinDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutAssignedToInput
    stockMovements?: StockMovementUncheckedCreateNestedManyWithoutOperatorInput
    certifications?: CertificationUncheckedCreateNestedManyWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutManufacturingOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutManufacturingOrdersInput, UserUncheckedCreateWithoutManufacturingOrdersInput>
  }

  export type WorkOrderCreateWithoutManufacturingOrderInput = {
    id?: string
    orderNumber: string
    title: string
    description?: string | null
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.Priority
    estimatedHours: number
    actualHours?: number | null
    progress?: number
    startedAt?: Date | string | null
    pausedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate: Date | string
    pausedReason?: string | null
    comments?: string | null
    tags?: WorkOrderCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    workCenter: WorkCenterCreateNestedOneWithoutWorkOrdersInput
    assignedTo?: UserCreateNestedOneWithoutWorkOrdersInput
  }

  export type WorkOrderUncheckedCreateWithoutManufacturingOrderInput = {
    id?: string
    orderNumber: string
    title: string
    description?: string | null
    workCenterId: string
    assignedToId?: string | null
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.Priority
    estimatedHours: number
    actualHours?: number | null
    progress?: number
    startedAt?: Date | string | null
    pausedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate: Date | string
    pausedReason?: string | null
    comments?: string | null
    tags?: WorkOrderCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderCreateOrConnectWithoutManufacturingOrderInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutManufacturingOrderInput, WorkOrderUncheckedCreateWithoutManufacturingOrderInput>
  }

  export type WorkOrderCreateManyManufacturingOrderInputEnvelope = {
    data: WorkOrderCreateManyManufacturingOrderInput | WorkOrderCreateManyManufacturingOrderInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithoutManufacturingOrdersInput = {
    update: XOR<ProductUpdateWithoutManufacturingOrdersInput, ProductUncheckedUpdateWithoutManufacturingOrdersInput>
    create: XOR<ProductCreateWithoutManufacturingOrdersInput, ProductUncheckedCreateWithoutManufacturingOrdersInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutManufacturingOrdersInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutManufacturingOrdersInput, ProductUncheckedUpdateWithoutManufacturingOrdersInput>
  }

  export type ProductUpdateWithoutManufacturingOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billsOfMaterials?: BillOfMaterialsUpdateManyWithoutProductNestedInput
    bomComponents?: BomItemUpdateManyWithoutComponentNestedInput
    stockItems?: StockItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutManufacturingOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billsOfMaterials?: BillOfMaterialsUncheckedUpdateManyWithoutProductNestedInput
    bomComponents?: BomItemUncheckedUpdateManyWithoutComponentNestedInput
    stockItems?: StockItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UserUpsertWithoutManufacturingOrdersInput = {
    update: XOR<UserUpdateWithoutManufacturingOrdersInput, UserUncheckedUpdateWithoutManufacturingOrdersInput>
    create: XOR<UserCreateWithoutManufacturingOrdersInput, UserUncheckedCreateWithoutManufacturingOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutManufacturingOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutManufacturingOrdersInput, UserUncheckedUpdateWithoutManufacturingOrdersInput>
  }

  export type UserUpdateWithoutManufacturingOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: UserUpdateskillsInput | string[]
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderUpdateManyWithoutAssignedToNestedInput
    stockMovements?: StockMovementUpdateManyWithoutOperatorNestedInput
    certifications?: CertificationUpdateManyWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutManufacturingOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: UserUpdateskillsInput | string[]
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    stockMovements?: StockMovementUncheckedUpdateManyWithoutOperatorNestedInput
    certifications?: CertificationUncheckedUpdateManyWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkOrderUpsertWithWhereUniqueWithoutManufacturingOrderInput = {
    where: WorkOrderWhereUniqueInput
    update: XOR<WorkOrderUpdateWithoutManufacturingOrderInput, WorkOrderUncheckedUpdateWithoutManufacturingOrderInput>
    create: XOR<WorkOrderCreateWithoutManufacturingOrderInput, WorkOrderUncheckedCreateWithoutManufacturingOrderInput>
  }

  export type WorkOrderUpdateWithWhereUniqueWithoutManufacturingOrderInput = {
    where: WorkOrderWhereUniqueInput
    data: XOR<WorkOrderUpdateWithoutManufacturingOrderInput, WorkOrderUncheckedUpdateWithoutManufacturingOrderInput>
  }

  export type WorkOrderUpdateManyWithWhereWithoutManufacturingOrderInput = {
    where: WorkOrderScalarWhereInput
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyWithoutManufacturingOrderInput>
  }

  export type WorkOrderCreateWithoutWorkCenterInput = {
    id?: string
    orderNumber: string
    title: string
    description?: string | null
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.Priority
    estimatedHours: number
    actualHours?: number | null
    progress?: number
    startedAt?: Date | string | null
    pausedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate: Date | string
    pausedReason?: string | null
    comments?: string | null
    tags?: WorkOrderCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrder: ManufacturingOrderCreateNestedOneWithoutWorkOrdersInput
    assignedTo?: UserCreateNestedOneWithoutWorkOrdersInput
  }

  export type WorkOrderUncheckedCreateWithoutWorkCenterInput = {
    id?: string
    orderNumber: string
    title: string
    description?: string | null
    manufacturingOrderId: string
    assignedToId?: string | null
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.Priority
    estimatedHours: number
    actualHours?: number | null
    progress?: number
    startedAt?: Date | string | null
    pausedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate: Date | string
    pausedReason?: string | null
    comments?: string | null
    tags?: WorkOrderCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderCreateOrConnectWithoutWorkCenterInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutWorkCenterInput, WorkOrderUncheckedCreateWithoutWorkCenterInput>
  }

  export type WorkOrderCreateManyWorkCenterInputEnvelope = {
    data: WorkOrderCreateManyWorkCenterInput | WorkOrderCreateManyWorkCenterInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderUpsertWithWhereUniqueWithoutWorkCenterInput = {
    where: WorkOrderWhereUniqueInput
    update: XOR<WorkOrderUpdateWithoutWorkCenterInput, WorkOrderUncheckedUpdateWithoutWorkCenterInput>
    create: XOR<WorkOrderCreateWithoutWorkCenterInput, WorkOrderUncheckedCreateWithoutWorkCenterInput>
  }

  export type WorkOrderUpdateWithWhereUniqueWithoutWorkCenterInput = {
    where: WorkOrderWhereUniqueInput
    data: XOR<WorkOrderUpdateWithoutWorkCenterInput, WorkOrderUncheckedUpdateWithoutWorkCenterInput>
  }

  export type WorkOrderUpdateManyWithWhereWithoutWorkCenterInput = {
    where: WorkOrderScalarWhereInput
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyWithoutWorkCenterInput>
  }

  export type ManufacturingOrderCreateWithoutWorkOrdersInput = {
    id?: string
    orderNumber: string
    quantity: number
    status?: $Enums.OrderStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    deadline: Date | string
    completedAt?: Date | string | null
    estimatedCost?: number | null
    actualCost?: number | null
    progress?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutManufacturingOrdersInput
    assignedTo?: UserCreateNestedOneWithoutManufacturingOrdersInput
  }

  export type ManufacturingOrderUncheckedCreateWithoutWorkOrdersInput = {
    id?: string
    orderNumber: string
    productId: string
    quantity: number
    status?: $Enums.OrderStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    deadline: Date | string
    completedAt?: Date | string | null
    assignedToId?: string | null
    estimatedCost?: number | null
    actualCost?: number | null
    progress?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ManufacturingOrderCreateOrConnectWithoutWorkOrdersInput = {
    where: ManufacturingOrderWhereUniqueInput
    create: XOR<ManufacturingOrderCreateWithoutWorkOrdersInput, ManufacturingOrderUncheckedCreateWithoutWorkOrdersInput>
  }

  export type WorkCenterCreateWithoutWorkOrdersInput = {
    id?: string
    name: string
    type: string
    location: string
    status?: $Enums.WorkCenterStatus
    capacity?: number
    hourlyCost: number
    utilization?: number
    efficiency?: number
    downtime?: number
    totalHours?: number
    productiveHours?: number
    specifications?: NullableJsonNullValueInput | InputJsonValue
    maintenanceScheduled?: Date | string | null
    lastMaintenance?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkCenterUncheckedCreateWithoutWorkOrdersInput = {
    id?: string
    name: string
    type: string
    location: string
    status?: $Enums.WorkCenterStatus
    capacity?: number
    hourlyCost: number
    utilization?: number
    efficiency?: number
    downtime?: number
    totalHours?: number
    productiveHours?: number
    specifications?: NullableJsonNullValueInput | InputJsonValue
    maintenanceScheduled?: Date | string | null
    lastMaintenance?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkCenterCreateOrConnectWithoutWorkOrdersInput = {
    where: WorkCenterWhereUniqueInput
    create: XOR<WorkCenterCreateWithoutWorkOrdersInput, WorkCenterUncheckedCreateWithoutWorkOrdersInput>
  }

  export type UserCreateWithoutWorkOrdersInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    position: string
    department: string
    location?: string | null
    avatar?: string | null
    bio?: string | null
    skills?: UserCreateskillsInput | string[]
    role?: $Enums.UserRole
    isActive?: boolean
    joinDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderCreateNestedManyWithoutAssignedToInput
    stockMovements?: StockMovementCreateNestedManyWithoutOperatorInput
    certifications?: CertificationCreateNestedManyWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkOrdersInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    position: string
    department: string
    location?: string | null
    avatar?: string | null
    bio?: string | null
    skills?: UserCreateskillsInput | string[]
    role?: $Enums.UserRole
    isActive?: boolean
    joinDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedCreateNestedManyWithoutAssignedToInput
    stockMovements?: StockMovementUncheckedCreateNestedManyWithoutOperatorInput
    certifications?: CertificationUncheckedCreateNestedManyWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkOrdersInput, UserUncheckedCreateWithoutWorkOrdersInput>
  }

  export type ManufacturingOrderUpsertWithoutWorkOrdersInput = {
    update: XOR<ManufacturingOrderUpdateWithoutWorkOrdersInput, ManufacturingOrderUncheckedUpdateWithoutWorkOrdersInput>
    create: XOR<ManufacturingOrderCreateWithoutWorkOrdersInput, ManufacturingOrderUncheckedCreateWithoutWorkOrdersInput>
    where?: ManufacturingOrderWhereInput
  }

  export type ManufacturingOrderUpdateToOneWithWhereWithoutWorkOrdersInput = {
    where?: ManufacturingOrderWhereInput
    data: XOR<ManufacturingOrderUpdateWithoutWorkOrdersInput, ManufacturingOrderUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type ManufacturingOrderUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableFloatFieldUpdateOperationsInput | number | null
    actualCost?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutManufacturingOrdersNestedInput
    assignedTo?: UserUpdateOneWithoutManufacturingOrdersNestedInput
  }

  export type ManufacturingOrderUncheckedUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedCost?: NullableFloatFieldUpdateOperationsInput | number | null
    actualCost?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkCenterUpsertWithoutWorkOrdersInput = {
    update: XOR<WorkCenterUpdateWithoutWorkOrdersInput, WorkCenterUncheckedUpdateWithoutWorkOrdersInput>
    create: XOR<WorkCenterCreateWithoutWorkOrdersInput, WorkCenterUncheckedCreateWithoutWorkOrdersInput>
    where?: WorkCenterWhereInput
  }

  export type WorkCenterUpdateToOneWithWhereWithoutWorkOrdersInput = {
    where?: WorkCenterWhereInput
    data: XOR<WorkCenterUpdateWithoutWorkOrdersInput, WorkCenterUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type WorkCenterUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkCenterStatusFieldUpdateOperationsInput | $Enums.WorkCenterStatus
    capacity?: FloatFieldUpdateOperationsInput | number
    hourlyCost?: FloatFieldUpdateOperationsInput | number
    utilization?: FloatFieldUpdateOperationsInput | number
    efficiency?: FloatFieldUpdateOperationsInput | number
    downtime?: FloatFieldUpdateOperationsInput | number
    totalHours?: FloatFieldUpdateOperationsInput | number
    productiveHours?: FloatFieldUpdateOperationsInput | number
    specifications?: NullableJsonNullValueInput | InputJsonValue
    maintenanceScheduled?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkCenterUncheckedUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkCenterStatusFieldUpdateOperationsInput | $Enums.WorkCenterStatus
    capacity?: FloatFieldUpdateOperationsInput | number
    hourlyCost?: FloatFieldUpdateOperationsInput | number
    utilization?: FloatFieldUpdateOperationsInput | number
    efficiency?: FloatFieldUpdateOperationsInput | number
    downtime?: FloatFieldUpdateOperationsInput | number
    totalHours?: FloatFieldUpdateOperationsInput | number
    productiveHours?: FloatFieldUpdateOperationsInput | number
    specifications?: NullableJsonNullValueInput | InputJsonValue
    maintenanceScheduled?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutWorkOrdersInput = {
    update: XOR<UserUpdateWithoutWorkOrdersInput, UserUncheckedUpdateWithoutWorkOrdersInput>
    create: XOR<UserCreateWithoutWorkOrdersInput, UserUncheckedCreateWithoutWorkOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkOrdersInput, UserUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type UserUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: UserUpdateskillsInput | string[]
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUpdateManyWithoutAssignedToNestedInput
    stockMovements?: StockMovementUpdateManyWithoutOperatorNestedInput
    certifications?: CertificationUpdateManyWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: UserUpdateskillsInput | string[]
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    stockMovements?: StockMovementUncheckedUpdateManyWithoutOperatorNestedInput
    certifications?: CertificationUncheckedUpdateManyWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductCreateWithoutStockItemsInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    unitCost?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderCreateNestedManyWithoutProductInput
    billsOfMaterials?: BillOfMaterialsCreateNestedManyWithoutProductInput
    bomComponents?: BomItemCreateNestedManyWithoutComponentInput
  }

  export type ProductUncheckedCreateWithoutStockItemsInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    unitCost?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedCreateNestedManyWithoutProductInput
    billsOfMaterials?: BillOfMaterialsUncheckedCreateNestedManyWithoutProductInput
    bomComponents?: BomItemUncheckedCreateNestedManyWithoutComponentInput
  }

  export type ProductCreateOrConnectWithoutStockItemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutStockItemsInput, ProductUncheckedCreateWithoutStockItemsInput>
  }

  export type StockMovementCreateWithoutStockItemInput = {
    id?: string
    type: $Enums.StockMovementType
    quantity: number
    balanceBefore: number
    balanceAfter: number
    reference?: string | null
    reason: string
    timestamp?: Date | string
    operator: UserCreateNestedOneWithoutStockMovementsInput
  }

  export type StockMovementUncheckedCreateWithoutStockItemInput = {
    id?: string
    type: $Enums.StockMovementType
    quantity: number
    balanceBefore: number
    balanceAfter: number
    reference?: string | null
    reason: string
    operatorId: string
    timestamp?: Date | string
  }

  export type StockMovementCreateOrConnectWithoutStockItemInput = {
    where: StockMovementWhereUniqueInput
    create: XOR<StockMovementCreateWithoutStockItemInput, StockMovementUncheckedCreateWithoutStockItemInput>
  }

  export type StockMovementCreateManyStockItemInputEnvelope = {
    data: StockMovementCreateManyStockItemInput | StockMovementCreateManyStockItemInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithoutStockItemsInput = {
    update: XOR<ProductUpdateWithoutStockItemsInput, ProductUncheckedUpdateWithoutStockItemsInput>
    create: XOR<ProductCreateWithoutStockItemsInput, ProductUncheckedCreateWithoutStockItemsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutStockItemsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutStockItemsInput, ProductUncheckedUpdateWithoutStockItemsInput>
  }

  export type ProductUpdateWithoutStockItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUpdateManyWithoutProductNestedInput
    billsOfMaterials?: BillOfMaterialsUpdateManyWithoutProductNestedInput
    bomComponents?: BomItemUpdateManyWithoutComponentNestedInput
  }

  export type ProductUncheckedUpdateWithoutStockItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedUpdateManyWithoutProductNestedInput
    billsOfMaterials?: BillOfMaterialsUncheckedUpdateManyWithoutProductNestedInput
    bomComponents?: BomItemUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type StockMovementUpsertWithWhereUniqueWithoutStockItemInput = {
    where: StockMovementWhereUniqueInput
    update: XOR<StockMovementUpdateWithoutStockItemInput, StockMovementUncheckedUpdateWithoutStockItemInput>
    create: XOR<StockMovementCreateWithoutStockItemInput, StockMovementUncheckedCreateWithoutStockItemInput>
  }

  export type StockMovementUpdateWithWhereUniqueWithoutStockItemInput = {
    where: StockMovementWhereUniqueInput
    data: XOR<StockMovementUpdateWithoutStockItemInput, StockMovementUncheckedUpdateWithoutStockItemInput>
  }

  export type StockMovementUpdateManyWithWhereWithoutStockItemInput = {
    where: StockMovementScalarWhereInput
    data: XOR<StockMovementUpdateManyMutationInput, StockMovementUncheckedUpdateManyWithoutStockItemInput>
  }

  export type StockItemCreateWithoutMovementsInput = {
    id?: string
    currentStock: number
    minStock: number
    maxStock: number
    unit: string
    location: string
    unitCost?: number | null
    totalValue?: number | null
    lastMovement?: Date | string | null
    supplier?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutStockItemsInput
  }

  export type StockItemUncheckedCreateWithoutMovementsInput = {
    id?: string
    productId: string
    currentStock: number
    minStock: number
    maxStock: number
    unit: string
    location: string
    unitCost?: number | null
    totalValue?: number | null
    lastMovement?: Date | string | null
    supplier?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockItemCreateOrConnectWithoutMovementsInput = {
    where: StockItemWhereUniqueInput
    create: XOR<StockItemCreateWithoutMovementsInput, StockItemUncheckedCreateWithoutMovementsInput>
  }

  export type UserCreateWithoutStockMovementsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    position: string
    department: string
    location?: string | null
    avatar?: string | null
    bio?: string | null
    skills?: UserCreateskillsInput | string[]
    role?: $Enums.UserRole
    isActive?: boolean
    joinDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderCreateNestedManyWithoutAssignedToInput
    workOrders?: WorkOrderCreateNestedManyWithoutAssignedToInput
    certifications?: CertificationCreateNestedManyWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStockMovementsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    position: string
    department: string
    location?: string | null
    avatar?: string | null
    bio?: string | null
    skills?: UserCreateskillsInput | string[]
    role?: $Enums.UserRole
    isActive?: boolean
    joinDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedCreateNestedManyWithoutAssignedToInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutAssignedToInput
    certifications?: CertificationUncheckedCreateNestedManyWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStockMovementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStockMovementsInput, UserUncheckedCreateWithoutStockMovementsInput>
  }

  export type StockItemUpsertWithoutMovementsInput = {
    update: XOR<StockItemUpdateWithoutMovementsInput, StockItemUncheckedUpdateWithoutMovementsInput>
    create: XOR<StockItemCreateWithoutMovementsInput, StockItemUncheckedCreateWithoutMovementsInput>
    where?: StockItemWhereInput
  }

  export type StockItemUpdateToOneWithWhereWithoutMovementsInput = {
    where?: StockItemWhereInput
    data: XOR<StockItemUpdateWithoutMovementsInput, StockItemUncheckedUpdateWithoutMovementsInput>
  }

  export type StockItemUpdateWithoutMovementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentStock?: FloatFieldUpdateOperationsInput | number
    minStock?: FloatFieldUpdateOperationsInput | number
    maxStock?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalValue?: NullableFloatFieldUpdateOperationsInput | number | null
    lastMovement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutStockItemsNestedInput
  }

  export type StockItemUncheckedUpdateWithoutMovementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    currentStock?: FloatFieldUpdateOperationsInput | number
    minStock?: FloatFieldUpdateOperationsInput | number
    maxStock?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalValue?: NullableFloatFieldUpdateOperationsInput | number | null
    lastMovement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutStockMovementsInput = {
    update: XOR<UserUpdateWithoutStockMovementsInput, UserUncheckedUpdateWithoutStockMovementsInput>
    create: XOR<UserCreateWithoutStockMovementsInput, UserUncheckedCreateWithoutStockMovementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStockMovementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStockMovementsInput, UserUncheckedUpdateWithoutStockMovementsInput>
  }

  export type UserUpdateWithoutStockMovementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: UserUpdateskillsInput | string[]
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUpdateManyWithoutAssignedToNestedInput
    workOrders?: WorkOrderUpdateManyWithoutAssignedToNestedInput
    certifications?: CertificationUpdateManyWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStockMovementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: UserUpdateskillsInput | string[]
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrders?: ManufacturingOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    certifications?: CertificationUncheckedUpdateManyWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ManufacturingOrderCreateManyAssignedToInput = {
    id?: string
    orderNumber: string
    productId: string
    quantity: number
    status?: $Enums.OrderStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    deadline: Date | string
    completedAt?: Date | string | null
    estimatedCost?: number | null
    actualCost?: number | null
    progress?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderCreateManyAssignedToInput = {
    id?: string
    orderNumber: string
    title: string
    description?: string | null
    manufacturingOrderId: string
    workCenterId: string
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.Priority
    estimatedHours: number
    actualHours?: number | null
    progress?: number
    startedAt?: Date | string | null
    pausedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate: Date | string
    pausedReason?: string | null
    comments?: string | null
    tags?: WorkOrderCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockMovementCreateManyOperatorInput = {
    id?: string
    stockItemId: string
    type: $Enums.StockMovementType
    quantity: number
    balanceBefore: number
    balanceAfter: number
    reference?: string | null
    reason: string
    timestamp?: Date | string
  }

  export type CertificationCreateManyUserInput = {
    id?: string
    name: string
    issuer: string
    issueDate: Date | string
    expiryDate?: Date | string | null
    isVerified?: boolean
  }

  export type UserActivityCreateManyUserInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type ManufacturingOrderUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableFloatFieldUpdateOperationsInput | number | null
    actualCost?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutManufacturingOrdersNestedInput
    workOrders?: WorkOrderUpdateManyWithoutManufacturingOrderNestedInput
  }

  export type ManufacturingOrderUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableFloatFieldUpdateOperationsInput | number | null
    actualCost?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderUncheckedUpdateManyWithoutManufacturingOrderNestedInput
  }

  export type ManufacturingOrderUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableFloatFieldUpdateOperationsInput | number | null
    actualCost?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    estimatedHours?: FloatFieldUpdateOperationsInput | number
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedReason?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: WorkOrderUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrder?: ManufacturingOrderUpdateOneRequiredWithoutWorkOrdersNestedInput
    workCenter?: WorkCenterUpdateOneRequiredWithoutWorkOrdersNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturingOrderId?: StringFieldUpdateOperationsInput | string
    workCenterId?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    estimatedHours?: FloatFieldUpdateOperationsInput | number
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedReason?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: WorkOrderUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturingOrderId?: StringFieldUpdateOperationsInput | string
    workCenterId?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    estimatedHours?: FloatFieldUpdateOperationsInput | number
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedReason?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: WorkOrderUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumStockMovementTypeFieldUpdateOperationsInput | $Enums.StockMovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    balanceBefore?: FloatFieldUpdateOperationsInput | number
    balanceAfter?: FloatFieldUpdateOperationsInput | number
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    stockItem?: StockItemUpdateOneRequiredWithoutMovementsNestedInput
  }

  export type StockMovementUncheckedUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    stockItemId?: StringFieldUpdateOperationsInput | string
    type?: EnumStockMovementTypeFieldUpdateOperationsInput | $Enums.StockMovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    balanceBefore?: FloatFieldUpdateOperationsInput | number
    balanceAfter?: FloatFieldUpdateOperationsInput | number
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementUncheckedUpdateManyWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    stockItemId?: StringFieldUpdateOperationsInput | string
    type?: EnumStockMovementTypeFieldUpdateOperationsInput | $Enums.StockMovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    balanceBefore?: FloatFieldUpdateOperationsInput | number
    balanceAfter?: FloatFieldUpdateOperationsInput | number
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    issuer?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CertificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    issuer?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CertificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    issuer?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserActivityUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManufacturingOrderCreateManyProductInput = {
    id?: string
    orderNumber: string
    quantity: number
    status?: $Enums.OrderStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    deadline: Date | string
    completedAt?: Date | string | null
    assignedToId?: string | null
    estimatedCost?: number | null
    actualCost?: number | null
    progress?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillOfMaterialsCreateManyProductInput = {
    id?: string
    version: string
    status?: $Enums.BomStatus
    description?: string | null
    totalCost?: number | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BomItemCreateManyComponentInput = {
    id?: string
    bomId: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    leadTimeDays?: number | null
    supplier?: string | null
    specifications?: string | null
  }

  export type StockItemCreateManyProductInput = {
    id?: string
    currentStock: number
    minStock: number
    maxStock: number
    unit: string
    location: string
    unitCost?: number | null
    totalValue?: number | null
    lastMovement?: Date | string | null
    supplier?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ManufacturingOrderUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCost?: NullableFloatFieldUpdateOperationsInput | number | null
    actualCost?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutManufacturingOrdersNestedInput
    workOrders?: WorkOrderUpdateManyWithoutManufacturingOrderNestedInput
  }

  export type ManufacturingOrderUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedCost?: NullableFloatFieldUpdateOperationsInput | number | null
    actualCost?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderUncheckedUpdateManyWithoutManufacturingOrderNestedInput
  }

  export type ManufacturingOrderUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedCost?: NullableFloatFieldUpdateOperationsInput | number | null
    actualCost?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillOfMaterialsUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: EnumBomStatusFieldUpdateOperationsInput | $Enums.BomStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: BomItemUpdateManyWithoutBomNestedInput
  }

  export type BillOfMaterialsUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: EnumBomStatusFieldUpdateOperationsInput | $Enums.BomStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: BomItemUncheckedUpdateManyWithoutBomNestedInput
  }

  export type BillOfMaterialsUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: EnumBomStatusFieldUpdateOperationsInput | $Enums.BomStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BomItemUpdateWithoutComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableStringFieldUpdateOperationsInput | string | null
    bom?: BillOfMaterialsUpdateOneRequiredWithoutItemsNestedInput
  }

  export type BomItemUncheckedUpdateWithoutComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    bomId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BomItemUncheckedUpdateManyWithoutComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    bomId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StockItemUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentStock?: FloatFieldUpdateOperationsInput | number
    minStock?: FloatFieldUpdateOperationsInput | number
    maxStock?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalValue?: NullableFloatFieldUpdateOperationsInput | number | null
    lastMovement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    movements?: StockMovementUpdateManyWithoutStockItemNestedInput
  }

  export type StockItemUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentStock?: FloatFieldUpdateOperationsInput | number
    minStock?: FloatFieldUpdateOperationsInput | number
    maxStock?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalValue?: NullableFloatFieldUpdateOperationsInput | number | null
    lastMovement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    movements?: StockMovementUncheckedUpdateManyWithoutStockItemNestedInput
  }

  export type StockItemUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentStock?: FloatFieldUpdateOperationsInput | number
    minStock?: FloatFieldUpdateOperationsInput | number
    maxStock?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalValue?: NullableFloatFieldUpdateOperationsInput | number | null
    lastMovement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BomItemCreateManyBomInput = {
    id?: string
    componentId: string
    quantity: number
    unit: string
    unitCost?: number | null
    totalCost?: number | null
    leadTimeDays?: number | null
    supplier?: string | null
    specifications?: string | null
  }

  export type BomItemUpdateWithoutBomInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableStringFieldUpdateOperationsInput | string | null
    component?: ProductUpdateOneRequiredWithoutBomComponentsNestedInput
  }

  export type BomItemUncheckedUpdateWithoutBomInput = {
    id?: StringFieldUpdateOperationsInput | string
    componentId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BomItemUncheckedUpdateManyWithoutBomInput = {
    id?: StringFieldUpdateOperationsInput | string
    componentId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    unitCost?: NullableFloatFieldUpdateOperationsInput | number | null
    totalCost?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkOrderCreateManyManufacturingOrderInput = {
    id?: string
    orderNumber: string
    title: string
    description?: string | null
    workCenterId: string
    assignedToId?: string | null
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.Priority
    estimatedHours: number
    actualHours?: number | null
    progress?: number
    startedAt?: Date | string | null
    pausedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate: Date | string
    pausedReason?: string | null
    comments?: string | null
    tags?: WorkOrderCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderUpdateWithoutManufacturingOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    estimatedHours?: FloatFieldUpdateOperationsInput | number
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedReason?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: WorkOrderUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workCenter?: WorkCenterUpdateOneRequiredWithoutWorkOrdersNestedInput
    assignedTo?: UserUpdateOneWithoutWorkOrdersNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutManufacturingOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    workCenterId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    estimatedHours?: FloatFieldUpdateOperationsInput | number
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedReason?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: WorkOrderUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderUncheckedUpdateManyWithoutManufacturingOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    workCenterId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    estimatedHours?: FloatFieldUpdateOperationsInput | number
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedReason?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: WorkOrderUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderCreateManyWorkCenterInput = {
    id?: string
    orderNumber: string
    title: string
    description?: string | null
    manufacturingOrderId: string
    assignedToId?: string | null
    status?: $Enums.WorkOrderStatus
    priority?: $Enums.Priority
    estimatedHours: number
    actualHours?: number | null
    progress?: number
    startedAt?: Date | string | null
    pausedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate: Date | string
    pausedReason?: string | null
    comments?: string | null
    tags?: WorkOrderCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderUpdateWithoutWorkCenterInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    estimatedHours?: FloatFieldUpdateOperationsInput | number
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedReason?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: WorkOrderUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manufacturingOrder?: ManufacturingOrderUpdateOneRequiredWithoutWorkOrdersNestedInput
    assignedTo?: UserUpdateOneWithoutWorkOrdersNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutWorkCenterInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturingOrderId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    estimatedHours?: FloatFieldUpdateOperationsInput | number
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedReason?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: WorkOrderUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderUncheckedUpdateManyWithoutWorkCenterInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturingOrderId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkOrderStatusFieldUpdateOperationsInput | $Enums.WorkOrderStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    estimatedHours?: FloatFieldUpdateOperationsInput | number
    actualHours?: NullableFloatFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedReason?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: WorkOrderUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementCreateManyStockItemInput = {
    id?: string
    type: $Enums.StockMovementType
    quantity: number
    balanceBefore: number
    balanceAfter: number
    reference?: string | null
    reason: string
    operatorId: string
    timestamp?: Date | string
  }

  export type StockMovementUpdateWithoutStockItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumStockMovementTypeFieldUpdateOperationsInput | $Enums.StockMovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    balanceBefore?: FloatFieldUpdateOperationsInput | number
    balanceAfter?: FloatFieldUpdateOperationsInput | number
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    operator?: UserUpdateOneRequiredWithoutStockMovementsNestedInput
  }

  export type StockMovementUncheckedUpdateWithoutStockItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumStockMovementTypeFieldUpdateOperationsInput | $Enums.StockMovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    balanceBefore?: FloatFieldUpdateOperationsInput | number
    balanceAfter?: FloatFieldUpdateOperationsInput | number
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockMovementUncheckedUpdateManyWithoutStockItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumStockMovementTypeFieldUpdateOperationsInput | $Enums.StockMovementType
    quantity?: FloatFieldUpdateOperationsInput | number
    balanceBefore?: FloatFieldUpdateOperationsInput | number
    balanceAfter?: FloatFieldUpdateOperationsInput | number
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BillOfMaterialsCountOutputTypeDefaultArgs instead
     */
    export type BillOfMaterialsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BillOfMaterialsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ManufacturingOrderCountOutputTypeDefaultArgs instead
     */
    export type ManufacturingOrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ManufacturingOrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkCenterCountOutputTypeDefaultArgs instead
     */
    export type WorkCenterCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkCenterCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StockItemCountOutputTypeDefaultArgs instead
     */
    export type StockItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StockItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CertificationDefaultArgs instead
     */
    export type CertificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CertificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserActivityDefaultArgs instead
     */
    export type UserActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserActivityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BillOfMaterialsDefaultArgs instead
     */
    export type BillOfMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BillOfMaterialsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BomItemDefaultArgs instead
     */
    export type BomItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BomItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ManufacturingOrderDefaultArgs instead
     */
    export type ManufacturingOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ManufacturingOrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkCenterDefaultArgs instead
     */
    export type WorkCenterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkCenterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkOrderDefaultArgs instead
     */
    export type WorkOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkOrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StockItemDefaultArgs instead
     */
    export type StockItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StockItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StockMovementDefaultArgs instead
     */
    export type StockMovementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StockMovementDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}